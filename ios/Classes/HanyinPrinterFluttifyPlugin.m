//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "HanyinPrinterFluttifyPlugin.h"
#import <objc/runtime.h>

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, id, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation HanyinPrinterFluttifyPlugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      @"PTOldCommandTSPL::selfTest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::selfTest(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref selfTest ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::appendCommand": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* cmd = (NSString*) args[@"cmd"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::appendCommand(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendCommand : cmd];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::printAndLineFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::printAndLineFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAndLineFeed ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setFontBold": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger bold = [args[@"bold"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setFontBold(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setFontBold : bold];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setPrinterStateAutomaticBackWithStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setPrinterStateAutomaticBackWithStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrinterStateAutomaticBackWithStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setPrintAreaSizeWithWidthHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger label_width = [args[@"label_width"] integerValue];
          // jsonable arg
          NSInteger label_height = [args[@"label_height"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setPrintAreaSizeWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrintAreaSizeWithWidth : label_width Height: label_height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::getPrinterStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::getPrinterStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref getPrinterStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setGapWithDistanceOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setGapWithDistance(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setGapWithDistance : distance Offset: offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setBlineWithHeightOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setBlineWithHeight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBlineWithHeight : height Offset: offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setOffsetWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setOffsetWithDistance(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setOffsetWithDistance : distance];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::printWithSetsCopies": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger sets = [args[@"sets"] integerValue];
          // jsonable arg
          NSInteger copies = [args[@"copies"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::printWithSets(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printWithSets : sets Copies: copies];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger font = [args[@"font"] integerValue];
          // jsonable arg
          NSInteger rotation = [args[@"rotation"] integerValue];
          // jsonable arg
          NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
          // jsonable arg
          NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
          // jsonable arg
          NSInteger safeHeight = [args[@"safeHeight"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger lineSpacing = [args[@"lineSpacing"] integerValue];
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::printAutoTextForVectorWithXpos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSInteger result = [ref printAutoTextForVectorWithXpos: x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication safeHeight: safeHeight width: width lineSpacing: lineSpacing text: text];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger font = [args[@"font"] integerValue];
          // jsonable arg
          NSInteger rotation = [args[@"rotation"] integerValue];
          // jsonable arg
          NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
          // jsonable arg
          NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
          // jsonable arg
          NSInteger safeHeight = [args[@"safeHeight"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger lineSpacing = [args[@"lineSpacing"] integerValue];
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::printAutoTextWithXpos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSInteger result = [ref printAutoTextWithXpos: x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication safeHeight: safeHeight width: width lineSpacing: lineSpacing text: text];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::appendTextWithXposYposFontRotationXmultiplicationYmultiplicationText": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger font = [args[@"font"] integerValue];
          // jsonable arg
          NSInteger rotation = [args[@"rotation"] integerValue];
          // jsonable arg
          NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
          // jsonable arg
          NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::appendTextWithXpos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendTextWithXpos : x_pos Ypos: y_pos Font: font Rotation: rotation Xmultiplication: x_multiplication Ymultiplication: y_multiplication Text: text];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCLS": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCLS(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCLS ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::printBarcodeWithXPosYPosTypeHeightHumanReadableRotationNarrowWideCodeNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSString* type = (NSString*) args[@"type"];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger readable = [args[@"readable"] integerValue];
          // jsonable arg
          NSInteger rotation = [args[@"rotation"] integerValue];
          // jsonable arg
          NSInteger narrow = [args[@"narrow"] integerValue];
          // jsonable arg
          NSInteger wide = [args[@"wide"] integerValue];
          // jsonable arg
          NSString* codeNumber = (NSString*) args[@"codeNumber"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::printBarcodeWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printBarcodeWithXPos : x_pos YPos: y_pos Type: type Height: height HumanReadable: readable Rotation: rotation Narrow: narrow Wide: wide CodeNumber: codeNumber];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::printQRcodeWithXPosYPosEccLevelCellWidthModeRotationModelMaskText": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSString* ecc_level = (NSString*) args[@"ecc_level"];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSString* mode = (NSString*) args[@"mode"];
          // jsonable arg
          NSInteger rotation = [args[@"rotation"] integerValue];
          // jsonable arg
          NSString* model = (NSString*) args[@"model"];
          // jsonable arg
          NSString* mask = (NSString*) args[@"mask"];
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::printQRcodeWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printQRcodeWithXPos : x_pos YPos: y_pos EccLevel: ecc_level CellWidth: width Mode: mode Rotation: rotation Model: model Mask: mask Text: text];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setSpeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger speed = [args[@"speed"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setSpeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setSpeed : speed];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setDensity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger density = [args[@"density"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setDensity(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setDensity : density];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setDirectionMirror": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger direction = [args[@"direction"] integerValue];
          // jsonable arg
          NSInteger mirror = [args[@"mirror"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setDirection(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setDirection : direction Mirror: mirror];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setReferenceXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setReferenceXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setReferenceXPos : x_pos YPos: y_pos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCodePage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* codepage = (NSString*) args[@"codepage"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCodePage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCodePage : codepage];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setFeedLength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger feedLength = [args[@"feedLength"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setFeedLength(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setFeedLength : feedLength];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setFormFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setFormFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setFormFeed ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setBackFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setBackFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBackFeed : distance];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setBackUP": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setBackUP(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBackUP : distance];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setHome": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setHome(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setHome ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setSoundWithLevelInterval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger level = [args[@"level"] integerValue];
          // jsonable arg
          NSInteger interval = [args[@"interval"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setSoundWithLevel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setSoundWithLevel : level Interval: interval];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCut": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCut(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCut ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setLimitFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger max_len = [args[@"max_len"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setLimitFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setLimitFeed : max_len];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::printBarWithXPosYPosWidthHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::printBarWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printBarWithXPos : x_pos YPos: y_pos Width: width Height: height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setBoxWithXStartYStartXEndYEndThickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger x_end = [args[@"x_end"] integerValue];
          // jsonable arg
          NSInteger y_end = [args[@"y_end"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setBoxWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBoxWithXStart : x_start YStart: y_start XEnd: x_end YEnd: y_end Thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setEllipseWithXStartYStartWidthHeightThickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setEllipseWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setEllipseWithXStart : x_start YStart: y_start Width: width Height: height Thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCircleWithXStartYStartDiameterThickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger diameter = [args[@"diameter"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCircleWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCircleWithXStart : x_start YStart: y_start Diameter: diameter Thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setEraseWithXStartYStartXWidthYHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger x_width = [args[@"x_width"] integerValue];
          // jsonable arg
          NSInteger y_height = [args[@"y_height"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setEraseWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setEraseWithXStart : x_start YStart: y_start XWidth: x_width YHeight: y_height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setDmatrixWithExpressionXPosYPosWidthHeightXMRowCol": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* expression = (NSString*) args[@"expression"];
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSString* xm = (NSString*) args[@"xm"];
          // jsonable arg
          NSString* row = (NSString*) args[@"row"];
          // jsonable arg
          NSString* col = (NSString*) args[@"col"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setDmatrixWithExpression(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setDmatrixWithExpression : expression XPos: x_pos YPos: y_pos Width: width Height: height XM: xm Row: row Col: col];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setMaxicodeXPosYPosModeClassCountryPostLM": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger iClass = [args[@"iClass"] integerValue];
          // jsonable arg
          NSInteger country = [args[@"country"] integerValue];
          // jsonable arg
          NSString* post = (NSString*) args[@"post"];
          // jsonable arg
          NSInteger lm = [args[@"lm"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setMaxicode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setMaxicode : text XPos: x_pos YPos: y_pos Mode: mode Class: iClass Country: country Post: post LM: lm];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::printPDF417WithXPosYPosWidthHeightRotateOptionExpression": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger rotate = [args[@"rotate"] integerValue];
          // jsonable arg
          NSString* option = (NSString*) args[@"option"];
          // jsonable arg
          NSString* expression = (NSString*) args[@"expression"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::printPDF417WithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printPDF417WithXPos : x_pos YPos: y_pos Width: width Height: height Rotate: rotate Option: option Expression: expression];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger XPos = [args[@"XPos"] integerValue];
          // jsonable arg
          NSInteger YPos = [args[@"YPos"] integerValue];
          // jsonable arg
          NSInteger rotate = [args[@"rotate"] integerValue];
          // jsonable arg
          NSInteger size = [args[@"size"] integerValue];
          // jsonable arg
          NSInteger ecp = [args[@"ecp"] integerValue];
          // jsonable arg
          NSInteger flg = [args[@"flg"] integerValue];
          // jsonable arg
          NSInteger menu = [args[@"menu"] integerValue];
          // jsonable arg
          NSInteger multi = [args[@"multi"] integerValue];
          // jsonable arg
          NSInteger rev = [args[@"rev"] integerValue];
          // jsonable arg
          NSString* aztecData = (NSString*) args[@"aztecData"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::printAztecWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAztecWithXPos : XPos YPos: YPos rotate: rotate size: size ecp: ecp flg: flg menu: menu multi: multi rev: rev aztecData: aztecData];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::putBMPWithFilenameXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* filename = (NSString*) args[@"filename"];
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::putBMPWithFilename(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref putBMPWithFilename : filename XPos: x_pos YPos: y_pos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::putPCXWithFilenameXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* filename = (NSString*) args[@"filename"];
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::putPCXWithFilename(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref putPCXWithFilename : filename XPos: x_pos YPos: y_pos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setReverseWithXStartYStartXWidthYHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger x_width = [args[@"x_width"] integerValue];
          // jsonable arg
          NSInteger y_height = [args[@"y_height"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setReverseWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setReverseWithXStart : x_start YStart: y_start XWidth: x_width YHeight: y_height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCounterWithCounterNumberStep": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger counterNumber = [args[@"counterNumber"] integerValue];
          // jsonable arg
          NSInteger step = [args[@"step"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCounterWithCounterNumber(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCounterWithCounterNumber : counterNumber Step: step];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCutterON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCutterON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCutterON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCutterOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCutterOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCutterOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCutterBATCH": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCutterBATCH(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCutterBATCH ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCutterPieces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger pieces = [args[@"pieces"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCutterPieces(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCutterPieces : pieces];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setPARTIAL_CUTTER_OFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setPARTIAL_CUTTER_OFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPARTIAL_CUTTER_OFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setPARTIAL_CUTTER_BATCH": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setPARTIAL_CUTTER_BATCH(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPARTIAL_CUTTER_BATCH ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setPARTIAL_CUTTER_Pieces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger pieces = [args[@"pieces"] integerValue];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setPARTIAL_CUTTER_Pieces(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPARTIAL_CUTTER_Pieces : pieces];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setBackOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setBackOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBackOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setBackON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setBackON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBackON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setKEYSwitch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger index = [args[@"index"] integerValue];
          // jsonable arg
          NSString* switcher = (NSString*) args[@"switcher"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setKEY(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setKEY : index Switch: switcher];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setLEDSwitch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger index = [args[@"index"] integerValue];
          // jsonable arg
          NSString* switcher = (NSString*) args[@"switcher"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setLED(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setLED : index Switch: switcher];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setPeelON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setPeelON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPeelON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setPeelOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setPeelOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPeelOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setTearON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setTearON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setTearON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setTearOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setTearOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setTearOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setStriperON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setStriperON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setStriperON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setStriperOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setStriperOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setStriperOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setHeadON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setHeadON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setHeadON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setHeadOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setHeadOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setHeadOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setRibbonON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setRibbonON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setRibbonON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setRibbonOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setRibbonOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setRibbonOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setCOM1WithBaudParityDataStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger baud = [args[@"baud"] integerValue];
          // jsonable arg
          NSString* parity = (NSString*) args[@"parity"];
          // jsonable arg
          NSString* data = (NSString*) args[@"data"];
          // jsonable arg
          NSString* stop = (NSString*) args[@"stop"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setCOM1WithBaud(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCOM1WithBaud : baud Parity: parity Data: data Stop: stop];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setPrintKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setPrintKey(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrintKey : key];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setReprintON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setReprintON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setReprintON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::setReprintOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandTSPL@%@::setReprintOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setReprintOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCommon::getPrinterModelName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCommon* ref = (PTCommandCommon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCommon@%@::getPrinterModelName(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref getPrinterModelName ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::initCommandQueue": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::initCommandQueue(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref initCommandQueue ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendCommandData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* cmdData = (NSData*) HEAP[@([args[@"cmdData"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendCommandData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendCommandData : cmdData];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::getCommandData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::getCommandData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSData* result = [ref getCommandData];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendText": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendText(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendText : text];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::getPrinterStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::getPrinterStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref getPrinterStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printSelfTest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printSelfTest(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printSelfTest ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printAndLineFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printAndLineFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAndLineFeed ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printAndReturnStandardMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printAndReturnStandardMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAndReturnStandardMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printAndCarriageReturn": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printAndCarriageReturn(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAndCarriageReturn ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printDataInPageMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printDataInPageMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printDataInPageMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::turnOnPrintStatusCallBack": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL flag = [args[@"flag"] boolValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::turnOnPrintStatusCallBack(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref turnOnPrintStatusCallBack : flag];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printAndFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printAndFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAndFeed : offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printAndReverseFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printAndReverseFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAndReverseFeed : offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printAndFeedLines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger lines = [args[@"lines"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printAndFeedLines(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAndFeedLines : lines];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printAndReverseFeedLines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger lines = [args[@"lines"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printAndReverseFeedLines(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAndReverseFeedLines : lines];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setLineSpacingDefault": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setLineSpacingDefault(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setLineSpacingDefault ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setLineSpacing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger spacing = [args[@"spacing"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setLineSpacing(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setLineSpacing : spacing];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::cancelPrint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::cancelPrint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancelPrint ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setRightCharacterSpacing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger spacing = [args[@"spacing"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setRightCharacterSpacing(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setRightCharacterSpacing : spacing];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setTextMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          ESCText mode = (ESCText) [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setTextMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setTextMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setTextStyleMiniBolddoubleWidthdoubleHeightunderline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL mini = [args[@"mini"] boolValue];
          // jsonable arg
          BOOL bold = [args[@"bold"] boolValue];
          // jsonable arg
          BOOL doubleWidth = [args[@"doubleWidth"] boolValue];
          // jsonable arg
          BOOL doubleHeight = [args[@"doubleHeight"] boolValue];
          // jsonable arg
          BOOL underline = [args[@"underline"] boolValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setTextStyleMini(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setTextStyleMini : mini bold: bold doubleWidth: doubleWidth doubleHeight: doubleHeight underline: underline];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendTextMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
          // enum arg
          ESCText mode = (ESCText) [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendText(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendText : text mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setUserDefinedCharacterSet": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger set = [args[@"set"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setUserDefinedCharacterSet(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setUserDefinedCharacterSet : set];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::defineCharactersWithCodeStartCodeEndhorizontaldata": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger codeStart = [args[@"codeStart"] integerValue];
          // jsonable arg
          NSInteger codeEnd = [args[@"codeEnd"] integerValue];
          // jsonable arg
          NSInteger horizontal = [args[@"horizontal"] integerValue];
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::defineCharactersWithCodeStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref defineCharactersWithCodeStart : codeStart codeEnd: codeEnd horizontal: horizontal data: data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setUnderline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger underline = [args[@"underline"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setUnderline(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setUnderline : underline];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::cancelUserDefinedCharacters": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger n = [args[@"n"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::cancelUserDefinedCharacters(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancelUserDefinedCharacters : n];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setBold": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger bold = [args[@"bold"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setBold(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBold : bold];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setDoubleStrike": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger doubleStrike = [args[@"doubleStrike"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setDoubleStrike(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setDoubleStrike : doubleStrike];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setCharacterFont": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger font = [args[@"font"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setCharacterFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCharacterFont : font];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setInternationalCharacterSet": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger set = [args[@"set"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setInternationalCharacterSet(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setInternationalCharacterSet : set];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setVerticalMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setVerticalMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setVerticalMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPrintColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger color = [args[@"color"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPrintColor(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrintColor : color];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setCharacterCodeTable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger table = [args[@"table"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setCharacterCodeTable(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCharacterCodeTable : table];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPrinterCodepage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger codepage = [args[@"codepage"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPrinterCodepage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrinterCodepage : codepage];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setCharacterTransformMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setCharacterTransformMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCharacterTransformMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::enterPrinterSaveMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::enterPrinterSaveMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref enterPrinterSaveMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::exitPrinterSaveMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::exitPrinterSaveMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref exitPrinterSaveMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::getVietnamTransformMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::getVietnamTransformMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref getVietnamTransformMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setVietnamTransformMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setVietnamTransformMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setVietnamTransformMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setThaiTransformStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setThaiTransformStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setThaiTransformStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPrinterLanguageMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPrinterLanguageMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrinterLanguageMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setUpToDownMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setUpToDownMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setUpToDownMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setCharacterColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger color = [args[@"color"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setCharacterColor(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCharacterColor : color];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setBackgroundColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger color = [args[@"color"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setBackgroundColor(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBackgroundColor : color];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setShadowModeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger color = [args[@"color"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setShadowMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setShadowMode : mode color: color];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setCharacterSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger size = [args[@"size"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setCharacterSize(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCharacterSize : size];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setCharacterWidthHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setCharacterWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCharacterWidth : width height: height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setCharacterMultipleSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger size = [args[@"size"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setCharacterMultipleSize(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCharacterMultipleSize : size];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setReverse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger reverse = [args[@"reverse"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setReverse(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setReverse : reverse];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setSmooth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger smooth = [args[@"smooth"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setSmooth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setSmooth : smooth];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPanelButtonMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPanelButtonMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPanelButtonMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::enableOutPaperSensor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL enable = [args[@"enable"] boolValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::enableOutPaperSensor(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref enableOutPaperSensor : enable];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::enableStopPrintSensor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL enable = [args[@"enable"] boolValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::enableStopPrintSensor(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref enableStopPrintSensor : enable];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setHorizontalTab": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setHorizontalTab(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setHorizontalTab ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setAbsolutePosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger position = [args[@"position"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setAbsolutePosition(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setAbsolutePosition : position];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setHorizontalTabPositionsData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setHorizontalTabPositionsData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setHorizontalTabPositionsData : data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::pageSetPrintDirection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger direction = [args[@"direction"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::pageSetPrintDirection(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref pageSetPrintDirection : direction];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::pageSetPrintAreaWithXPosYPoswidthheight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::pageSetPrintAreaWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref pageSetPrintAreaWithXPos : xPos yPos: yPos width: width height: height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setRelativePosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger position = [args[@"position"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setRelativePosition(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setRelativePosition : position];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setJustification": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger justification = [args[@"justification"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setJustification(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setJustification : justification];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::pageSetAbsoluteYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::pageSetAbsoluteYPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref pageSetAbsoluteYPos : yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setLeftMargin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger left = [args[@"left"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setLeftMargin(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setLeftMargin : left];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setLinePrintPositionMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setLinePrintPositionMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setLinePrintPositionMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPrintAreaWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPrintAreaWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrintAreaWidth : width];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::pageSetRelativeYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::pageSetRelativeYPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref pageSetRelativeYPos : yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setImageModeImageWidthdata": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setImageMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setImageMode : mode imageWidth: width data: data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setNVBitImageMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger imageID = [args[@"imageID"] integerValue];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setNVBitImage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setNVBitImage : imageID Mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setNVGraphicsMemorySize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* size = (NSString*) args[@"size"];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setNVGraphicsMemorySize(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setNVGraphicsMemorySize : size];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setGraphicDotDensityX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger fn = [args[@"fn"] integerValue];
          // jsonable arg
          NSInteger x = [args[@"x"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setGraphicDotDensity(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setGraphicDotDensity : fn x: x];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printBufferGraphic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger fn = [args[@"fn"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printBufferGraphic(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printBufferGraphic : fn];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitGraphicRemainingMemory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger fn = [args[@"fn"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitGraphicRemainingMemory(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitGraphicRemainingMemory : fn];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitDownloadGraphicRemainingMemory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger fn = [args[@"fn"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitDownloadGraphicRemainingMemory(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitDownloadGraphicRemainingMemory : fn];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitNVGrapihcKeyCodeList": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitNVGrapihcKeyCodeList(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitNVGrapihcKeyCodeList ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::deleteNVGraphicAll": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::deleteNVGraphicAll(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref deleteNVGraphicAll ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::deleteNVGraphicWithKeycode1Keycode2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger keycode1 = [args[@"keycode1"] integerValue];
          // jsonable arg
          NSInteger keycode2 = [args[@"keycode2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::deleteNVGraphicWithKeycode1(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref deleteNVGraphicWithKeycode1 : keycode1 keycode2: keycode2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::defineRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger keycode = [args[@"keycode"] integerValue];
          // jsonable arg
          NSInteger keycode2 = [args[@"keycode2"] integerValue];
          // jsonable arg
          NSInteger imageWidth = [args[@"imageWidth"] integerValue];
          // jsonable arg
          NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::defineRasterNVGraphicData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref defineRasterNVGraphicData : data keycode: keycode keycode2: keycode2 imageWidth: imageWidth imageHeight: imageHeight];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::defineColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger keycode = [args[@"keycode"] integerValue];
          // jsonable arg
          NSInteger keycode2 = [args[@"keycode2"] integerValue];
          // jsonable arg
          NSInteger imageWidth = [args[@"imageWidth"] integerValue];
          // jsonable arg
          NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::defineColumnNVGraphicData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref defineColumnNVGraphicData : data keycode: keycode keycode2: keycode2 imageWidth: imageWidth imageHeight: imageHeight];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printNVGraphicWithKeycodeKeycode2xScaleyScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger keycode = [args[@"keycode"] integerValue];
          // jsonable arg
          NSInteger keycode2 = [args[@"keycode2"] integerValue];
          // jsonable arg
          NSInteger xScale = [args[@"xScale"] integerValue];
          // jsonable arg
          NSInteger yScale = [args[@"yScale"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printNVGraphicWithKeycode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printNVGraphicWithKeycode : keycode keycode2: keycode2 xScale: xScale yScale: yScale];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitGraphicKeycodeList": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitGraphicKeycodeList(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitGraphicKeycodeList ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::deleteDownloadedNVGraphicAll": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::deleteDownloadedNVGraphicAll(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref deleteDownloadedNVGraphicAll ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::deleteDownloadedNVGraphicKeycodeKeycode2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger keycode = [args[@"keycode"] integerValue];
          // jsonable arg
          NSInteger keycode2 = [args[@"keycode2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::deleteDownloadedNVGraphicKeycode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref deleteDownloadedNVGraphicKeycode : keycode keycode2: keycode2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::defineDownloadedRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger keycode = [args[@"keycode"] integerValue];
          // jsonable arg
          NSInteger keycode2 = [args[@"keycode2"] integerValue];
          // jsonable arg
          NSInteger imageWidth = [args[@"imageWidth"] integerValue];
          // jsonable arg
          NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::defineDownloadedRasterNVGraphicData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref defineDownloadedRasterNVGraphicData : data keycode: keycode keycode2: keycode2 imageWidth: imageWidth imageHeight: imageHeight];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::defineDownloadedColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger keycode = [args[@"keycode"] integerValue];
          // jsonable arg
          NSInteger keycode2 = [args[@"keycode2"] integerValue];
          // jsonable arg
          NSInteger imageWidth = [args[@"imageWidth"] integerValue];
          // jsonable arg
          NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::defineDownloadedColumnNVGraphicData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref defineDownloadedColumnNVGraphicData : data keycode: keycode keycode2: keycode2 imageWidth: imageWidth imageHeight: imageHeight];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printDownloadedNVGraphicWithKeycodeKeycode2xScaleyScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger keycode = [args[@"keycode"] integerValue];
          // jsonable arg
          NSInteger keycode2 = [args[@"keycode2"] integerValue];
          // jsonable arg
          NSInteger xScale = [args[@"xScale"] integerValue];
          // jsonable arg
          NSInteger yScale = [args[@"yScale"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printDownloadedNVGraphicWithKeycode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printDownloadedNVGraphicWithKeycode : keycode keycode2: keycode2 xScale: xScale yScale: yScale];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::storeRasterGraphicDataXScaleyScaleimageWidthimageHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger xScale = [args[@"xScale"] integerValue];
          // jsonable arg
          NSInteger yScale = [args[@"yScale"] integerValue];
          // jsonable arg
          NSInteger imageWidth = [args[@"imageWidth"] integerValue];
          // jsonable arg
          NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::storeRasterGraphicData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref storeRasterGraphicData : data xScale: xScale yScale: yScale imageWidth: imageWidth imageHeight: imageHeight];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::storeColumnGraphicDataXScaleyScaleimageWidthimageHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger xScale = [args[@"xScale"] integerValue];
          // jsonable arg
          NSInteger yScale = [args[@"yScale"] integerValue];
          // jsonable arg
          NSInteger imageWidth = [args[@"imageWidth"] integerValue];
          // jsonable arg
          NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::storeColumnGraphicData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref storeColumnGraphicData : data xScale: xScale yScale: yScale imageWidth: imageWidth imageHeight: imageHeight];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::defineNVGraphicDataNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger number = [args[@"number"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::defineNVGraphicData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref defineNVGraphicData : data number: number];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::defineDownloadedImageWidthBytesheightBytes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* imageData = (NSData*) HEAP[@([args[@"imageData"] integerValue])];
          // jsonable arg
          NSInteger widthBytes = [args[@"widthBytes"] integerValue];
          // jsonable arg
          NSInteger heightBytes = [args[@"heightBytes"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::defineDownloadedImage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref defineDownloadedImage : imageData widthBytes: widthBytes heightBytes: heightBytes];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::printDownloadedImageWithScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger scale = [args[@"scale"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::printDownloadedImageWithScale(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printDownloadedImageWithScale : scale];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitRealTimeStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitRealTimeStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitRealTimeStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitPeripheralDeviceStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitPeripheralDeviceStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitPeripheralDeviceStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitPaperSonsorStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitPaperSonsorStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitPaperSonsorStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setASBStatusWithDrawerOfflineerrorrollPaperpanelSwitch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL drawer = [args[@"drawer"] boolValue];
          // jsonable arg
          BOOL offline = [args[@"offline"] boolValue];
          // jsonable arg
          BOOL error = [args[@"error"] boolValue];
          // jsonable arg
          BOOL rollPaper = [args[@"rollPaper"] boolValue];
          // jsonable arg
          BOOL panelSwitch = [args[@"panelSwitch"] boolValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setASBStatusWithDrawer(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setASBStatusWithDrawer : drawer offline: offline error: error rollPaper: rollPaper panelSwitch: panelSwitch];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setInkASBWithOfflineDetection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL offline = [args[@"offline"] boolValue];
          // jsonable arg
          BOOL detection = [args[@"detection"] boolValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setInkASBWithOffline(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setInkASBWithOffline : offline detection: detection];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setHRIFont": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger font = [args[@"font"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setHRIFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setHRIFont : font];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendBarcodeDatajustificationwidthheighthri": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          ESCBarcode type = (ESCBarcode) [args[@"type"] integerValue];
          // jsonable arg
          NSString* data = (NSString*) args[@"data"];
          // jsonable arg
          NSInteger justification = [args[@"justification"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger hri = [args[@"hri"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendBarcode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendBarcode : type data: data justification: justification width: width height: height hri: hri];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::defineMacro": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::defineMacro(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref defineMacro ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::executeMacroWithTimesWaitTimesmode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger times = [args[@"times"] integerValue];
          // jsonable arg
          NSInteger waitTimes = [args[@"waitTimes"] integerValue];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::executeMacroWithTimes(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref executeMacroWithTimes : times waitTimes: waitTimes mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::returnHome": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::returnHome(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref returnHome ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setUnidirectionalPrintMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setUnidirectionalPrintMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setUnidirectionalPrintMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPartialCut1": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPartialCut1(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPartialCut1 ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPartialCut3": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPartialCut3(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPartialCut3 ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPartialCut": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPartialCut(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPartialCut ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setFullCut": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setFullCut(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setFullCut ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPartialCutWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPartialCutWithDistance(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPartialCutWithDistance : distance];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setFullCutWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setFullCutWithDistance(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setFullCutWithDistance : distance];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setCutModeDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setCutMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCutMode : mode distance: distance];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::kickCashdrawer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger number = [args[@"number"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::kickCashdrawer(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref kickCashdrawer : number];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::getPrinterCashdrawerStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::getPrinterCashdrawerStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref getPrinterCashdrawerStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::sendRealTimeRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger request = [args[@"request"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::sendRealTimeRequest(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref sendRealTimeRequest : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::generatePulseWithModeTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger time = [args[@"time"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::generatePulseWithMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref generatePulseWithMode : mode Time: time];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::executePowerOffSequence": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::executePowerOffSequence(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref executePowerOffSequence ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitSpecifiedStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitSpecifiedStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitSpecifiedStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::clearBuffer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::clearBuffer(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref clearBuffer ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escBeepIntegratedBeeperWithTimesT1T2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger times = [args[@"times"] integerValue];
          // jsonable arg
          NSInteger t1 = [args[@"t1"] integerValue];
          // jsonable arg
          NSInteger t2 = [args[@"t2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escBeepIntegratedBeeperWithTimes(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escBeepIntegratedBeeperWithTimes : times T1: t1 T2: t2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSetIntegratedBeeperWhenOfflineFactorsOccurATimesT1T2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger a = [args[@"a"] integerValue];
          // jsonable arg
          NSInteger times = [args[@"times"] integerValue];
          // jsonable arg
          NSInteger t1 = [args[@"t1"] integerValue];
          // jsonable arg
          NSInteger t2 = [args[@"t2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSetIntegratedBeeperWhenOfflineFactorsOccurA(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSetIntegratedBeeperWhenOfflineFactorsOccurA : a Times: times T1: t1 T2: t2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimesT1T2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger times = [args[@"times"] integerValue];
          // jsonable arg
          NSInteger t1 = [args[@"t1"] integerValue];
          // jsonable arg
          NSInteger t2 = [args[@"t2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimes(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimes : times T1: t1 T2: t2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSelectPeripheralDevice": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSelectPeripheralDevice(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSelectPeripheralDevice : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::initializePrinter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::initializePrinter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref initializePrinter ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPageMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPageMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPageMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setStandardMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setStandardMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setStandardMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escGeneratePulsePinModeONTimeOFFTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger pin_mode = [args[@"pin_mode"] integerValue];
          // jsonable arg
          NSInteger on_time = [args[@"on_time"] integerValue];
          // jsonable arg
          NSInteger off_time = [args[@"off_time"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escGeneratePulsePinMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escGeneratePulsePinMode : pin_mode ONTime: on_time OFFTime: off_time];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escExecuteTestPrintTypeMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger type = [args[@"type"] integerValue];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escExecuteTestPrintType(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escExecuteTestPrintType : type Mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSetRealTimeCommandLengthTypemode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger cmdLength = [args[@"cmdLength"] integerValue];
          // jsonable arg
          NSInteger type = [args[@"type"] integerValue];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSetRealTimeCommandLength(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSetRealTimeCommandLength : cmdLength type: type mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escRequestTransmissionOfResponseOrStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escRequestTransmissionOfResponseOrStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escRequestTransmissionOfResponseOrStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSelectPrintControlMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSelectPrintControlMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSelectPrintControlMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setDensity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger density = [args[@"density"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setDensity(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setDensity : density];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setSpeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger speed = [args[@"speed"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setSpeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setSpeed : speed];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSelectNumbersOfPartsForThermalHeadEnergizing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger number = [args[@"number"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSelectNumbersOfPartsForThermalHeadEnergizing(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSelectNumbersOfPartsForThermalHeadEnergizing : number];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setPageAreaWithWidthHeightxOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger xOffset = [args[@"xOffset"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setPageAreaWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPageAreaWithWidth : width height: height xOffset: xOffset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendLineWithXPosYPosxEndyEndmode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger xEnd = [args[@"xEnd"] integerValue];
          // jsonable arg
          NSInteger yEnd = [args[@"yEnd"] integerValue];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendLineWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendRectWithXPosYPosxEndyEndmode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger xEnd = [args[@"xEnd"] integerValue];
          // jsonable arg
          NSInteger yEnd = [args[@"yEnd"] integerValue];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendRectWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendRectWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escTransmitPrinterID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger id_number = [args[@"id_number"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escTransmitPrinterID(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escTransmitPrinterID : id_number];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setMotionUnitsWithHorizontalVertical": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger horizontal = [args[@"horizontal"] integerValue];
          // jsonable arg
          NSInteger vertical = [args[@"vertical"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setMotionUnitsWithHorizontal(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setMotionUnitsWithHorizontal : horizontal vertical: vertical];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escInitializeMaintenanceCounter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger counter = [args[@"counter"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escInitializeMaintenanceCounter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escInitializeMaintenanceCounter : counter];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escTransmitMaintenanceCounter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger counter = [args[@"counter"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escTransmitMaintenanceCounter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escTransmitMaintenanceCounter : counter];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSetOnlineRecoveryWaitTime1WaitTime2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger wait_time1 = [args[@"wait_time1"] integerValue];
          // jsonable arg
          NSInteger wait_time2 = [args[@"wait_time2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSetOnlineRecoveryWaitTime1(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSetOnlineRecoveryWaitTime1 : wait_time1 WaitTime2: wait_time2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setKanjiWithReverseDoubleWidthdoubleHeightunderline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL reverse = [args[@"reverse"] boolValue];
          // jsonable arg
          BOOL doubleWidth = [args[@"doubleWidth"] boolValue];
          // jsonable arg
          BOOL doubleHeight = [args[@"doubleHeight"] boolValue];
          // jsonable arg
          BOOL underline = [args[@"underline"] boolValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setKanjiWithReverse(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setKanjiWithReverse : reverse doubleWidth: doubleWidth doubleHeight: doubleHeight underline: underline];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setKanjiMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setKanjiMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setKanjiMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setKanjiFontMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setKanjiFontMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setKanjiFontMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setKanjiUnderline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger underline = [args[@"underline"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setKanjiUnderline(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setKanjiUnderline : underline];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::cancelKanjiMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::cancelKanjiMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancelKanjiMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::defineKanjiFirstsecond": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger first = [args[@"first"] integerValue];
          // jsonable arg
          NSInteger second = [args[@"second"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::defineKanji(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref defineKanji : data first: first second: second];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setKanjiCodeSystem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger system = [args[@"system"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setKanjiCodeSystem(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setKanjiCodeSystem : system];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setKanjiSpacingWithLeftRight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger left = [args[@"left"] integerValue];
          // jsonable arg
          NSInteger right = [args[@"right"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setKanjiSpacingWithLeft(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setKanjiSpacingWithLeft : left right: right];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::setKanjiQuadrupleMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::setKanjiQuadrupleMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setKanjiQuadrupleMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::cancelKanjiDefineWithFirstSecond": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger first = [args[@"first"] integerValue];
          // jsonable arg
          NSInteger second = [args[@"second"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::cancelKanjiDefineWithFirst(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancelKanjiDefineWithFirst : first second: second];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendPDF417DataRowcolumnwidthrowHeighteccModeeccLeveloption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* data = (NSString*) args[@"data"];
          // jsonable arg
          NSInteger row = [args[@"row"] integerValue];
          // jsonable arg
          NSInteger column = [args[@"column"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger rowHeight = [args[@"rowHeight"] integerValue];
          // jsonable arg
          NSInteger eccMode = [args[@"eccMode"] integerValue];
          // jsonable arg
          NSInteger eccLevel = [args[@"eccLevel"] integerValue];
          // jsonable arg
          NSInteger option = [args[@"option"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendPDF417Data(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendPDF417Data : data row: row column: column width: width rowHeight: rowHeight eccMode: eccMode eccLevel: eccLevel option: option];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitPDF417SymbolDataSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitPDF417SymbolDataSize(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitPDF417SymbolDataSize ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendQRCodeDataJustificationleftMargineccLevelmodelsize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* data = (NSString*) args[@"data"];
          // jsonable arg
          NSInteger justification = [args[@"justification"] integerValue];
          // jsonable arg
          NSInteger leftMargin = [args[@"leftMargin"] integerValue];
          // jsonable arg
          NSInteger eccLevel = [args[@"eccLevel"] integerValue];
          // jsonable arg
          NSInteger model = [args[@"model"] integerValue];
          // jsonable arg
          NSInteger size = [args[@"size"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendQRCodeData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendQRCodeData : data justification: justification leftMargin: leftMargin eccLevel: eccLevel model: model size: size];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitQRCodeSymbolDataSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitQRCodeSymbolDataSize(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitQRCodeSymbolDataSize ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendMaxiCodeDataMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* data = (NSString*) args[@"data"];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendMaxiCodeData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendMaxiCodeData : data mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitMaxiCodeSymbolDataSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitMaxiCodeSymbolDataSize(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitMaxiCodeSymbolDataSize ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendRSS2DataModemoduleWidthmaxWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger moduleWidth = [args[@"moduleWidth"] integerValue];
          // jsonable arg
          NSInteger maxWidth = [args[@"maxWidth"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendRSS2Data(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendRSS2Data : data mode: mode moduleWidth: moduleWidth maxWidth: maxWidth];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitRSS2SymbolDataSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitRSS2SymbolDataSize(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitRSS2SymbolDataSize ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::appendCompositeSymbolDataModetypemoduleWidthmaxWidthhriFont": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger type = [args[@"type"] integerValue];
          // jsonable arg
          NSInteger moduleWidth = [args[@"moduleWidth"] integerValue];
          // jsonable arg
          NSInteger maxWidth = [args[@"maxWidth"] integerValue];
          // jsonable arg
          NSInteger hriFont = [args[@"hriFont"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::appendCompositeSymbolData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendCompositeSymbolData : data mode: mode type: type moduleWidth: moduleWidth maxWidth: maxWidth hriFont: hriFont];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitCompositeSymbolDataSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitCompositeSymbolDataSize(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitCompositeSymbolDataSize ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::writeNVUserMemoryData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger address = [args[@"address"] integerValue];
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::writeNVUserMemory(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref writeNVUserMemory : address data: data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::readNVUserMemoryLength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger address = [args[@"address"] integerValue];
          // jsonable arg
          NSInteger length = [args[@"length"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::readNVUserMemory(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref readNVUserMemory : address length: length];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::deleteRecordWithModeKeykey2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger key = [args[@"key"] integerValue];
          // jsonable arg
          NSInteger key2 = [args[@"key2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::deleteRecordWithMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref deleteRecordWithMode : mode key: key key2: key2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::storeRecordWithModeKeykey2data": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger key = [args[@"key"] integerValue];
          // jsonable arg
          NSInteger key2 = [args[@"key2"] integerValue];
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::storeRecordWithMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref storeRecordWithMode : mode key: key key2: key2 data: data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitDataInRecordWithModeKeykey2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger key = [args[@"key"] integerValue];
          // jsonable arg
          NSInteger key2 = [args[@"key2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitDataInRecordWithMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitDataInRecordWithMode : mode key: key key2: key2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitNVMemoryUsedCapacityWithMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitNVMemoryUsedCapacityWithMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitNVMemoryUsedCapacityWithMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitNVMemoryRemainingCapacityWithMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitNVMemoryRemainingCapacityWithMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitNVMemoryRemainingCapacityWithMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::transmitKeyCodeListWithMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::transmitKeyCodeListWithMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref transmitKeyCodeListWithMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::deleteNVMemoryAllWithMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::deleteNVMemoryAllWithMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref deleteNVMemoryAllWithMode : mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::changeUserSettingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::changeUserSettingMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref changeUserSettingMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::endUserSettingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::endUserSettingMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref endUserSettingMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escChangeMemorySwitchData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escChangeMemorySwitchData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escChangeMemorySwitchData : data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escTransmitMemorySwitchSettingA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger a = [args[@"a"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escTransmitMemorySwitchSettingA(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escTransmitMemorySwitchSettingA : a];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSetCustomizedSettingValuesData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSetCustomizedSettingValuesData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSetCustomizedSettingValuesData : data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escTransmitCustomizedSettingValuesA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger a = [args[@"a"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escTransmitCustomizedSettingValuesA(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escTransmitCustomizedSettingValuesA : a];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escCopyUserDefinedPageWithFontNumberD1D2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger font_number = [args[@"font_number"] integerValue];
          // jsonable arg
          NSInteger d1 = [args[@"d1"] integerValue];
          // jsonable arg
          NSInteger d2 = [args[@"d2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escCopyUserDefinedPageWithFontNumber(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escCopyUserDefinedPageWithFontNumber : font_number D1: d1 D2: d2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escDefineColumnFormatDataForCharacterCodePageYC1C2Data": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger y = [args[@"y"] integerValue];
          // jsonable arg
          NSInteger c1 = [args[@"c1"] integerValue];
          // jsonable arg
          NSInteger c2 = [args[@"c2"] integerValue];
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escDefineColumnFormatDataForCharacterCodePageY(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escDefineColumnFormatDataForCharacterCodePageY : y C1: c1 C2: c2 Data: data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escDefineRasterFormatDataForCharacterrCodePageXC1C2Data": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x = [args[@"x"] integerValue];
          // jsonable arg
          NSInteger c1 = [args[@"c1"] integerValue];
          // jsonable arg
          NSInteger c2 = [args[@"c2"] integerValue];
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escDefineRasterFormatDataForCharacterrCodePageX(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escDefineRasterFormatDataForCharacterrCodePageX : x C1: c1 C2: c2 Data: data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escDeleteDataForChracterCodePageC1C2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger c1 = [args[@"c1"] integerValue];
          // jsonable arg
          NSInteger c2 = [args[@"c2"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escDeleteDataForChracterCodePageC1(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escDeleteDataForChracterCodePageC1 : c1 C2: c2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSetConfigurationItemForSerialInterfaceAData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger a = [args[@"a"] integerValue];
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSetConfigurationItemForSerialInterfaceA(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSetConfigurationItemForSerialInterfaceA : a Data: data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escTransmitConfigurationItemForSerialInterfacePLPHA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger pl = [args[@"pl"] integerValue];
          // jsonable arg
          NSInteger ph = [args[@"ph"] integerValue];
          // jsonable arg
          NSInteger a = [args[@"a"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escTransmitConfigurationItemForSerialInterfacePL(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escTransmitConfigurationItemForSerialInterfacePL : pl PH: ph A: a];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSetConfigurationItemForBluetoothInterfaceAData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger a = [args[@"a"] integerValue];
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSetConfigurationItemForBluetoothInterfaceA(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSetConfigurationItemForBluetoothInterfaceA : a Data: data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escTransmitConfigurationItemForBluetoothInterfaceA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger a = [args[@"a"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escTransmitConfigurationItemForBluetoothInterfaceA(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escTransmitConfigurationItemForBluetoothInterfaceA : a];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escDeletePaperLayout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escDeletePaperLayout(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escDeletePaperLayout ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSetPaperLayoutPSASBSCSDSESFSGSH": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger p = [args[@"p"] integerValue];
          // jsonable arg
          NSInteger sa = [args[@"sa"] integerValue];
          // jsonable arg
          NSInteger sb = [args[@"sb"] integerValue];
          // jsonable arg
          NSInteger sc = [args[@"sc"] integerValue];
          // jsonable arg
          NSInteger sd = [args[@"sd"] integerValue];
          // jsonable arg
          NSInteger se = [args[@"se"] integerValue];
          // jsonable arg
          NSInteger sf = [args[@"sf"] integerValue];
          // jsonable arg
          NSInteger sg = [args[@"sg"] integerValue];
          // jsonable arg
          NSInteger sh = [args[@"sh"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSetPaperLayoutP(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSetPaperLayoutP : p SA: sa SB: sb SC: sc SD: sd SE: se SF: sf SG: sg SH: sh];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escTransmitPaperLayoutInformation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger n = [args[@"n"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escTransmitPaperLayoutInformation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escTransmitPaperLayoutInformation : n];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSaveSettingValuesFromWorkAreaIntoStorageAreaFNM": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger fn = [args[@"fn"] integerValue];
          // jsonable arg
          NSInteger m = [args[@"m"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSaveSettingValuesFromWorkAreaIntoStorageAreaFN(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSaveSettingValuesFromWorkAreaIntoStorageAreaFN : fn M: m];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escLoadSettingValuesStoredInStorageAreaToWorkAreaFNM": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger fn = [args[@"fn"] integerValue];
          // jsonable arg
          NSInteger m = [args[@"m"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escLoadSettingValuesStoredInStorageAreaToWorkAreaFN(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escLoadSettingValuesStoredInStorageAreaToWorkAreaFN : fn M: m];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFNM": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger fn = [args[@"fn"] integerValue];
          // jsonable arg
          NSInteger m = [args[@"m"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFN(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFN : fn M: m];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSelectCounterPrintModeWithDigitsJustification": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger digits = [args[@"digits"] integerValue];
          // jsonable arg
          NSInteger justification = [args[@"justification"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSelectCounterPrintModeWithDigits(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSelectCounterPrintModeWithDigits : digits Justification: justification];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSelectCounterModeA_MinimumValueMaximumValueCountingModeRepetition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger minimum_value = [args[@"minimum_value"] integerValue];
          // jsonable arg
          NSInteger maximum_value = [args[@"maximum_value"] integerValue];
          // jsonable arg
          NSInteger counting_mode = [args[@"counting_mode"] integerValue];
          // jsonable arg
          NSInteger repetition = [args[@"repetition"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSelectCounterModeA_MinimumValue(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSelectCounterModeA_MinimumValue : minimum_value MaximumValue: maximum_value CountingMode: counting_mode Repetition: repetition];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSetCounter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger counter = [args[@"counter"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSetCounter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSetCounter : counter];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escSelectCounterModeB_SASBSNSRSC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger sa = [args[@"sa"] integerValue];
          // jsonable arg
          NSInteger sb = [args[@"sb"] integerValue];
          // jsonable arg
          NSInteger sn = [args[@"sn"] integerValue];
          // jsonable arg
          NSInteger sr = [args[@"sr"] integerValue];
          // jsonable arg
          NSInteger sc = [args[@"sc"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escSelectCounterModeB_SA(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escSelectCounterModeB_SA : sa SB: sb SN: sn SR: sr SC: sc];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escPrintCounter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escPrintCounter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escPrintCounter ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escPaperLayoutSettingPSMSASBSCSDSESF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger p = [args[@"p"] integerValue];
          // jsonable arg
          NSInteger sm = [args[@"sm"] integerValue];
          // jsonable arg
          NSInteger sa = [args[@"sa"] integerValue];
          // jsonable arg
          NSInteger sb = [args[@"sb"] integerValue];
          // jsonable arg
          NSInteger sc = [args[@"sc"] integerValue];
          // jsonable arg
          NSInteger sd = [args[@"sd"] integerValue];
          // jsonable arg
          NSInteger se = [args[@"se"] integerValue];
          // jsonable arg
          NSInteger sf = [args[@"sf"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escPaperLayoutSettingP(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escPaperLayoutSettingP : p SM: sm SA: sa SB: sb SC: sc SD: sd SE: se SF: sf];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escPaperLayoutInformationTransmissionN": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger n = [args[@"n"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escPaperLayoutInformationTransmissionN(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escPaperLayoutInformationTransmissionN : n];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escTransmitPositioningInformationM": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger m = [args[@"m"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escTransmitPositioningInformationM(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escTransmitPositioningInformationM : m];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escFeedPaperToLabelPeelingPositionM": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger m = [args[@"m"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escFeedPaperToLabelPeelingPositionM(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escFeedPaperToLabelPeelingPositionM : m];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escFeedPaperToCuttingPositionM": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger m = [args[@"m"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escFeedPaperToCuttingPositionM(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escFeedPaperToCuttingPositionM : m];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escFeedPaperToPrintStartingPositionM": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger m = [args[@"m"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escFeedPaperToPrintStartingPositionM(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escFeedPaperToPrintStartingPositionM : m];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandESC::escPaperLayoutErrorSpecialMarginSettingPSN": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger p = [args[@"p"] integerValue];
          // jsonable arg
          NSInteger sn = [args[@"sn"] integerValue];
      
          // ref
          PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandESC@%@::escPaperLayoutErrorSpecialMarginSettingP(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref escPaperLayoutErrorSpecialMarginSettingP : p SN: sn];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::selfTest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::selfTest(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref selfTest ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::appendCommand": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* cmd = (NSString*) args[@"cmd"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::appendCommand(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendCommand : cmd];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setPrintAreaSizeWithWidthHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger label_width = [args[@"label_width"] integerValue];
          // jsonable arg
          NSInteger label_height = [args[@"label_height"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setPrintAreaSizeWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrintAreaSizeWithWidth : label_width height: label_height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setGapWithDistanceOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setGapWithDistance(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setGapWithDistance : distance offset: offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setBlineWithHeightOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setBlineWithHeight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBlineWithHeight : height offset: offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setOffsetWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setOffsetWithDistance(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setOffsetWithDistance : distance];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::feedToNextLabel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::feedToNextLabel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref feedToNextLabel ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setFeedLength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger length = [args[@"length"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setFeedLength(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setFeedLength : length];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setPrintSpeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTTSCPrintSpeed speed = (PTTSCPrintSpeed) [args[@"speed"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setPrintSpeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrintSpeed : speed];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setPrintDensity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTTSCPrintDensity density = (PTTSCPrintDensity) [args[@"density"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setPrintDensity(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrintDensity : density];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setPrintDirectionMirror": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTTSCPrintDirection direction = (PTTSCPrintDirection) [args[@"direction"] integerValue];
          // enum arg
          PTTSCPrintStyle mirror = (PTTSCPrintStyle) [args[@"mirror"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setPrintDirection(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrintDirection : direction mirror: mirror];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setReferenceXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setReferenceXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setReferenceXPos : x_pos yPos: y_pos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setCodePage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTTSCCharacterStyle codepage = (PTTSCCharacterStyle) [args[@"codepage"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setCodePage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCodePage : codepage];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setCLS": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setCLS(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCLS ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setBackFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setBackFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBackFeed : distance];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setBackUP": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setBackUP(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBackUP : distance];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setHome": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setHome(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setHome ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::printWithSetsCopies": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger sets = [args[@"sets"] integerValue];
          // jsonable arg
          NSInteger copies = [args[@"copies"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::printWithSets(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printWithSets : sets copies: copies];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setSoundWithLevelInterval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger level = [args[@"level"] integerValue];
          // jsonable arg
          NSInteger interval = [args[@"interval"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setSoundWithLevel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setSoundWithLevel : level interval: interval];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setCut": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setCut(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCut ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setLimitFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger max_len = [args[@"max_len"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setLimitFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setLimitFeed : max_len];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setFontBold": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL bold = [args[@"bold"] boolValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setFontBold(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setFontBold : bold];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setPrinterStateAutomaticBackWithStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL status = [args[@"status"] boolValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setPrinterStateAutomaticBackWithStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrinterStateAutomaticBackWithStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::getPrinterStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::getPrinterStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref getPrinterStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::drawBarWithXPosYPoswidthheight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::drawBarWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref drawBarWithXPos : x_pos yPos: y_pos width: width height: height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::printBarcodeWithXPosYPostypeheightreadablerotationratiocontext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // enum arg
          PTTSCBarcodeStyle type = (PTTSCBarcodeStyle) [args[@"type"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // enum arg
          PTTSCBarcodeReadbleStyle readable = (PTTSCBarcodeReadbleStyle) [args[@"readable"] integerValue];
          // enum arg
          PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
          // enum arg
          PTTSCBarcodeRatio ratio = (PTTSCBarcodeRatio) [args[@"ratio"] integerValue];
          // jsonable arg
          NSString* context = (NSString*) args[@"context"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::printBarcodeWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printBarcodeWithXPos : x_pos yPos: y_pos type: type height: height readable: readable rotation: rotation ratio: ratio context: context];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::printQRcodeWithXPosYPoseccLevelcellWidthmoderotationmodelmaskcontext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // enum arg
          PTTSCQRcodeEcclevel ecc_level = (PTTSCQRcodeEcclevel) [args[@"ecc_level"] integerValue];
          // enum arg
          PTTSCQRcodeWidth width = (PTTSCQRcodeWidth) [args[@"width"] integerValue];
          // enum arg
          PTTSCQRCodeMode mode = (PTTSCQRCodeMode) [args[@"mode"] integerValue];
          // enum arg
          PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
          // enum arg
          PTTSCQRCodeModel model = (PTTSCQRCodeModel) [args[@"model"] integerValue];
          // enum arg
          PTTSCQRcodeMask mask = (PTTSCQRcodeMask) [args[@"mask"] integerValue];
          // jsonable arg
          NSString* context = (NSString*) args[@"context"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::printQRcodeWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printQRcodeWithXPos : x_pos yPos: y_pos eccLevel: ecc_level cellWidth: width mode: mode rotation: rotation model: model mask: mask context: context];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::appendTextWithXposYPosfontrotationxMultiplicationyMultiplicationtext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // enum arg
          PTTSCTextFontStyle font = (PTTSCTextFontStyle) [args[@"font"] integerValue];
          // enum arg
          PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
          // jsonable arg
          NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
          // jsonable arg
          NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::appendTextWithXpos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendTextWithXpos : x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication text: text];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // enum arg
          PTTSCTextFontStyle font = (PTTSCTextFontStyle) [args[@"font"] integerValue];
          // enum arg
          PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
          // jsonable arg
          NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
          // jsonable arg
          NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
          // jsonable arg
          NSInteger safeHeight = [args[@"safeHeight"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger lineSpacing = [args[@"lineSpacing"] integerValue];
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::printAutoTextWithXpos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSInteger result = [ref printAutoTextWithXpos: x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication safeHeight: safeHeight width: width lineSpacing: lineSpacing text: text];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::appendTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationtext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // enum arg
          PTTSCTextVectorFontStyle font = (PTTSCTextVectorFontStyle) [args[@"font"] integerValue];
          // enum arg
          PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
          // jsonable arg
          NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
          // jsonable arg
          NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::appendTextForVectorWithXpos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref appendTextForVectorWithXpos : x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication text: text];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // enum arg
          PTTSCTextVectorFontStyle font = (PTTSCTextVectorFontStyle) [args[@"font"] integerValue];
          // enum arg
          PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
          // jsonable arg
          NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
          // jsonable arg
          NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
          // jsonable arg
          NSInteger safeHeight = [args[@"safeHeight"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger lineSpacing = [args[@"lineSpacing"] integerValue];
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::printAutoTextForVectorWithXpos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSInteger result = [ref printAutoTextForVectorWithXpos: x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication safeHeight: safeHeight width: width lineSpacing: lineSpacing text: text];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setReverseWithXStartYStartxWidthyHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger x_width = [args[@"x_width"] integerValue];
          // jsonable arg
          NSInteger y_height = [args[@"y_height"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setReverseWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setReverseWithXStart : x_start yStart: y_start xWidth: x_width yHeight: y_height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setBoxWithXStartYStartxEndyEndthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger x_end = [args[@"x_end"] integerValue];
          // jsonable arg
          NSInteger y_end = [args[@"y_end"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setBoxWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setBoxWithXStart : x_start yStart: y_start xEnd: x_end yEnd: y_end thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setEllipseWithXStartYStartwidthheightthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setEllipseWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setEllipseWithXStart : x_start yStart: y_start width: width height: height thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setCircleWithXStartYStartdiameterthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger diameter = [args[@"diameter"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setCircleWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCircleWithXStart : x_start yStart: y_start diameter: diameter thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setEraseWithXStartYStartxWidthyHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_start = [args[@"x_start"] integerValue];
          // jsonable arg
          NSInteger y_start = [args[@"y_start"] integerValue];
          // jsonable arg
          NSInteger x_width = [args[@"x_width"] integerValue];
          // jsonable arg
          NSInteger y_height = [args[@"y_height"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setEraseWithXStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setEraseWithXStart : x_start yStart: y_start xWidth: x_width yHeight: y_height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::drawDmatrixBarcodeWithXPosYPoswidthheightxmrowcolexpression": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // enum arg
          PTTSCDMATRIXSize xm = (PTTSCDMATRIXSize) [args[@"xm"] integerValue];
          // jsonable arg
          NSInteger row = [args[@"row"] integerValue];
          // jsonable arg
          NSInteger col = [args[@"col"] integerValue];
          // jsonable arg
          NSString* expresssion = (NSString*) args[@"expresssion"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::drawDmatrixBarcodeWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref drawDmatrixBarcodeWithXPos : x_pos yPos: y_pos width: width height: height xm: xm row: row col: col expression: expresssion];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::printPDF417WithXPosYPoswidthheightrotateoptionexpression": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // enum arg
          PTTSCStyleRotation rotate = (PTTSCStyleRotation) [args[@"rotate"] integerValue];
          // jsonable arg
          NSString* option = (NSString*) args[@"option"];
          // jsonable arg
          NSString* expression = (NSString*) args[@"expression"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::printPDF417WithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printPDF417WithXPos : x_pos yPos: y_pos width: width height: height rotate: rotate option: option expression: expression];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // enum arg
          PTTSCStyleRotation rotate = (PTTSCStyleRotation) [args[@"rotate"] integerValue];
          // jsonable arg
          NSInteger size = [args[@"size"] integerValue];
          // jsonable arg
          NSInteger ecp = [args[@"ecp"] integerValue];
          // jsonable arg
          NSInteger flg = [args[@"flg"] integerValue];
          // jsonable arg
          NSInteger menu = [args[@"menu"] integerValue];
          // jsonable arg
          NSInteger multi = [args[@"multi"] integerValue];
          // jsonable arg
          NSInteger rev = [args[@"rev"] integerValue];
          // jsonable arg
          NSString* aztecData = (NSString*) args[@"aztecData"];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::printAztecWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printAztecWithXPos : xPos yPos: yPos rotate: rotate size: size ecp: ecp flg: flg menu: menu multi: multi rev: rev aztecData: aztecData];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::printBMPWithFilenameXPosyPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* filename = (NSString*) args[@"filename"];
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::printBMPWithFilename(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printBMPWithFilename : filename xPos: x_pos yPos: y_pos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::printPCXWithFilenameXPosyPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* filename = (NSString*) args[@"filename"];
          // jsonable arg
          NSInteger x_pos = [args[@"x_pos"] integerValue];
          // jsonable arg
          NSInteger y_pos = [args[@"y_pos"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::printPCXWithFilename(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printPCXWithFilename : filename xPos: x_pos yPos: y_pos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setCounterWithCounterNumberStep": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger counterNumber = [args[@"counterNumber"] integerValue];
          // jsonable arg
          NSInteger step = [args[@"step"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setCounterWithCounterNumber(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCounterWithCounterNumber : counterNumber step: step];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setCutterStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL status = [args[@"status"] boolValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setCutterStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCutterStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandTSPL::setCutterPieces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger pieces = [args[@"pieces"] integerValue];
      
          // ref
          PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandTSPL@%@::setCutterPieces(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCutterPieces : pieces];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTLabel::dataWithSourceFile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* filePath = (NSString*) args[@"filePath"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTLabel@%@::dataWithSourceFile(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSData* result = [ref dataWithSourceFile: filePath];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"PTLabel::dataWithTSPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTLabel@%@::dataWithTSPL(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSData* result = [ref dataWithTSPL];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"PTEncode::encodeDataWithString": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* string = (NSString*) args[@"string"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTEncode::encodeDataWithString(暂未实现参数打印)");
          }
      
          // invoke native method
          NSData* result = [PTEncode encodeDataWithString: string];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"PTEncode::decodeStringWithData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTEncode::decodeStringWithData(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [PTEncode decodeStringWithData: data];
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::printSelfInspectionPage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::printSelfInspectionPage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printSelfInspectionPage ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclGetPaperStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclGetPaperStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclGetPaperStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclTurnOnPrintStatusCallBack": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL flag = [args[@"flag"] boolValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclTurnOnPrintStatusCallBack(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclTurnOnPrintStatusCallBack : flag];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclUnderlineON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclUnderlineON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclUnderlineON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclUnderlineOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclUnderlineOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclUnderlineOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclUtilitySession": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclUtilitySession(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclUtilitySession ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclLineMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclLineMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLineMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclReWindOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclReWindOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclReWindOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclGetPrinterSN": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclGetPrinterSN(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclGetPrinterSN ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclPaperTypeWithType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger type = [args[@"type"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclPaperTypeWithType(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPaperTypeWithType : type];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::setPrinterPaperTypeFor4Inch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger type = [args[@"type"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::setPrinterPaperTypeFor4Inch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrinterPaperTypeFor4Inch : type];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclLabelWithOffsetHResvResheightquantity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
          // jsonable arg
          NSInteger hRes = [args[@"hRes"] integerValue];
          // jsonable arg
          NSInteger vRes = [args[@"vRes"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger quantity = [args[@"quantity"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclLabelWithOffset(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLabelWithOffset : offset hRes: hRes vRes: vRes height: height quantity: quantity];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclBarcodeQRcodeWithXPosYPosmodelunitWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger model = [args[@"model"] integerValue];
          // jsonable arg
          NSInteger unitWidth = [args[@"unitWidth"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclBarcodeQRcodeWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeQRcodeWithXPos : xPos yPos: yPos model: model unitWidth: unitWidth];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclBarcodeQRcodeVerticalWithXPosYPosmodelunitWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger model = [args[@"model"] integerValue];
          // jsonable arg
          NSInteger unitWidth = [args[@"unitWidth"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclBarcodeQRcodeVerticalWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeQRcodeVerticalWithXPos : xPos yPos: yPos model: model unitWidth: unitWidth];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclBarcodeQRcodeEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclBarcodeQRcodeEnd(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeQRcodeEnd ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclBarcodeTextWithFontFontSizeoffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger font = [args[@"font"] integerValue];
          // jsonable arg
          NSInteger fontSize = [args[@"fontSize"] integerValue];
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclBarcodeTextWithFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeTextWithFont : font fontSize: fontSize offset: offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclBarcodeTextWithTrueTypeFontXScaleyScaleoffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger font = [args[@"font"] integerValue];
          // jsonable arg
          NSInteger xScale = [args[@"xScale"] integerValue];
          // jsonable arg
          NSInteger yScale = [args[@"yScale"] integerValue];
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclBarcodeTextWithTrueTypeFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeTextWithTrueTypeFont : font xScale: xScale yScale: yScale offset: offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclBarcodeTextOff": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclBarcodeTextOff(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeTextOff ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclBoxWithXPosYPosxEndyEndthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger xEnd = [args[@"xEnd"] integerValue];
          // jsonable arg
          NSInteger yEnd = [args[@"yEnd"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclBoxWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBoxWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclCenterWithRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger range = [args[@"range"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclCenterWithRange(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclCenterWithRange : range];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclCenter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclCenter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclCenter ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclConcatStartWithXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclConcatStartWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclConcatStartWithXPos : xPos yPos: yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclConcatVerticalStartWithXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclConcatVerticalStartWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclConcatVerticalStartWithXPos : xPos yPos: yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclConcatEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclConcatEnd(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclConcatEnd ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclPrint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclPrint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPrint ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclPoPrint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclPoPrint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPoPrint ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclInverseLineWithXPosYPosxEndyEndthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger xEnd = [args[@"xEnd"] integerValue];
          // jsonable arg
          NSInteger yEnd = [args[@"yEnd"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclInverseLineWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclInverseLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclLeft__int": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger range = [args[@"range"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclLeft(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLeft : range];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclLeft": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclLeft(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLeft ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclLineWithXPosYPosxEndyEndthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger xEnd = [args[@"xEnd"] integerValue];
          // jsonable arg
          NSInteger yEnd = [args[@"yEnd"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclLineWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclMultiLineStartWithLineHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger lineHeight = [args[@"lineHeight"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclMultiLineStartWithLineHeight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclMultiLineStartWithLineHeight : lineHeight];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclMultiLineEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclMultiLineEnd(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclMultiLineEnd ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclPageWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger pageWidth = [args[@"pageWidth"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclPageWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPageWidth : pageWidth];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclRight__int": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger right = [args[@"right"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclRight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclRight : right];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclRight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclRight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclRight ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclRotate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger degrees = [args[@"degrees"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclRotate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclRotate : degrees];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetBold": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger boldness = [args[@"boldness"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetBold(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetBold : boldness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetSpacing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger spacing = [args[@"spacing"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetSpacing(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetSpacing : spacing];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetMagWithWidthHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetMagWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetMagWithWidth : width height: height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclTempMoveUp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger right = [args[@"right"] integerValue];
          // jsonable arg
          NSInteger up = [args[@"up"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclTempMove(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclTempMove : right up: up];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetBackground": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger value = [args[@"value"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetBackground(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetBackground : value];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclLineMargin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclLineMargin(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLineMargin : offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetPositionWithXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetPositionWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetPositionWithXPos : xPos yPos: yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetPositionWithXPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetPositionWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetPositionWithXPos : xPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetPositionWithYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetPositionWithYPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetPositionWithYPos : yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclLineFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclLineFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLineFeed ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclContrast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger value = [args[@"value"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclContrast(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclContrast : value];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger amount = [args[@"amount"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclFeed : amount];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclLabel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclLabel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLabel ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclMulti": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger quantity = [args[@"quantity"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclMulti(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclMulti : quantity];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclNoPace": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclNoPace(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclNoPace ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclPace": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclPace(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPace ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclPostFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger amount = [args[@"amount"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclPostFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPostFeed : amount];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclPreFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger amount = [args[@"amount"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclPreFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPreFeed : amount];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclReverse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger amount = [args[@"amount"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclReverse(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclReverse : amount];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetFeedSkip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger length = [args[@"length"] integerValue];
          // jsonable arg
          NSInteger skip = [args[@"skip"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetFeed : length skip: skip];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSpeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger value = [args[@"value"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSpeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSpeed : value];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclForm": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclForm(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclForm ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclTone": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger value = [args[@"value"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclTone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclTone : value];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclTurn": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger degrees = [args[@"degrees"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclTurn(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclTurn : degrees];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclFormFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclFormFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclFormFeed ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclAbort": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclAbort(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclAbort ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclOnFeed_Feed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclOnFeed_Feed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclOnFeed_Feed ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclOnFeed_Reprint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclOnFeed_Reprint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclOnFeed_Reprint ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclOnFeed_Ignore": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclOnFeed_Ignore(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclOnFeed_Ignore ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclReRun": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclReRun(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclReRun ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclWait": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclWait(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclWait : duration];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetLabelPositionWithXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetLabelPositionWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetLabelPositionWithXPos : xPos yPos: yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetLabelPositionWithXPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetLabelPositionWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetLabelPositionWithXPos : xPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetLabelPositionWithYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetLabelPositionWithYPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetLabelPositionWithYPos : yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetArabicTransformFunction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger function = [args[@"function"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetArabicTransformFunction(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetArabicTransformFunction : function];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclGetArabicTransformStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclGetArabicTransformStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclGetArabicTransformStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetThaiTransformStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetThaiTransformStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetThaiTransformStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclSetVietnameseTransformFunction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger function = [args[@"function"] integerValue];
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclSetVietnameseTransformFunction(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetVietnameseTransformFunction : function];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandCPCL::cpclGetVietnameseTransformStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTOldCommandCPCL@%@::cpclGetVietnameseTransformStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclGetVietnameseTransformStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::printSelfTest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::printSelfTest(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printSelfTest ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::zplLineFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::zplLineFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref zplLineFeed ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::A_SetFontFieldOrientationcharacterHeightwidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
          // enum arg
          PTZplOrientation fieldOrientation = (PTZplOrientation) [args[@"fieldOrientation"] integerValue];
          // jsonable arg
          NSInteger characterHeight = [args[@"characterHeight"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::A_SetFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref A_SetFont : fontName fieldOrientation: fieldOrientation characterHeight: characterHeight width: width];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::A_SetFontFieldOrientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
          // enum arg
          PTZplOrientation fieldOrientation = (PTZplOrientation) [args[@"fieldOrientation"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::A_SetFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref A_SetFont : fontName fieldOrientation: fieldOrientation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::A_SetFontCharacterHeightwidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
          // jsonable arg
          NSInteger characterHeight = [args[@"characterHeight"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::A_SetFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref A_SetFont : fontName characterHeight: characterHeight width: width];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::A_SetFont": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::A_SetFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref A_SetFont : fontName];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::A_SetFontWithOrientationHeightwidthlocationfontNameextension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // enum arg
          PTZplFileLocation location = (PTZplFileLocation) [args[@"location"] integerValue];
          // jsonable arg
          NSString* fontName = (NSString*) args[@"fontName"];
          // jsonable arg
          NSString* extension = (NSString*) args[@"extension"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::A_SetFontWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref A_SetFontWithOrientation : orientation height: height width: width location: location fontName: fontName extension: extension];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::A_SetFontWithOrientationHeightwidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::A_SetFontWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref A_SetFontWithOrientation : orientation height: height width: width];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::B0_BacodeAztecWithOrientationMagnificationFactorisContainECICerrorAndSymbolisMenuSymbolappendSymbolNumberappendOptionalID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger magnificationFactor = [args[@"magnificationFactor"] integerValue];
          // enum arg
          PTZplBool isContainECIC = (PTZplBool) [args[@"isContainECIC"] integerValue];
          // jsonable arg
          NSInteger errorAndSymbol = [args[@"errorAndSymbol"] integerValue];
          // enum arg
          PTZplBool isMenuSymbol = (PTZplBool) [args[@"isMenuSymbol"] integerValue];
          // jsonable arg
          NSInteger appendSymbolNumber = [args[@"appendSymbolNumber"] integerValue];
          // jsonable arg
          NSString* appendOptionalID = (NSString*) args[@"appendOptionalID"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::B0_BacodeAztecWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref B0_BacodeAztecWithOrientation : orientation magnificationFactor: magnificationFactor isContainECIC: isContainECIC errorAndSymbol: errorAndSymbol isMenuSymbol: isMenuSymbol appendSymbolNumber: appendSymbolNumber appendOptionalID: appendOptionalID];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::B1_BacodeCode11WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // enum arg
          PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::B1_BacodeCode11WithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref B1_BacodeCode11WithOrientation : orientation checkDigit: checkDigit barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::B3_BacodeCode39WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // enum arg
          PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::B3_BacodeCode39WithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref B3_BacodeCode39WithOrientation : orientation checkDigit: checkDigit barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::B4_BacodePlanetCodeWithOrientationBarcodeHeightinterpretationLineStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTCode49InterpretationLineStyle style = (PTCode49InterpretationLineStyle) [args[@"style"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::B4_BacodePlanetCodeWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref B4_BacodePlanetCodeWithOrientation : orientation barcodeHeight: barcodeHeight interpretationLineStyle: style];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::B7_BarcodePDF417CodeWithOrientationBarcodeHeightsecurityLevelcolumnsrowstruncation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // jsonable arg
          NSInteger securityLevel = [args[@"securityLevel"] integerValue];
          // jsonable arg
          NSInteger columns = [args[@"columns"] integerValue];
          // jsonable arg
          NSInteger rows = [args[@"rows"] integerValue];
          // enum arg
          PTZplBool truncation = (PTZplBool) [args[@"truncation"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::B7_BarcodePDF417CodeWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref B7_BarcodePDF417CodeWithOrientation : orientation barcodeHeight: barcodeHeight securityLevel: securityLevel columns: columns rows: rows truncation: truncation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::B8_BacodeEAN8WithOrientationBarcodeHeightinterpretationLineaboveCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::B8_BacodeEAN8WithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref B8_BacodeEAN8WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::B9_BarcodeUPCE8CodeWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
          // enum arg
          PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::B9_BarcodeUPCE8CodeWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref B9_BarcodeUPCE8CodeWithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode checkDigit: checkDigit];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BA_BarcodeCode93WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
          // enum arg
          PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BA_BarcodeCode93WithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BA_BarcodeCode93WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode checkDigit: checkDigit];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BB_BarcodeCodeBlockWithOrientationBarcodeHeightsecurityLevelperRowCharactersrowsmode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool securityLevel = (PTZplBool) [args[@"securityLevel"] integerValue];
          // jsonable arg
          NSInteger perRowCharacters = [args[@"perRowCharacters"] integerValue];
          // jsonable arg
          NSInteger rows = [args[@"rows"] integerValue];
          // enum arg
          PTZplCodeBlockBarCodeMode mode = (PTZplCodeBlockBarCodeMode) [args[@"mode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BB_BarcodeCodeBlockWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BB_BarcodeCodeBlockWithOrientation : orientation barcodeHeight: barcodeHeight securityLevel: securityLevel perRowCharacters: perRowCharacters rows: rows mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BC_BarcodeCode128WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigitmode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
          // enum arg
          PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
          // enum arg
          PTZplCode128Mode mode = (PTZplCode128Mode) [args[@"mode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BC_BarcodeCode128WithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BC_BarcodeCode128WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode checkDigit: checkDigit mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BD_BarcodeUPSMaxicodeWithModeSymbolNumbertotalSymbolNumbers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplUpsMaxiCodeMode mode = (PTZplUpsMaxiCodeMode) [args[@"mode"] integerValue];
          // jsonable arg
          NSInteger symbolNumber = [args[@"symbolNumber"] integerValue];
          // jsonable arg
          NSInteger totalSymbolNumbers = [args[@"totalSymbolNumbers"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BD_BarcodeUPSMaxicodeWithMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BD_BarcodeUPSMaxicodeWithMode : mode symbolNumber: symbolNumber totalSymbolNumbers: totalSymbolNumbers];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BE_BacodeEAN13WithOrientationBarcodeHeightinterpretationLineaboveCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BE_BacodeEAN13WithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BE_BacodeEAN13WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BF_BarcodeMicroPDF417WithOrientationBarcodeHeightmode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // jsonable arg
          NSInteger mode = [args[@"mode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BF_BarcodeMicroPDF417WithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BF_BarcodeMicroPDF417WithOrientation : orientation barcodeHeight: barcodeHeight mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BI_BacodeIndustrial2of5WithOrientationBarcodeHeightinterpretationLineaboveCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BI_BacodeIndustrial2of5WithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BI_BacodeIndustrial2of5WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BJ_BacodeStandard2of5WithOrientationBarcodeHeightinterpretationLineaboveCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BJ_BacodeStandard2of5WithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BJ_BacodeStandard2of5WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BK_BarcodeANSICodebarWithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCodestartCharacterstopCharacter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // enum arg
          PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
          // jsonable arg
          NSString* startCharacter = (NSString*) args[@"startCharacter"];
          // jsonable arg
          NSString* stopCharacter = (NSString*) args[@"stopCharacter"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BK_BarcodeANSICodebarWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BK_BarcodeANSICodebarWithOrientation : orientation checkDigit: checkDigit barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode startCharacter: startCharacter stopCharacter: stopCharacter];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BL_BacodeLOGMARSWithOrientationBarcodeHeightprintInterpretationLineAboveCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool isPrint = (PTZplBool) [args[@"isPrint"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BL_BacodeLOGMARSWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BL_BacodeLOGMARSWithOrientation : orientation barcodeHeight: barcodeHeight printInterpretationLineAboveCode: isPrint];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BQ_BarcodeQRcodeWithOrientationModelmagnificationreliabilityLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // enum arg
          PTZplQrModel model = (PTZplQrModel) [args[@"model"] integerValue];
          // jsonable arg
          NSInteger magnification = [args[@"magnification"] integerValue];
          // enum arg
          PTZplQrReliabilityLevel reliabilityLevel = (PTZplQrReliabilityLevel) [args[@"reliabilityLevel"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BQ_BarcodeQRcodeWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BQ_BarcodeQRcodeWithOrientation : orientation model: model magnification: magnification reliabilityLevel: reliabilityLevel];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BS_BacodeUPCEANExtensionsWithOrientationBarcodeHeightinterpretationLineaboveCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BS_BacodeUPCEANExtensionsWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BS_BacodeUPCEANExtensionsWithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BU_BarcodeUPCAWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
          // enum arg
          PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
          // enum arg
          PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
          // enum arg
          PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BU_BarcodeUPCAWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BU_BarcodeUPCAWithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode checkDigit: checkDigit];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BY_BarcodeFieldDefaultWithModuleWidthRatiobarcodeHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger moduleWidth = [args[@"moduleWidth"] integerValue];
          // jsonable arg
          float ratio = [args[@"ratio"] floatValue];
          // jsonable arg
          NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BY_BarcodeFieldDefaultWithModuleWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BY_BarcodeFieldDefaultWithModuleWidth : moduleWidth ratio: ratio barcodeHeight: barcodeHeight];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::BY_BarcodeFieldDefaultWithModuleWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger moduleWidth = [args[@"moduleWidth"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::BY_BarcodeFieldDefaultWithModuleWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref BY_BarcodeFieldDefaultWithModuleWidth : moduleWidth];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::CC_ChangeCaret": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* character = (NSString*) args[@"character"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::CC_ChangeCaret(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref CC_ChangeCaret : character];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::CD_ChangeDelimiter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* charactor = (NSString*) args[@"charactor"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::CD_ChangeDelimiter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref CD_ChangeDelimiter : charactor];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::CF_ChangeDefaultFontWidthheight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFont font = (PTZplFont) [args[@"font"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::CF_ChangeDefaultFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref CF_ChangeDefaultFont : font width: width height: height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::CF_ChangeDefaultFont": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFont font = (PTZplFont) [args[@"font"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::CF_ChangeDefaultFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref CF_ChangeDefaultFont : font];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::CF_ChangeDefaultFontWidthHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::CF_ChangeDefaultFontWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref CF_ChangeDefaultFontWidth : width height: height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::CI_ChangeInternationalCharacterSet": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* characterSet = (NSString*) args[@"characterSet"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::CI_ChangeInternationalCharacterSet(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref CI_ChangeInternationalCharacterSet : characterSet];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::CT_ChangeTilde": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* character = (NSString*) args[@"character"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::CT_ChangeTilde(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref CT_ChangeTilde : character];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::CV_CodeValidation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplBool codeValidation = (PTZplBool) [args[@"codeValidation"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::CV_CodeValidation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref CV_CodeValidation : codeValidation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::CW_FontIdentifierFontDriveLocationdownloadedFontextension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
          // enum arg
          PTZplFileLocation fontDriveLocation = (PTZplFileLocation) [args[@"fontDriveLocation"] integerValue];
          // jsonable arg
          NSString* downloadedFont = (NSString*) args[@"downloadedFont"];
          // jsonable arg
          NSString* extension = (NSString*) args[@"extension"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::CW_FontIdentifier(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref CW_FontIdentifier : fontName fontDriveLocation: fontDriveLocation downloadedFont: downloadedFont extension: extension];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::DF_DownloadFormatWithDeviceImageNameextension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFileLocation deviceToStoreImage = (PTZplFileLocation) [args[@"deviceToStoreImage"] integerValue];
          // jsonable arg
          NSString* imageName = (NSString*) args[@"imageName"];
          // jsonable arg
          NSString* extension = (NSString*) args[@"extension"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::DF_DownloadFormatWithDevice(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref DF_DownloadFormatWithDevice : deviceToStoreImage imageName: imageName extension: extension];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::EG_EraseDownloadGraphics": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::EG_EraseDownloadGraphics(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref EG_EraseDownloadGraphics ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FD_FieldData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* fieldData = (NSString*) args[@"fieldData"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FD_FieldData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FD_FieldData : fieldData];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FH_FieldHexadecimalIndicator": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* hexadecimalIndicator = (NSString*) args[@"hexadecimalIndicator"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FH_FieldHexadecimalIndicator(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FH_FieldHexadecimalIndicator : hexadecimalIndicator];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FH_FieldHexadecimal": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FH_FieldHexadecimal(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FH_FieldHexadecimal ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FN_FieldNumberOptional": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger fieldNumber = [args[@"fieldNumber"] integerValue];
          // jsonable arg
          NSString* optional = (NSString*) args[@"optional"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FN_FieldNumber(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FN_FieldNumber : fieldNumber optional: optional];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FN_FieldNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger fieldNumber = [args[@"fieldNumber"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FN_FieldNumber(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FN_FieldNumber : fieldNumber];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FO_FieldOriginWithXAxisYAxisjustification": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger XAxis = [args[@"XAxis"] integerValue];
          // jsonable arg
          NSInteger YAxis = [args[@"YAxis"] integerValue];
          // enum arg
          PTZplJustification justification = (PTZplJustification) [args[@"justification"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FO_FieldOriginWithXAxis(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FO_FieldOriginWithXAxis : XAxis YAxis: YAxis justification: justification];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FO_FieldOriginWithXAxisYAxis": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger XAxis = [args[@"XAxis"] integerValue];
          // jsonable arg
          NSInteger YAxis = [args[@"YAxis"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FO_FieldOriginWithXAxis(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FO_FieldOriginWithXAxis : XAxis YAxis: YAxis];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FP_FieldParameterWithDirectionCharacterGap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplTextPrintDirection direction = (PTZplTextPrintDirection) [args[@"direction"] integerValue];
          // jsonable arg
          NSInteger characterGap = [args[@"characterGap"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FP_FieldParameterWithDirection(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FP_FieldParameterWithDirection : direction characterGap: characterGap];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FR_FieldReversePrint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FR_FieldReversePrint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FR_FieldReversePrint ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FS_FieldSeparator": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FS_FieldSeparator(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FS_FieldSeparator ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FT_FieldTypesetWithXAxisYAxisjustification": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger XAxis = [args[@"XAxis"] integerValue];
          // jsonable arg
          NSInteger YAxis = [args[@"YAxis"] integerValue];
          // enum arg
          PTZplJustification justification = (PTZplJustification) [args[@"justification"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FT_FieldTypesetWithXAxis(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FT_FieldTypesetWithXAxis : XAxis YAxis: YAxis justification: justification];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FT_FieldTypesetWithXAxisYAxis": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger XAxis = [args[@"XAxis"] integerValue];
          // jsonable arg
          NSInteger YAxis = [args[@"YAxis"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FT_FieldTypesetWithXAxis(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FT_FieldTypesetWithXAxis : XAxis YAxis: YAxis];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FT_FieldTypeset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FT_FieldTypeset(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FT_FieldTypeset ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FV_FieldVariable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* variableFieldData = (NSString*) args[@"variableFieldData"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FV_FieldVariable(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FV_FieldVariable : variableFieldData];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FW_FieldOrientationJustification": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation fieldOrientation = (PTZplOrientation) [args[@"fieldOrientation"] integerValue];
          // enum arg
          PTZplJustification justification = (PTZplJustification) [args[@"justification"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FW_FieldOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FW_FieldOrientation : fieldOrientation justification: justification];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FW_FieldOrientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation fieldOrientation = (PTZplOrientation) [args[@"fieldOrientation"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FW_FieldOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FW_FieldOrientation : fieldOrientation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::FX_FieldComment": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* comment = (NSString*) args[@"comment"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::FX_FieldComment(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref FX_FieldComment : comment];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::GB_GraphicBoxWithWidthHeightthicknesslineColorcornorRoundingDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
          // enum arg
          PTZplColor lineColor = (PTZplColor) [args[@"lineColor"] integerValue];
          // jsonable arg
          NSInteger cornorRoundingDegree = [args[@"cornorRoundingDegree"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::GB_GraphicBoxWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref GB_GraphicBoxWithWidth : width height: height thickness: thickness lineColor: lineColor cornorRoundingDegree: cornorRoundingDegree];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::GB_GraphicBoxWithWidthHeightthicknesscornorRoundingDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
          // jsonable arg
          NSInteger cornorRoundingDegree = [args[@"cornorRoundingDegree"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::GB_GraphicBoxWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref GB_GraphicBoxWithWidth : width height: height thickness: thickness cornorRoundingDegree: cornorRoundingDegree];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::GB_GraphicBoxWithWidthHeightthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::GB_GraphicBoxWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref GB_GraphicBoxWithWidth : width height: height thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::GC_GraphicCircleWithDiameterThicknesslineColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger diameter = [args[@"diameter"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
          // enum arg
          PTZplColor lineColor = (PTZplColor) [args[@"lineColor"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::GC_GraphicCircleWithDiameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref GC_GraphicCircleWithDiameter : diameter thickness: thickness lineColor: lineColor];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::GD_GraphicDiagonalLineWithWidthHeightthicknesslineColororientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
          // enum arg
          PTZplColor lineColor = (PTZplColor) [args[@"lineColor"] integerValue];
          // enum arg
          PTZplDiagonalOrientation orientation = (PTZplDiagonalOrientation) [args[@"orientation"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::GD_GraphicDiagonalLineWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref GD_GraphicDiagonalLineWithWidth : width height: height thickness: thickness lineColor: lineColor orientation: orientation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::GE_GraphicEllipseWithWidthHeightthicknesslineColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
          // enum arg
          PTZplColor lineColor = (PTZplColor) [args[@"lineColor"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::GE_GraphicEllipseWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref GE_GraphicEllipseWithWidth : width height: height thickness: thickness lineColor: lineColor];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::GS_GraphicSymbolWithOrientationHeightwidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::GS_GraphicSymbolWithOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref GS_GraphicSymbolWithOrientation : orientation height: height width: width];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::GS_GraphicSymbol": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::GS_GraphicSymbol(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref GS_GraphicSymbol ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::ID_ImageDeleteWithObjectLocationObjectNameextension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFileLocation objectLocation = (PTZplFileLocation) [args[@"objectLocation"] integerValue];
          // jsonable arg
          NSString* objectName = (NSString*) args[@"objectName"];
          // jsonable arg
          NSString* extension = (NSString*) args[@"extension"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::ID_ImageDeleteWithObjectLocation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref ID_ImageDeleteWithObjectLocation : objectLocation objectName: objectName extension: extension];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::IL_ImageLoadWithObjectLocationObjectNameextension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFileLocation objectLocation = (PTZplFileLocation) [args[@"objectLocation"] integerValue];
          // jsonable arg
          NSString* objectName = (NSString*) args[@"objectName"];
          // jsonable arg
          NSString* extension = (NSString*) args[@"extension"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::IL_ImageLoadWithObjectLocation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref IL_ImageLoadWithObjectLocation : objectLocation objectName: objectName extension: extension];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::IM_ImageMoveWithObjectLocationObjectNameextension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFileLocation objectLocation = (PTZplFileLocation) [args[@"objectLocation"] integerValue];
          // jsonable arg
          NSString* objectName = (NSString*) args[@"objectName"];
          // jsonable arg
          NSString* extension = (NSString*) args[@"extension"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::IM_ImageMoveWithObjectLocation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref IM_ImageMoveWithObjectLocation : objectLocation objectName: objectName extension: extension];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::IS_ImageSaveWithObjectLocationObjectNameextensionprintAfterSorting": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFileLocation objectLocation = (PTZplFileLocation) [args[@"objectLocation"] integerValue];
          // jsonable arg
          NSString* objectName = (NSString*) args[@"objectName"];
          // jsonable arg
          NSString* extension = (NSString*) args[@"extension"];
          // enum arg
          PTZplBool printAfterSorting = (PTZplBool) [args[@"printAfterSorting"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::IS_ImageSaveWithObjectLocation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref IS_ImageSaveWithObjectLocation : objectLocation objectName: objectName extension: extension printAfterSorting: printAfterSorting];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::JA_CancelAll": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::JA_CancelAll(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref JA_CancelAll ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::JD_EnableCommunicationsDiagnostics": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::JD_EnableCommunicationsDiagnostics(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref JD_EnableCommunicationsDiagnostics ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::JE_DisableDiagnostics": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::JE_DisableDiagnostics(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref JE_DisableDiagnostics ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::JZ_SetReprintAfterError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplBool enable = (PTZplBool) [args[@"enable"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::JZ_SetReprintAfterError(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref JZ_SetReprintAfterError : enable];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::LH_LabelHomeWithXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger XPos = [args[@"XPos"] integerValue];
          // jsonable arg
          NSInteger YPos = [args[@"YPos"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::LH_LabelHomeWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref LH_LabelHomeWithXPos : XPos YPos: YPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::LL_LabelLength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger length = [args[@"length"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::LL_LabelLength(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref LL_LabelLength : length];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::LR_LabelReversePrint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplBool reverse = (PTZplBool) [args[@"reverse"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::LR_LabelReversePrint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref LR_LabelReversePrint : reverse];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::LS_LabelShift": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger shift = [args[@"shift"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::LS_LabelShift(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref LS_LabelShift : shift];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::LT_LabelTop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger top = [args[@"top"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::LT_LabelTop(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref LT_LabelTop : top];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::MC_MapClear": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplBool clear = (PTZplBool) [args[@"clear"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::MC_MapClear(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref MC_MapClear : clear];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::ML_MaximumLabelLength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger length = [args[@"length"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::ML_MaximumLabelLength(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref ML_MaximumLabelLength : length];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::MT_SetMediaType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplMediaType type = (PTZplMediaType) [args[@"type"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::MT_SetMediaType(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref MT_SetMediaType : type];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::ND_SetNetworkSettingWithIPSubnetMask": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* ipAddress = (NSString*) args[@"ipAddress"];
          // jsonable arg
          NSString* subnetMask = (NSString*) args[@"subnetMask"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::ND_SetNetworkSettingWithIP(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref ND_SetNetworkSettingWithIP : ipAddress SubnetMask: subnetMask];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::PM_PrintLabelMirrorImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplBool mirror = (PTZplBool) [args[@"mirror"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::PM_PrintLabelMirrorImage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref PM_PrintLabelMirrorImage : mirror];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::PO_PrintOrientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplPrintOrientation orientation = (PTZplPrintOrientation) [args[@"orientation"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::PO_PrintOrientation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref PO_PrintOrientation : orientation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::PP_ProgrammablePause": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::PP_ProgrammablePause(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref PP_ProgrammablePause ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::PQ_PrintQuantityPauseValuereplicateValueoverrided": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger quantity = [args[@"quantity"] integerValue];
          // jsonable arg
          NSInteger pauseValue = [args[@"pauseValue"] integerValue];
          // jsonable arg
          NSInteger replicateValue = [args[@"replicateValue"] integerValue];
          // enum arg
          PTZplBool overrided = (PTZplBool) [args[@"overrided"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::PQ_PrintQuantity(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref PQ_PrintQuantity : quantity pauseValue: pauseValue replicateValue: replicateValue overrided: overrided];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::PQ_PrintQuantity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger quantity = [args[@"quantity"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::PQ_PrintQuantity(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref PQ_PrintQuantity : quantity];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::PW_PrintWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger width = [args[@"width"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::PW_PrintWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref PW_PrintWidth : width];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::SC_SetSerialCommunicationsWithBaudRateDataBitsParityStopBitsProtocolMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* baudRate = (NSString*) args[@"baudRate"];
          // jsonable arg
          NSString* dataBits = (NSString*) args[@"dataBits"];
          // jsonable arg
          NSString* parity = (NSString*) args[@"parity"];
          // jsonable arg
          NSString* stopBits = (NSString*) args[@"stopBits"];
          // jsonable arg
          NSString* protocolMode = (NSString*) args[@"protocolMode"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::SC_SetSerialCommunicationsWithBaudRate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref SC_SetSerialCommunicationsWithBaudRate : baudRate DataBits: dataBits Parity: parity StopBits: stopBits ProtocolMode: protocolMode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::SD_SetDarkness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger darkness = [args[@"darkness"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::SD_SetDarkness(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref SD_SetDarkness : darkness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::SF_SerializationFieldWithMaskStringIncrementString": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* maskString = (NSString*) args[@"maskString"];
          // jsonable arg
          NSString* incrementString = (NSString*) args[@"incrementString"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::SF_SerializationFieldWithMaskString(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref SF_SerializationFieldWithMaskString : maskString incrementString: incrementString];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::TO_TransferObjectWithSourceDeviceSourceObjectNamesourceExtensiondestinationDevicedestinationObjectNamedestinationExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFileLocation sourceDevice = (PTZplFileLocation) [args[@"sourceDevice"] integerValue];
          // jsonable arg
          NSString* sourceObjectName = (NSString*) args[@"sourceObjectName"];
          // jsonable arg
          NSString* sourceExtension = (NSString*) args[@"sourceExtension"];
          // enum arg
          PTZplFileLocation destinationDevice = (PTZplFileLocation) [args[@"destinationDevice"] integerValue];
          // jsonable arg
          NSString* destinationObjectName = (NSString*) args[@"destinationObjectName"];
          // jsonable arg
          NSString* destinationExtension = (NSString*) args[@"destinationExtension"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::TO_TransferObjectWithSourceDevice(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref TO_TransferObjectWithSourceDevice : sourceDevice sourceObjectName: sourceObjectName sourceExtension: sourceExtension destinationDevice: destinationDevice destinationObjectName: destinationObjectName destinationExtension: destinationExtension];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::XA_FormatStart": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::XA_FormatStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref XA_FormatStart ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::XF_RecallFormatWithSourceDeviceImageNameextension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFileLocation sourceDevice = (PTZplFileLocation) [args[@"sourceDevice"] integerValue];
          // jsonable arg
          NSString* imageName = (NSString*) args[@"imageName"];
          // jsonable arg
          NSString* extension = (NSString*) args[@"extension"];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::XF_RecallFormatWithSourceDevice(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref XF_RecallFormatWithSourceDevice : sourceDevice imageName: imageName extension: extension];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::XG_RecallGraphicWithSourceDeviceImageNameextensionXAxisMagnificationYAxisMagnification": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTZplFileLocation sourceDevice = (PTZplFileLocation) [args[@"sourceDevice"] integerValue];
          // jsonable arg
          NSString* imageName = (NSString*) args[@"imageName"];
          // jsonable arg
          NSString* extension = (NSString*) args[@"extension"];
          // jsonable arg
          NSInteger XAxisMagnification = [args[@"XAxisMagnification"] integerValue];
          // jsonable arg
          NSInteger YAxisMagnification = [args[@"YAxisMagnification"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::XG_RecallGraphicWithSourceDevice(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref XG_RecallGraphicWithSourceDevice : sourceDevice imageName: imageName extension: extension XAxisMagnification: XAxisMagnification YAxisMagnification: YAxisMagnification];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::XZ_FormatEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::XZ_FormatEnd(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref XZ_FormatEnd ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandZPL::PR_SetSpeedSlewSpeedbackfeedSpeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger speed = [args[@"speed"] integerValue];
          // jsonable arg
          NSInteger slewSpeed = [args[@"slewSpeed"] integerValue];
          // jsonable arg
          NSInteger backfeedSpeed = [args[@"backfeedSpeed"] integerValue];
      
          // ref
          PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandZPL@%@::PR_SetSpeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref PR_SetSpeed : speed slewSpeed: slewSpeed backfeedSpeed: backfeedSpeed];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::printSelfInspectionPage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::printSelfInspectionPage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref printSelfInspectionPage ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclGetPaperStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclGetPaperStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclGetPaperStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::getFirmwareVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::getFirmwareVersion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref getFirmwareVersion ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclTurnOnPrintStatusCallBack": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL flag = [args[@"flag"] boolValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclTurnOnPrintStatusCallBack(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclTurnOnPrintStatusCallBack : flag];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclUnderlineON": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclUnderlineON(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclUnderlineON ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclUnderlineOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclUnderlineOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclUnderlineOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclGetPrinterSN": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclGetPrinterSN(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclGetPrinterSN ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclPaperTypeWithType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTCPCLPaperType type = (PTCPCLPaperType) [args[@"type"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclPaperTypeWithType(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPaperTypeWithType : type];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::setPrinterPaperTypeFor4Inch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTCPCLNewPaperType type = (PTCPCLNewPaperType) [args[@"type"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::setPrinterPaperTypeFor4Inch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setPrinterPaperTypeFor4Inch : type];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclLabelWithOffsetHResvResheightquantity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
          // enum arg
          PTCPCLLabelResolution hRes = (PTCPCLLabelResolution) [args[@"hRes"] integerValue];
          // enum arg
          PTCPCLLabelResolution vRes = (PTCPCLLabelResolution) [args[@"vRes"] integerValue];
          // jsonable arg
          NSInteger height = [args[@"height"] integerValue];
          // jsonable arg
          NSInteger quantity = [args[@"quantity"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclLabelWithOffset(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLabelWithOffset : offset hRes: hRes vRes: vRes height: height quantity: quantity];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclPageWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger pageWidth = [args[@"pageWidth"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclPageWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPageWidth : pageWidth];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclBarcodeTextWithFontFontSizeoffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTCPCLTextFontName font = (PTCPCLTextFontName) [args[@"font"] integerValue];
          // jsonable arg
          NSInteger fontSize = [args[@"fontSize"] integerValue];
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclBarcodeTextWithFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeTextWithFont : font fontSize: fontSize offset: offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclBarcodeTextWithTrueTypeFontXScaleyScaleoffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTCPCLTextFontName font = (PTCPCLTextFontName) [args[@"font"] integerValue];
          // jsonable arg
          NSInteger xScale = [args[@"xScale"] integerValue];
          // jsonable arg
          NSInteger yScale = [args[@"yScale"] integerValue];
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclBarcodeTextWithTrueTypeFont(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeTextWithTrueTypeFont : font xScale: xScale yScale: yScale offset: offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclBarcodeTextOff": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclBarcodeTextOff(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeTextOff ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclBarcodeQRcodeWithXPosYPosmodelunitWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // enum arg
          PTCPCLQRCodeModel model = (PTCPCLQRCodeModel) [args[@"model"] integerValue];
          // enum arg
          PTCPCLQRCodeUnitWidth unitWidth = (PTCPCLQRCodeUnitWidth) [args[@"unitWidth"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclBarcodeQRcodeWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeQRcodeWithXPos : xPos yPos: yPos model: model unitWidth: unitWidth];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclBarcodeVerticalQRcodeWithXPosYPosmodelunitWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // enum arg
          PTCPCLQRCodeModel model = (PTCPCLQRCodeModel) [args[@"model"] integerValue];
          // enum arg
          PTCPCLQRCodeUnitWidth unitWidth = (PTCPCLQRCodeUnitWidth) [args[@"unitWidth"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclBarcodeVerticalQRcodeWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeVerticalQRcodeWithXPos : xPos yPos: yPos model: model unitWidth: unitWidth];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclBarcodeQRcodeEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclBarcodeQRcodeEnd(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBarcodeQRcodeEnd ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclPDF417CodeWithDirectionXPosyPosxDotyDotcolumnsrowseccbinaryModel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTCPCLPDF417Direction directon = (PTCPCLPDF417Direction) [args[@"directon"] integerValue];
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger xDot = [args[@"xDot"] integerValue];
          // jsonable arg
          NSInteger yDot = [args[@"yDot"] integerValue];
          // jsonable arg
          NSInteger columns = [args[@"columns"] integerValue];
          // jsonable arg
          NSInteger rows = [args[@"rows"] integerValue];
          // enum arg
          PTCPCLPDF417ErrLevel ecc = (PTCPCLPDF417ErrLevel) [args[@"ecc"] integerValue];
          // enum arg
          PTCPCLPDF417Binary binaryModel = (PTCPCLPDF417Binary) [args[@"binaryModel"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclPDF417CodeWithDirection(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPDF417CodeWithDirection : directon xPos: xPos yPos: yPos xDot: xDot yDot: yDot columns: columns rows: rows ecc: ecc binaryModel: binaryModel];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclPDF417codeEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclPDF417codeEnd(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPDF417codeEnd ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclBoxWithXPosYPosxEndyEndthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger xEnd = [args[@"xEnd"] integerValue];
          // jsonable arg
          NSInteger yEnd = [args[@"yEnd"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclBoxWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclBoxWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclLineWithXPosYPosxEndyEndthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger xEnd = [args[@"xEnd"] integerValue];
          // jsonable arg
          NSInteger yEnd = [args[@"yEnd"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclLineWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclInverseLineWithXPosYPosxEndyEndthickness": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
          // jsonable arg
          NSInteger xEnd = [args[@"xEnd"] integerValue];
          // jsonable arg
          NSInteger yEnd = [args[@"yEnd"] integerValue];
          // jsonable arg
          NSInteger thickness = [args[@"thickness"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclInverseLineWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclInverseLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclConcatStartWithXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclConcatStartWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclConcatStartWithXPos : xPos yPos: yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclConcatVerticalStartWithXPosYPos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger xPos = [args[@"xPos"] integerValue];
          // jsonable arg
          NSInteger yPos = [args[@"yPos"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclConcatVerticalStartWithXPos(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclConcatVerticalStartWithXPos : xPos yPos: yPos];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclConcatEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclConcatEnd(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclConcatEnd ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclPrint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclPrint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPrint ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclPoPrint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclPoPrint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPoPrint ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclCenterWithRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger range = [args[@"range"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclCenterWithRange(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclCenterWithRange : range];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclCenter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclCenter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclCenter ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclLeft__int": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger range = [args[@"range"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclLeft(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLeft : range];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclLeft": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclLeft(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLeft ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclRight__int": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger right = [args[@"right"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclRight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclRight : right];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclRight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclRight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclRight ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclMoveWithRightUp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger right = [args[@"right"] integerValue];
          // jsonable arg
          NSInteger up = [args[@"up"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclMoveWithRight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclMoveWithRight : right up: up];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclTempMoveWithRightUp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger right = [args[@"right"] integerValue];
          // jsonable arg
          NSInteger up = [args[@"up"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclTempMoveWithRight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclTempMoveWithRight : right up: up];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclMultiLineStartWithLineHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger lineHeight = [args[@"lineHeight"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclMultiLineStartWithLineHeight(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclMultiLineStartWithLineHeight : lineHeight];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclMultiLineEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclMultiLineEnd(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclMultiLineEnd ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclRotate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger degrees = [args[@"degrees"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclRotate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclRotate : degrees];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclSetBold": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTCPCLTextBold boldness = (PTCPCLTextBold) [args[@"boldness"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclSetBold(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetBold : boldness];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclSetSpacing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger spacing = [args[@"spacing"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclSetSpacing(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetSpacing : spacing];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclSetMagWithWidthHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          PTCPCLFontScale width = (PTCPCLFontScale) [args[@"width"] integerValue];
          // enum arg
          PTCPCLFontScale height = (PTCPCLFontScale) [args[@"height"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclSetMagWithWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetMagWithWidth : width height: height];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclSetBackgroundBlacknessValue": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger value = [args[@"value"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclSetBackgroundBlacknessValue(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetBackgroundBlacknessValue : value];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclUtilitySession": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclUtilitySession(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclUtilitySession ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclLineMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclLineMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLineMode ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclReWindOFF": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclReWindOFF(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclReWindOFF ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclLineMargin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclLineMargin(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLineMargin : offset];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclLineFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclLineFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclLineFeed ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger amount = [args[@"amount"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclFeed : amount];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclPostFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger amount = [args[@"amount"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclPostFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPostFeed : amount];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclPreFeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger amount = [args[@"amount"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclPreFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclPreFeed : amount];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclReverse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger amount = [args[@"amount"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclReverse(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclReverse : amount];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclSetFeedSkip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger length = [args[@"length"] integerValue];
          // jsonable arg
          NSInteger skip = [args[@"skip"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclSetFeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetFeed : length skip: skip];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclSpeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger value = [args[@"value"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclSpeed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSpeed : value];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclForm": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclForm(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclForm ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclTone": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger value = [args[@"value"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclTone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclTone : value];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclTurn": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger degrees = [args[@"degrees"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclTurn(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclTurn : degrees];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclOnFeed_Feed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclOnFeed_Feed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclOnFeed_Feed ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclOnFeed_Reprint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclOnFeed_Reprint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclOnFeed_Reprint ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclOnFeed_Ignore": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclOnFeed_Ignore(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclOnFeed_Ignore ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclSetArabicTransformFunction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger function = [args[@"function"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclSetArabicTransformFunction(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetArabicTransformFunction : function];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclGetArabicTransformStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclGetArabicTransformStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclGetArabicTransformStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclSetThaiTransformStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclSetThaiTransformStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetThaiTransformStatus : status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclSetVietnameseTransformFunction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger function = [args[@"function"] integerValue];
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclSetVietnameseTransformFunction(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclSetVietnameseTransformFunction : function];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTCommandCPCL::cpclGetVietnameseTransformStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTCommandCPCL@%@::cpclGetVietnameseTransformStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cpclGetVietnameseTransformStatus ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::share": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher::share(暂未实现参数打印)");
          }
      
          // invoke native method
          PTDispatcher* result = [PTDispatcher share];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::sendData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::sendData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref sendData : data];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::pauseWriteData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::pauseWriteData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref pauseWriteData ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::resumeWriteData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::resumeWriteData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref resumeWriteData ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::scanBluetooth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::scanBluetooth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref scanBluetooth ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::stopScanBluetooth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::stopScanBluetooth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stopScanBluetooth ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::scanWiFi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::scanWiFi(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref scanWiFi : ^(PTPrinter* printerArray) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::scanWiFi::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argprinterArray = @(printerArray.hash);
              HEAP[argprinterArray] = printerArray;
      
              [channel invokeMethod:@"Callback::PTPrinterMutableArrayBlock::PTPrinterMutableArrayBlock" arguments:@{@"printerArray": argprinterArray}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenFindAllBluetooth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenFindAllBluetooth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenFindAllBluetooth : ^(PTPrinter* printerArray) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenFindAllBluetooth::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argprinterArray = @(printerArray.hash);
              HEAP[argprinterArray] = printerArray;
      
              [channel invokeMethod:@"Callback::PTPrinterMutableArrayBlock::PTPrinterMutableArrayBlock" arguments:@{@"printerArray": argprinterArray}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenFindBluetooth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenFindBluetooth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenFindBluetooth : ^(PTPrinter* printer) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenFindBluetooth::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argprinter = @(printer.hash);
              HEAP[argprinter] = printer;
      
              [channel invokeMethod:@"Callback::PTPrinterParameterBlock::PTPrinterParameterBlock" arguments:@{@"printer": argprinter}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenReadRSSI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenReadRSSI(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenReadRSSI : ^(NSNumber* number) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenReadRSSI::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argnumber = @(number.hash);
              HEAP[argnumber] = number;
      
              [channel invokeMethod:@"Callback::PTNumberParameterBlock::PTNumberParameterBlock" arguments:@{@"number": argnumber}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::connectPrinter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          PTPrinter* printer = (PTPrinter*) HEAP[@([args[@"printer"] integerValue])];
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::connectPrinter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref connectPrinter : printer];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::unconnectPrinter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          PTPrinter* printer = (PTPrinter*) HEAP[@([args[@"printer"] integerValue])];
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::unconnectPrinter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref unconnectPrinter : printer];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenConnectSuccess": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenConnectSuccess(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenConnectSuccess : ^() {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenConnectSuccess::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
      
      
              [channel invokeMethod:@"Callback::PTEmptyParameterBlock::PTEmptyParameterBlock" arguments:@{}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenConnectFailureWithErrorBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenConnectFailureWithErrorBlock(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenConnectFailureWithErrorBlock : ^(PTConnectError error) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenConnectFailureWithErrorBlock::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // enum callback arg
              NSNumber* argerror = @((NSInteger) error);
      
              [channel invokeMethod:@"Callback::PTBluetoothConnectFailBlock::PTBluetoothConnectFailBlock" arguments:@{@"error": argerror}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenUnconnect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenUnconnect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenUnconnect : ^(NSNumber* number, BOOL isActive) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenUnconnect::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argnumber = @(number.hash);
              HEAP[argnumber] = number;
              // primitive callback arg
              NSNumber* argisActive = @(isActive);
      
              [channel invokeMethod:@"Callback::PTUnconnectBlock::PTUnconnectBlock" arguments:@{@"number": argnumber, @"isActive": argisActive}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenSendSuccess": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenSendSuccess(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenSendSuccess : ^(int64_t dataCount, double time) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenSendSuccess::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // primitive callback arg
              NSNumber* argdataCount = @(dataCount);
              // primitive callback arg
              NSNumber* argtime = @(time);
      
              [channel invokeMethod:@"Callback::PTSendSuccessParameterBlock::PTSendSuccessParameterBlock" arguments:@{@"dataCount": argdataCount, @"time": argtime}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenSendFailure": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenSendFailure(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenSendFailure : ^() {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenSendFailure::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
      
      
              [channel invokeMethod:@"Callback::PTEmptyParameterBlock::PTEmptyParameterBlock" arguments:@{}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenSendProgressUpdate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenSendProgressUpdate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenSendProgressUpdate : ^(NSNumber* number) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenSendProgressUpdate::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argnumber = @(number.hash);
              HEAP[argnumber] = number;
      
              [channel invokeMethod:@"Callback::PTNumberParameterBlock::PTNumberParameterBlock" arguments:@{@"number": argnumber}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenReceiveData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenReceiveData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenReceiveData : ^(NSData* data) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenReceiveData::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argdata = @(data.hash);
              HEAP[argdata] = data;
      
              [channel invokeMethod:@"Callback::PTDataParameterBlock::PTDataParameterBlock" arguments:@{@"data": argdata}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenUpdatePrintState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenUpdatePrintState(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenUpdatePrintState : ^(PTPrintState state) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenUpdatePrintState::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // enum callback arg
              NSNumber* argstate = @((NSInteger) state);
      
              [channel invokeMethod:@"Callback::PTPrintStateBlock::PTPrintStateBlock" arguments:@{@"state": argstate}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::getBluetoothStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::getBluetoothStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref getBluetoothStatus];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::setupBleConnectTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          double timeout = [args[@"timeout"] doubleValue];
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::setupBleConnectTimeout(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setupBleConnectTimeout : timeout];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::setupPeripheralFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::setupPeripheralFilter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setupPeripheralFilter : ^(CBPeripheral* peripheral, NSString*,id* advertisementData, NSNumber* RSSI) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::setupPeripheralFilter::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
      
      
              [channel invokeMethod:@"Callback::PTPeripheralFilterBlock::PTPeripheralFilterBlock"
                          arguments:@{}
                             result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
      
              // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
              // 相关issue https://github.com/flutter/flutter/issues/28310
              NSLog(@"暂不支持有返回值的回调方法");
      
              ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
      
              ////////////////////////////////////////////////////////////////////////////////
      
              return NO;
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::unregisterDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::unregisterDelegate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref unregisterDelegate ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::whenUpgradeFirmwareStateBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::whenUpgradeFirmwareStateBlock(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref whenUpgradeFirmwareStateBlock : ^(PTUpgradeFirmwareState state) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"PTDispatcher::whenUpgradeFirmwareStateBlock::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // enum callback arg
              NSNumber* argstate = @((NSInteger) state);
      
              [channel invokeMethod:@"Callback::PTUpgradeFirmwareStateBlock::PTUpgradeFirmwareStateBlock" arguments:@{@"state": argstate}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"PTDispatcher::SDKBuildTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: PTDispatcher@%@::SDKBuildTime(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref SDKBuildTime];
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"PTOldCommandTSPL::selfTest_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref selfTest ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::appendCommand_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* cmd = (NSString*) args[@"cmd"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendCommand : cmd];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::printAndLineFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAndLineFeed ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setFontBold_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger bold = [args[@"bold"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setFontBold : bold];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setPrinterStateAutomaticBackWithStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger status = [args[@"status"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrinterStateAutomaticBackWithStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setPrintAreaSizeWithWidthHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger label_width = [args[@"label_width"] integerValue];
              // jsonable arg
              NSInteger label_height = [args[@"label_height"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrintAreaSizeWithWidth : label_width Height: label_height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::getPrinterStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref getPrinterStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setGapWithDistanceOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setGapWithDistance : distance Offset: offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setBlineWithHeightOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBlineWithHeight : height Offset: offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setOffsetWithDistance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setOffsetWithDistance : distance];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::printWithSetsCopies_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger sets = [args[@"sets"] integerValue];
              // jsonable arg
              NSInteger copies = [args[@"copies"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printWithSets : sets Copies: copies];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger font = [args[@"font"] integerValue];
              // jsonable arg
              NSInteger rotation = [args[@"rotation"] integerValue];
              // jsonable arg
              NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
              // jsonable arg
              NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
              // jsonable arg
              NSInteger safeHeight = [args[@"safeHeight"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger lineSpacing = [args[@"lineSpacing"] integerValue];
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSInteger result = [ref printAutoTextForVectorWithXpos: x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication safeHeight: safeHeight width: width lineSpacing: lineSpacing text: text];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger font = [args[@"font"] integerValue];
              // jsonable arg
              NSInteger rotation = [args[@"rotation"] integerValue];
              // jsonable arg
              NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
              // jsonable arg
              NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
              // jsonable arg
              NSInteger safeHeight = [args[@"safeHeight"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger lineSpacing = [args[@"lineSpacing"] integerValue];
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSInteger result = [ref printAutoTextWithXpos: x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication safeHeight: safeHeight width: width lineSpacing: lineSpacing text: text];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::appendTextWithXposYposFontRotationXmultiplicationYmultiplicationText_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger font = [args[@"font"] integerValue];
              // jsonable arg
              NSInteger rotation = [args[@"rotation"] integerValue];
              // jsonable arg
              NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
              // jsonable arg
              NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendTextWithXpos : x_pos Ypos: y_pos Font: font Rotation: rotation Xmultiplication: x_multiplication Ymultiplication: y_multiplication Text: text];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCLS_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCLS ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::printBarcodeWithXPosYPosTypeHeightHumanReadableRotationNarrowWideCodeNumber_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSString* type = (NSString*) args[@"type"];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger readable = [args[@"readable"] integerValue];
              // jsonable arg
              NSInteger rotation = [args[@"rotation"] integerValue];
              // jsonable arg
              NSInteger narrow = [args[@"narrow"] integerValue];
              // jsonable arg
              NSInteger wide = [args[@"wide"] integerValue];
              // jsonable arg
              NSString* codeNumber = (NSString*) args[@"codeNumber"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printBarcodeWithXPos : x_pos YPos: y_pos Type: type Height: height HumanReadable: readable Rotation: rotation Narrow: narrow Wide: wide CodeNumber: codeNumber];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::printQRcodeWithXPosYPosEccLevelCellWidthModeRotationModelMaskText_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSString* ecc_level = (NSString*) args[@"ecc_level"];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSString* mode = (NSString*) args[@"mode"];
              // jsonable arg
              NSInteger rotation = [args[@"rotation"] integerValue];
              // jsonable arg
              NSString* model = (NSString*) args[@"model"];
              // jsonable arg
              NSString* mask = (NSString*) args[@"mask"];
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printQRcodeWithXPos : x_pos YPos: y_pos EccLevel: ecc_level CellWidth: width Mode: mode Rotation: rotation Model: model Mask: mask Text: text];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setSpeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger speed = [args[@"speed"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setSpeed : speed];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setDensity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger density = [args[@"density"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setDensity : density];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setDirectionMirror_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger direction = [args[@"direction"] integerValue];
              // jsonable arg
              NSInteger mirror = [args[@"mirror"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setDirection : direction Mirror: mirror];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setReferenceXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setReferenceXPos : x_pos YPos: y_pos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCodePage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* codepage = (NSString*) args[@"codepage"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCodePage : codepage];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setFeedLength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger feedLength = [args[@"feedLength"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setFeedLength : feedLength];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setFormFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setFormFeed ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setBackFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBackFeed : distance];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setBackUP_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBackUP : distance];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setHome_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setHome ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setSoundWithLevelInterval_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger level = [args[@"level"] integerValue];
              // jsonable arg
              NSInteger interval = [args[@"interval"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setSoundWithLevel : level Interval: interval];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCut_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCut ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setLimitFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger max_len = [args[@"max_len"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setLimitFeed : max_len];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::printBarWithXPosYPosWidthHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printBarWithXPos : x_pos YPos: y_pos Width: width Height: height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setBoxWithXStartYStartXEndYEndThickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger x_end = [args[@"x_end"] integerValue];
              // jsonable arg
              NSInteger y_end = [args[@"y_end"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBoxWithXStart : x_start YStart: y_start XEnd: x_end YEnd: y_end Thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setEllipseWithXStartYStartWidthHeightThickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setEllipseWithXStart : x_start YStart: y_start Width: width Height: height Thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCircleWithXStartYStartDiameterThickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger diameter = [args[@"diameter"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCircleWithXStart : x_start YStart: y_start Diameter: diameter Thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setEraseWithXStartYStartXWidthYHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger x_width = [args[@"x_width"] integerValue];
              // jsonable arg
              NSInteger y_height = [args[@"y_height"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setEraseWithXStart : x_start YStart: y_start XWidth: x_width YHeight: y_height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setDmatrixWithExpressionXPosYPosWidthHeightXMRowCol_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* expression = (NSString*) args[@"expression"];
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSString* xm = (NSString*) args[@"xm"];
              // jsonable arg
              NSString* row = (NSString*) args[@"row"];
              // jsonable arg
              NSString* col = (NSString*) args[@"col"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setDmatrixWithExpression : expression XPos: x_pos YPos: y_pos Width: width Height: height XM: xm Row: row Col: col];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setMaxicodeXPosYPosModeClassCountryPostLM_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger iClass = [args[@"iClass"] integerValue];
              // jsonable arg
              NSInteger country = [args[@"country"] integerValue];
              // jsonable arg
              NSString* post = (NSString*) args[@"post"];
              // jsonable arg
              NSInteger lm = [args[@"lm"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setMaxicode : text XPos: x_pos YPos: y_pos Mode: mode Class: iClass Country: country Post: post LM: lm];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::printPDF417WithXPosYPosWidthHeightRotateOptionExpression_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger rotate = [args[@"rotate"] integerValue];
              // jsonable arg
              NSString* option = (NSString*) args[@"option"];
              // jsonable arg
              NSString* expression = (NSString*) args[@"expression"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printPDF417WithXPos : x_pos YPos: y_pos Width: width Height: height Rotate: rotate Option: option Expression: expression];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger XPos = [args[@"XPos"] integerValue];
              // jsonable arg
              NSInteger YPos = [args[@"YPos"] integerValue];
              // jsonable arg
              NSInteger rotate = [args[@"rotate"] integerValue];
              // jsonable arg
              NSInteger size = [args[@"size"] integerValue];
              // jsonable arg
              NSInteger ecp = [args[@"ecp"] integerValue];
              // jsonable arg
              NSInteger flg = [args[@"flg"] integerValue];
              // jsonable arg
              NSInteger menu = [args[@"menu"] integerValue];
              // jsonable arg
              NSInteger multi = [args[@"multi"] integerValue];
              // jsonable arg
              NSInteger rev = [args[@"rev"] integerValue];
              // jsonable arg
              NSString* aztecData = (NSString*) args[@"aztecData"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAztecWithXPos : XPos YPos: YPos rotate: rotate size: size ecp: ecp flg: flg menu: menu multi: multi rev: rev aztecData: aztecData];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::putBMPWithFilenameXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* filename = (NSString*) args[@"filename"];
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref putBMPWithFilename : filename XPos: x_pos YPos: y_pos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::putPCXWithFilenameXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* filename = (NSString*) args[@"filename"];
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref putPCXWithFilename : filename XPos: x_pos YPos: y_pos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setReverseWithXStartYStartXWidthYHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger x_width = [args[@"x_width"] integerValue];
              // jsonable arg
              NSInteger y_height = [args[@"y_height"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setReverseWithXStart : x_start YStart: y_start XWidth: x_width YHeight: y_height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCounterWithCounterNumberStep_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger counterNumber = [args[@"counterNumber"] integerValue];
              // jsonable arg
              NSInteger step = [args[@"step"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCounterWithCounterNumber : counterNumber Step: step];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCutterON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCutterON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCutterOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCutterOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCutterBATCH_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCutterBATCH ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCutterPieces_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger pieces = [args[@"pieces"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCutterPieces : pieces];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setPARTIAL_CUTTER_OFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPARTIAL_CUTTER_OFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setPARTIAL_CUTTER_BATCH_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPARTIAL_CUTTER_BATCH ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setPARTIAL_CUTTER_Pieces_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger pieces = [args[@"pieces"] integerValue];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPARTIAL_CUTTER_Pieces : pieces];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setBackOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBackOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setBackON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBackON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setKEYSwitch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger index = [args[@"index"] integerValue];
              // jsonable arg
              NSString* switcher = (NSString*) args[@"switcher"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setKEY : index Switch: switcher];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setLEDSwitch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger index = [args[@"index"] integerValue];
              // jsonable arg
              NSString* switcher = (NSString*) args[@"switcher"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setLED : index Switch: switcher];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setPeelON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPeelON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setPeelOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPeelOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setTearON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setTearON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setTearOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setTearOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setStriperON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setStriperON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setStriperOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setStriperOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setHeadON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setHeadON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setHeadOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setHeadOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setRibbonON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setRibbonON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setRibbonOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setRibbonOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setCOM1WithBaudParityDataStop_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger baud = [args[@"baud"] integerValue];
              // jsonable arg
              NSString* parity = (NSString*) args[@"parity"];
              // jsonable arg
              NSString* data = (NSString*) args[@"data"];
              // jsonable arg
              NSString* stop = (NSString*) args[@"stop"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCOM1WithBaud : baud Parity: parity Data: data Stop: stop];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setPrintKey_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* key = (NSString*) args[@"key"];
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrintKey : key];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setReprintON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setReprintON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandTSPL::setReprintOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandTSPL* ref = (PTOldCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setReprintOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCommon::getPrinterModelName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCommon* ref = (PTCommandCommon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref getPrinterModelName ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::initCommandQueue_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref initCommandQueue ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendCommandData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* cmdData = (NSData*) HEAP[@([args[@"cmdData"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendCommandData : cmdData];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::getCommandData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSData* result = [ref getCommandData];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendText_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendText : text];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::getPrinterStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref getPrinterStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printSelfTest_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printSelfTest ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printAndLineFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAndLineFeed ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printAndReturnStandardMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAndReturnStandardMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printAndCarriageReturn_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAndCarriageReturn ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printDataInPageMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printDataInPageMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::turnOnPrintStatusCallBack_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL flag = [args[@"flag"] boolValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref turnOnPrintStatusCallBack : flag];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printAndFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAndFeed : offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printAndReverseFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAndReverseFeed : offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printAndFeedLines_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger lines = [args[@"lines"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAndFeedLines : lines];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printAndReverseFeedLines_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger lines = [args[@"lines"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAndReverseFeedLines : lines];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setLineSpacingDefault_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setLineSpacingDefault ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setLineSpacing_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger spacing = [args[@"spacing"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setLineSpacing : spacing];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::cancelPrint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cancelPrint ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setRightCharacterSpacing_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger spacing = [args[@"spacing"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setRightCharacterSpacing : spacing];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setTextMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              ESCText mode = (ESCText) [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setTextMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setTextStyleMiniBolddoubleWidthdoubleHeightunderline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL mini = [args[@"mini"] boolValue];
              // jsonable arg
              BOOL bold = [args[@"bold"] boolValue];
              // jsonable arg
              BOOL doubleWidth = [args[@"doubleWidth"] boolValue];
              // jsonable arg
              BOOL doubleHeight = [args[@"doubleHeight"] boolValue];
              // jsonable arg
              BOOL underline = [args[@"underline"] boolValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setTextStyleMini : mini bold: bold doubleWidth: doubleWidth doubleHeight: doubleHeight underline: underline];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendTextMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
              // enum arg
              ESCText mode = (ESCText) [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendText : text mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setUserDefinedCharacterSet_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger set = [args[@"set"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setUserDefinedCharacterSet : set];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::defineCharactersWithCodeStartCodeEndhorizontaldata_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger codeStart = [args[@"codeStart"] integerValue];
              // jsonable arg
              NSInteger codeEnd = [args[@"codeEnd"] integerValue];
              // jsonable arg
              NSInteger horizontal = [args[@"horizontal"] integerValue];
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref defineCharactersWithCodeStart : codeStart codeEnd: codeEnd horizontal: horizontal data: data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setUnderline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger underline = [args[@"underline"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setUnderline : underline];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::cancelUserDefinedCharacters_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger n = [args[@"n"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cancelUserDefinedCharacters : n];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setBold_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger bold = [args[@"bold"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBold : bold];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setDoubleStrike_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger doubleStrike = [args[@"doubleStrike"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setDoubleStrike : doubleStrike];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setCharacterFont_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger font = [args[@"font"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCharacterFont : font];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setInternationalCharacterSet_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger set = [args[@"set"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setInternationalCharacterSet : set];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setVerticalMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setVerticalMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPrintColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger color = [args[@"color"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrintColor : color];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setCharacterCodeTable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger table = [args[@"table"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCharacterCodeTable : table];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPrinterCodepage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger codepage = [args[@"codepage"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrinterCodepage : codepage];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setCharacterTransformMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCharacterTransformMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::enterPrinterSaveMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref enterPrinterSaveMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::exitPrinterSaveMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref exitPrinterSaveMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::getVietnamTransformMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref getVietnamTransformMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setVietnamTransformMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setVietnamTransformMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setThaiTransformStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger status = [args[@"status"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setThaiTransformStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPrinterLanguageMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrinterLanguageMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setUpToDownMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setUpToDownMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setCharacterColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger color = [args[@"color"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCharacterColor : color];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setBackgroundColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger color = [args[@"color"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBackgroundColor : color];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setShadowModeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger color = [args[@"color"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setShadowMode : mode color: color];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setCharacterSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger size = [args[@"size"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCharacterSize : size];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setCharacterWidthHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCharacterWidth : width height: height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setCharacterMultipleSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger size = [args[@"size"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCharacterMultipleSize : size];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setReverse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger reverse = [args[@"reverse"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setReverse : reverse];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setSmooth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger smooth = [args[@"smooth"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setSmooth : smooth];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPanelButtonMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPanelButtonMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::enableOutPaperSensor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL enable = [args[@"enable"] boolValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref enableOutPaperSensor : enable];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::enableStopPrintSensor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL enable = [args[@"enable"] boolValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref enableStopPrintSensor : enable];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setHorizontalTab_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setHorizontalTab ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setAbsolutePosition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger position = [args[@"position"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setAbsolutePosition : position];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setHorizontalTabPositionsData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setHorizontalTabPositionsData : data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::pageSetPrintDirection_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger direction = [args[@"direction"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref pageSetPrintDirection : direction];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::pageSetPrintAreaWithXPosYPoswidthheight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref pageSetPrintAreaWithXPos : xPos yPos: yPos width: width height: height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setRelativePosition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger position = [args[@"position"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setRelativePosition : position];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setJustification_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger justification = [args[@"justification"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setJustification : justification];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::pageSetAbsoluteYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref pageSetAbsoluteYPos : yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setLeftMargin_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger left = [args[@"left"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setLeftMargin : left];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setLinePrintPositionMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setLinePrintPositionMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPrintAreaWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrintAreaWidth : width];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::pageSetRelativeYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref pageSetRelativeYPos : yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setImageModeImageWidthdata_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setImageMode : mode imageWidth: width data: data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setNVBitImageMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger imageID = [args[@"imageID"] integerValue];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setNVBitImage : imageID Mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setNVGraphicsMemorySize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* size = (NSString*) args[@"size"];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setNVGraphicsMemorySize : size];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setGraphicDotDensityX_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger fn = [args[@"fn"] integerValue];
              // jsonable arg
              NSInteger x = [args[@"x"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setGraphicDotDensity : fn x: x];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printBufferGraphic_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger fn = [args[@"fn"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printBufferGraphic : fn];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitGraphicRemainingMemory_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger fn = [args[@"fn"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitGraphicRemainingMemory : fn];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitDownloadGraphicRemainingMemory_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger fn = [args[@"fn"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitDownloadGraphicRemainingMemory : fn];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitNVGrapihcKeyCodeList_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitNVGrapihcKeyCodeList ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::deleteNVGraphicAll_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref deleteNVGraphicAll ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::deleteNVGraphicWithKeycode1Keycode2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger keycode1 = [args[@"keycode1"] integerValue];
              // jsonable arg
              NSInteger keycode2 = [args[@"keycode2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref deleteNVGraphicWithKeycode1 : keycode1 keycode2: keycode2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::defineRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger keycode = [args[@"keycode"] integerValue];
              // jsonable arg
              NSInteger keycode2 = [args[@"keycode2"] integerValue];
              // jsonable arg
              NSInteger imageWidth = [args[@"imageWidth"] integerValue];
              // jsonable arg
              NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref defineRasterNVGraphicData : data keycode: keycode keycode2: keycode2 imageWidth: imageWidth imageHeight: imageHeight];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::defineColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger keycode = [args[@"keycode"] integerValue];
              // jsonable arg
              NSInteger keycode2 = [args[@"keycode2"] integerValue];
              // jsonable arg
              NSInteger imageWidth = [args[@"imageWidth"] integerValue];
              // jsonable arg
              NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref defineColumnNVGraphicData : data keycode: keycode keycode2: keycode2 imageWidth: imageWidth imageHeight: imageHeight];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printNVGraphicWithKeycodeKeycode2xScaleyScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger keycode = [args[@"keycode"] integerValue];
              // jsonable arg
              NSInteger keycode2 = [args[@"keycode2"] integerValue];
              // jsonable arg
              NSInteger xScale = [args[@"xScale"] integerValue];
              // jsonable arg
              NSInteger yScale = [args[@"yScale"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printNVGraphicWithKeycode : keycode keycode2: keycode2 xScale: xScale yScale: yScale];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitGraphicKeycodeList_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitGraphicKeycodeList ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::deleteDownloadedNVGraphicAll_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref deleteDownloadedNVGraphicAll ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::deleteDownloadedNVGraphicKeycodeKeycode2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger keycode = [args[@"keycode"] integerValue];
              // jsonable arg
              NSInteger keycode2 = [args[@"keycode2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref deleteDownloadedNVGraphicKeycode : keycode keycode2: keycode2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::defineDownloadedRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger keycode = [args[@"keycode"] integerValue];
              // jsonable arg
              NSInteger keycode2 = [args[@"keycode2"] integerValue];
              // jsonable arg
              NSInteger imageWidth = [args[@"imageWidth"] integerValue];
              // jsonable arg
              NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref defineDownloadedRasterNVGraphicData : data keycode: keycode keycode2: keycode2 imageWidth: imageWidth imageHeight: imageHeight];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::defineDownloadedColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger keycode = [args[@"keycode"] integerValue];
              // jsonable arg
              NSInteger keycode2 = [args[@"keycode2"] integerValue];
              // jsonable arg
              NSInteger imageWidth = [args[@"imageWidth"] integerValue];
              // jsonable arg
              NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref defineDownloadedColumnNVGraphicData : data keycode: keycode keycode2: keycode2 imageWidth: imageWidth imageHeight: imageHeight];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printDownloadedNVGraphicWithKeycodeKeycode2xScaleyScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger keycode = [args[@"keycode"] integerValue];
              // jsonable arg
              NSInteger keycode2 = [args[@"keycode2"] integerValue];
              // jsonable arg
              NSInteger xScale = [args[@"xScale"] integerValue];
              // jsonable arg
              NSInteger yScale = [args[@"yScale"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printDownloadedNVGraphicWithKeycode : keycode keycode2: keycode2 xScale: xScale yScale: yScale];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::storeRasterGraphicDataXScaleyScaleimageWidthimageHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger xScale = [args[@"xScale"] integerValue];
              // jsonable arg
              NSInteger yScale = [args[@"yScale"] integerValue];
              // jsonable arg
              NSInteger imageWidth = [args[@"imageWidth"] integerValue];
              // jsonable arg
              NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref storeRasterGraphicData : data xScale: xScale yScale: yScale imageWidth: imageWidth imageHeight: imageHeight];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::storeColumnGraphicDataXScaleyScaleimageWidthimageHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger xScale = [args[@"xScale"] integerValue];
              // jsonable arg
              NSInteger yScale = [args[@"yScale"] integerValue];
              // jsonable arg
              NSInteger imageWidth = [args[@"imageWidth"] integerValue];
              // jsonable arg
              NSInteger imageHeight = [args[@"imageHeight"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref storeColumnGraphicData : data xScale: xScale yScale: yScale imageWidth: imageWidth imageHeight: imageHeight];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::defineNVGraphicDataNumber_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger number = [args[@"number"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref defineNVGraphicData : data number: number];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::defineDownloadedImageWidthBytesheightBytes_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* imageData = (NSData*) HEAP[@([args[@"imageData"] integerValue])];
              // jsonable arg
              NSInteger widthBytes = [args[@"widthBytes"] integerValue];
              // jsonable arg
              NSInteger heightBytes = [args[@"heightBytes"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref defineDownloadedImage : imageData widthBytes: widthBytes heightBytes: heightBytes];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::printDownloadedImageWithScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger scale = [args[@"scale"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printDownloadedImageWithScale : scale];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitRealTimeStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger status = [args[@"status"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitRealTimeStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitPeripheralDeviceStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger status = [args[@"status"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitPeripheralDeviceStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitPaperSonsorStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitPaperSonsorStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setASBStatusWithDrawerOfflineerrorrollPaperpanelSwitch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL drawer = [args[@"drawer"] boolValue];
              // jsonable arg
              BOOL offline = [args[@"offline"] boolValue];
              // jsonable arg
              BOOL error = [args[@"error"] boolValue];
              // jsonable arg
              BOOL rollPaper = [args[@"rollPaper"] boolValue];
              // jsonable arg
              BOOL panelSwitch = [args[@"panelSwitch"] boolValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setASBStatusWithDrawer : drawer offline: offline error: error rollPaper: rollPaper panelSwitch: panelSwitch];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setInkASBWithOfflineDetection_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL offline = [args[@"offline"] boolValue];
              // jsonable arg
              BOOL detection = [args[@"detection"] boolValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setInkASBWithOffline : offline detection: detection];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger status = [args[@"status"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setHRIFont_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger font = [args[@"font"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setHRIFont : font];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendBarcodeDatajustificationwidthheighthri_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              ESCBarcode type = (ESCBarcode) [args[@"type"] integerValue];
              // jsonable arg
              NSString* data = (NSString*) args[@"data"];
              // jsonable arg
              NSInteger justification = [args[@"justification"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger hri = [args[@"hri"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendBarcode : type data: data justification: justification width: width height: height hri: hri];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::defineMacro_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref defineMacro ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::executeMacroWithTimesWaitTimesmode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger times = [args[@"times"] integerValue];
              // jsonable arg
              NSInteger waitTimes = [args[@"waitTimes"] integerValue];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref executeMacroWithTimes : times waitTimes: waitTimes mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::returnHome_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref returnHome ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setUnidirectionalPrintMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setUnidirectionalPrintMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPartialCut1_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPartialCut1 ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPartialCut3_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPartialCut3 ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPartialCut_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPartialCut ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setFullCut_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setFullCut ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPartialCutWithDistance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPartialCutWithDistance : distance];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setFullCutWithDistance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setFullCutWithDistance : distance];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setCutModeDistance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCutMode : mode distance: distance];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::kickCashdrawer_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger number = [args[@"number"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref kickCashdrawer : number];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::getPrinterCashdrawerStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref getPrinterCashdrawerStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::sendRealTimeRequest_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger request = [args[@"request"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref sendRealTimeRequest : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::generatePulseWithModeTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger time = [args[@"time"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref generatePulseWithMode : mode Time: time];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::executePowerOffSequence_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref executePowerOffSequence ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitSpecifiedStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger status = [args[@"status"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitSpecifiedStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::clearBuffer_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref clearBuffer ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escBeepIntegratedBeeperWithTimesT1T2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger times = [args[@"times"] integerValue];
              // jsonable arg
              NSInteger t1 = [args[@"t1"] integerValue];
              // jsonable arg
              NSInteger t2 = [args[@"t2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escBeepIntegratedBeeperWithTimes : times T1: t1 T2: t2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSetIntegratedBeeperWhenOfflineFactorsOccurATimesT1T2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger a = [args[@"a"] integerValue];
              // jsonable arg
              NSInteger times = [args[@"times"] integerValue];
              // jsonable arg
              NSInteger t1 = [args[@"t1"] integerValue];
              // jsonable arg
              NSInteger t2 = [args[@"t2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSetIntegratedBeeperWhenOfflineFactorsOccurA : a Times: times T1: t1 T2: t2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimesT1T2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger times = [args[@"times"] integerValue];
              // jsonable arg
              NSInteger t1 = [args[@"t1"] integerValue];
              // jsonable arg
              NSInteger t2 = [args[@"t2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimes : times T1: t1 T2: t2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSelectPeripheralDevice_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSelectPeripheralDevice : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::initializePrinter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref initializePrinter ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPageMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPageMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setStandardMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setStandardMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escGeneratePulsePinModeONTimeOFFTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger pin_mode = [args[@"pin_mode"] integerValue];
              // jsonable arg
              NSInteger on_time = [args[@"on_time"] integerValue];
              // jsonable arg
              NSInteger off_time = [args[@"off_time"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escGeneratePulsePinMode : pin_mode ONTime: on_time OFFTime: off_time];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escExecuteTestPrintTypeMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger type = [args[@"type"] integerValue];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escExecuteTestPrintType : type Mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSetRealTimeCommandLengthTypemode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger cmdLength = [args[@"cmdLength"] integerValue];
              // jsonable arg
              NSInteger type = [args[@"type"] integerValue];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSetRealTimeCommandLength : cmdLength type: type mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escRequestTransmissionOfResponseOrStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escRequestTransmissionOfResponseOrStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSelectPrintControlMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSelectPrintControlMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setDensity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger density = [args[@"density"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setDensity : density];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setSpeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger speed = [args[@"speed"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setSpeed : speed];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSelectNumbersOfPartsForThermalHeadEnergizing_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger number = [args[@"number"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSelectNumbersOfPartsForThermalHeadEnergizing : number];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setPageAreaWithWidthHeightxOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger xOffset = [args[@"xOffset"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPageAreaWithWidth : width height: height xOffset: xOffset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendLineWithXPosYPosxEndyEndmode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger xEnd = [args[@"xEnd"] integerValue];
              // jsonable arg
              NSInteger yEnd = [args[@"yEnd"] integerValue];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendRectWithXPosYPosxEndyEndmode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger xEnd = [args[@"xEnd"] integerValue];
              // jsonable arg
              NSInteger yEnd = [args[@"yEnd"] integerValue];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendRectWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escTransmitPrinterID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger id_number = [args[@"id_number"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escTransmitPrinterID : id_number];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setMotionUnitsWithHorizontalVertical_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger horizontal = [args[@"horizontal"] integerValue];
              // jsonable arg
              NSInteger vertical = [args[@"vertical"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setMotionUnitsWithHorizontal : horizontal vertical: vertical];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escInitializeMaintenanceCounter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger counter = [args[@"counter"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escInitializeMaintenanceCounter : counter];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escTransmitMaintenanceCounter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger counter = [args[@"counter"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escTransmitMaintenanceCounter : counter];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSetOnlineRecoveryWaitTime1WaitTime2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger wait_time1 = [args[@"wait_time1"] integerValue];
              // jsonable arg
              NSInteger wait_time2 = [args[@"wait_time2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSetOnlineRecoveryWaitTime1 : wait_time1 WaitTime2: wait_time2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setKanjiWithReverseDoubleWidthdoubleHeightunderline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL reverse = [args[@"reverse"] boolValue];
              // jsonable arg
              BOOL doubleWidth = [args[@"doubleWidth"] boolValue];
              // jsonable arg
              BOOL doubleHeight = [args[@"doubleHeight"] boolValue];
              // jsonable arg
              BOOL underline = [args[@"underline"] boolValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setKanjiWithReverse : reverse doubleWidth: doubleWidth doubleHeight: doubleHeight underline: underline];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setKanjiMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setKanjiMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setKanjiFontMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setKanjiFontMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setKanjiUnderline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger underline = [args[@"underline"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setKanjiUnderline : underline];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::cancelKanjiMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cancelKanjiMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::defineKanjiFirstsecond_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger first = [args[@"first"] integerValue];
              // jsonable arg
              NSInteger second = [args[@"second"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref defineKanji : data first: first second: second];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setKanjiCodeSystem_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger system = [args[@"system"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setKanjiCodeSystem : system];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setKanjiSpacingWithLeftRight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger left = [args[@"left"] integerValue];
              // jsonable arg
              NSInteger right = [args[@"right"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setKanjiSpacingWithLeft : left right: right];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::setKanjiQuadrupleMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setKanjiQuadrupleMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::cancelKanjiDefineWithFirstSecond_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger first = [args[@"first"] integerValue];
              // jsonable arg
              NSInteger second = [args[@"second"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cancelKanjiDefineWithFirst : first second: second];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendPDF417DataRowcolumnwidthrowHeighteccModeeccLeveloption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* data = (NSString*) args[@"data"];
              // jsonable arg
              NSInteger row = [args[@"row"] integerValue];
              // jsonable arg
              NSInteger column = [args[@"column"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger rowHeight = [args[@"rowHeight"] integerValue];
              // jsonable arg
              NSInteger eccMode = [args[@"eccMode"] integerValue];
              // jsonable arg
              NSInteger eccLevel = [args[@"eccLevel"] integerValue];
              // jsonable arg
              NSInteger option = [args[@"option"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendPDF417Data : data row: row column: column width: width rowHeight: rowHeight eccMode: eccMode eccLevel: eccLevel option: option];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitPDF417SymbolDataSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitPDF417SymbolDataSize ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendQRCodeDataJustificationleftMargineccLevelmodelsize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* data = (NSString*) args[@"data"];
              // jsonable arg
              NSInteger justification = [args[@"justification"] integerValue];
              // jsonable arg
              NSInteger leftMargin = [args[@"leftMargin"] integerValue];
              // jsonable arg
              NSInteger eccLevel = [args[@"eccLevel"] integerValue];
              // jsonable arg
              NSInteger model = [args[@"model"] integerValue];
              // jsonable arg
              NSInteger size = [args[@"size"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendQRCodeData : data justification: justification leftMargin: leftMargin eccLevel: eccLevel model: model size: size];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitQRCodeSymbolDataSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitQRCodeSymbolDataSize ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendMaxiCodeDataMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* data = (NSString*) args[@"data"];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendMaxiCodeData : data mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitMaxiCodeSymbolDataSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitMaxiCodeSymbolDataSize ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendRSS2DataModemoduleWidthmaxWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger moduleWidth = [args[@"moduleWidth"] integerValue];
              // jsonable arg
              NSInteger maxWidth = [args[@"maxWidth"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendRSS2Data : data mode: mode moduleWidth: moduleWidth maxWidth: maxWidth];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitRSS2SymbolDataSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitRSS2SymbolDataSize ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::appendCompositeSymbolDataModetypemoduleWidthmaxWidthhriFont_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger type = [args[@"type"] integerValue];
              // jsonable arg
              NSInteger moduleWidth = [args[@"moduleWidth"] integerValue];
              // jsonable arg
              NSInteger maxWidth = [args[@"maxWidth"] integerValue];
              // jsonable arg
              NSInteger hriFont = [args[@"hriFont"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendCompositeSymbolData : data mode: mode type: type moduleWidth: moduleWidth maxWidth: maxWidth hriFont: hriFont];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitCompositeSymbolDataSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitCompositeSymbolDataSize ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::writeNVUserMemoryData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger address = [args[@"address"] integerValue];
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref writeNVUserMemory : address data: data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::readNVUserMemoryLength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger address = [args[@"address"] integerValue];
              // jsonable arg
              NSInteger length = [args[@"length"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref readNVUserMemory : address length: length];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::deleteRecordWithModeKeykey2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger key = [args[@"key"] integerValue];
              // jsonable arg
              NSInteger key2 = [args[@"key2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref deleteRecordWithMode : mode key: key key2: key2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::storeRecordWithModeKeykey2data_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger key = [args[@"key"] integerValue];
              // jsonable arg
              NSInteger key2 = [args[@"key2"] integerValue];
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref storeRecordWithMode : mode key: key key2: key2 data: data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitDataInRecordWithModeKeykey2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger key = [args[@"key"] integerValue];
              // jsonable arg
              NSInteger key2 = [args[@"key2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitDataInRecordWithMode : mode key: key key2: key2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitNVMemoryUsedCapacityWithMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitNVMemoryUsedCapacityWithMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitNVMemoryRemainingCapacityWithMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitNVMemoryRemainingCapacityWithMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::transmitKeyCodeListWithMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref transmitKeyCodeListWithMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::deleteNVMemoryAllWithMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref deleteNVMemoryAllWithMode : mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::changeUserSettingMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref changeUserSettingMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::endUserSettingMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref endUserSettingMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escChangeMemorySwitchData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escChangeMemorySwitchData : data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escTransmitMemorySwitchSettingA_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger a = [args[@"a"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escTransmitMemorySwitchSettingA : a];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSetCustomizedSettingValuesData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSetCustomizedSettingValuesData : data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escTransmitCustomizedSettingValuesA_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger a = [args[@"a"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escTransmitCustomizedSettingValuesA : a];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escCopyUserDefinedPageWithFontNumberD1D2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger font_number = [args[@"font_number"] integerValue];
              // jsonable arg
              NSInteger d1 = [args[@"d1"] integerValue];
              // jsonable arg
              NSInteger d2 = [args[@"d2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escCopyUserDefinedPageWithFontNumber : font_number D1: d1 D2: d2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escDefineColumnFormatDataForCharacterCodePageYC1C2Data_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger y = [args[@"y"] integerValue];
              // jsonable arg
              NSInteger c1 = [args[@"c1"] integerValue];
              // jsonable arg
              NSInteger c2 = [args[@"c2"] integerValue];
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escDefineColumnFormatDataForCharacterCodePageY : y C1: c1 C2: c2 Data: data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escDefineRasterFormatDataForCharacterrCodePageXC1C2Data_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x = [args[@"x"] integerValue];
              // jsonable arg
              NSInteger c1 = [args[@"c1"] integerValue];
              // jsonable arg
              NSInteger c2 = [args[@"c2"] integerValue];
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escDefineRasterFormatDataForCharacterrCodePageX : x C1: c1 C2: c2 Data: data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escDeleteDataForChracterCodePageC1C2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger c1 = [args[@"c1"] integerValue];
              // jsonable arg
              NSInteger c2 = [args[@"c2"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escDeleteDataForChracterCodePageC1 : c1 C2: c2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSetConfigurationItemForSerialInterfaceAData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger a = [args[@"a"] integerValue];
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSetConfigurationItemForSerialInterfaceA : a Data: data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escTransmitConfigurationItemForSerialInterfacePLPHA_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger pl = [args[@"pl"] integerValue];
              // jsonable arg
              NSInteger ph = [args[@"ph"] integerValue];
              // jsonable arg
              NSInteger a = [args[@"a"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escTransmitConfigurationItemForSerialInterfacePL : pl PH: ph A: a];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSetConfigurationItemForBluetoothInterfaceAData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger a = [args[@"a"] integerValue];
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSetConfigurationItemForBluetoothInterfaceA : a Data: data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escTransmitConfigurationItemForBluetoothInterfaceA_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger a = [args[@"a"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escTransmitConfigurationItemForBluetoothInterfaceA : a];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escDeletePaperLayout_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escDeletePaperLayout ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSetPaperLayoutPSASBSCSDSESFSGSH_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger p = [args[@"p"] integerValue];
              // jsonable arg
              NSInteger sa = [args[@"sa"] integerValue];
              // jsonable arg
              NSInteger sb = [args[@"sb"] integerValue];
              // jsonable arg
              NSInteger sc = [args[@"sc"] integerValue];
              // jsonable arg
              NSInteger sd = [args[@"sd"] integerValue];
              // jsonable arg
              NSInteger se = [args[@"se"] integerValue];
              // jsonable arg
              NSInteger sf = [args[@"sf"] integerValue];
              // jsonable arg
              NSInteger sg = [args[@"sg"] integerValue];
              // jsonable arg
              NSInteger sh = [args[@"sh"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSetPaperLayoutP : p SA: sa SB: sb SC: sc SD: sd SE: se SF: sf SG: sg SH: sh];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escTransmitPaperLayoutInformation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger n = [args[@"n"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escTransmitPaperLayoutInformation : n];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSaveSettingValuesFromWorkAreaIntoStorageAreaFNM_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger fn = [args[@"fn"] integerValue];
              // jsonable arg
              NSInteger m = [args[@"m"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSaveSettingValuesFromWorkAreaIntoStorageAreaFN : fn M: m];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escLoadSettingValuesStoredInStorageAreaToWorkAreaFNM_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger fn = [args[@"fn"] integerValue];
              // jsonable arg
              NSInteger m = [args[@"m"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escLoadSettingValuesStoredInStorageAreaToWorkAreaFN : fn M: m];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFNM_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger fn = [args[@"fn"] integerValue];
              // jsonable arg
              NSInteger m = [args[@"m"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFN : fn M: m];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSelectCounterPrintModeWithDigitsJustification_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger digits = [args[@"digits"] integerValue];
              // jsonable arg
              NSInteger justification = [args[@"justification"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSelectCounterPrintModeWithDigits : digits Justification: justification];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSelectCounterModeA_MinimumValueMaximumValueCountingModeRepetition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger minimum_value = [args[@"minimum_value"] integerValue];
              // jsonable arg
              NSInteger maximum_value = [args[@"maximum_value"] integerValue];
              // jsonable arg
              NSInteger counting_mode = [args[@"counting_mode"] integerValue];
              // jsonable arg
              NSInteger repetition = [args[@"repetition"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSelectCounterModeA_MinimumValue : minimum_value MaximumValue: maximum_value CountingMode: counting_mode Repetition: repetition];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSetCounter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger counter = [args[@"counter"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSetCounter : counter];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escSelectCounterModeB_SASBSNSRSC_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger sa = [args[@"sa"] integerValue];
              // jsonable arg
              NSInteger sb = [args[@"sb"] integerValue];
              // jsonable arg
              NSInteger sn = [args[@"sn"] integerValue];
              // jsonable arg
              NSInteger sr = [args[@"sr"] integerValue];
              // jsonable arg
              NSInteger sc = [args[@"sc"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escSelectCounterModeB_SA : sa SB: sb SN: sn SR: sr SC: sc];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escPrintCounter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escPrintCounter ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escPaperLayoutSettingPSMSASBSCSDSESF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger p = [args[@"p"] integerValue];
              // jsonable arg
              NSInteger sm = [args[@"sm"] integerValue];
              // jsonable arg
              NSInteger sa = [args[@"sa"] integerValue];
              // jsonable arg
              NSInteger sb = [args[@"sb"] integerValue];
              // jsonable arg
              NSInteger sc = [args[@"sc"] integerValue];
              // jsonable arg
              NSInteger sd = [args[@"sd"] integerValue];
              // jsonable arg
              NSInteger se = [args[@"se"] integerValue];
              // jsonable arg
              NSInteger sf = [args[@"sf"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escPaperLayoutSettingP : p SM: sm SA: sa SB: sb SC: sc SD: sd SE: se SF: sf];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escPaperLayoutInformationTransmissionN_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger n = [args[@"n"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escPaperLayoutInformationTransmissionN : n];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escTransmitPositioningInformationM_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger m = [args[@"m"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escTransmitPositioningInformationM : m];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escFeedPaperToLabelPeelingPositionM_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger m = [args[@"m"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escFeedPaperToLabelPeelingPositionM : m];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escFeedPaperToCuttingPositionM_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger m = [args[@"m"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escFeedPaperToCuttingPositionM : m];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escFeedPaperToPrintStartingPositionM_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger m = [args[@"m"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escFeedPaperToPrintStartingPositionM : m];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandESC::escPaperLayoutErrorSpecialMarginSettingPSN_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger p = [args[@"p"] integerValue];
              // jsonable arg
              NSInteger sn = [args[@"sn"] integerValue];
      
              // ref
              PTCommandESC* ref = (PTCommandESC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref escPaperLayoutErrorSpecialMarginSettingP : p SN: sn];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::selfTest_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref selfTest ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::appendCommand_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* cmd = (NSString*) args[@"cmd"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendCommand : cmd];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setPrintAreaSizeWithWidthHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger label_width = [args[@"label_width"] integerValue];
              // jsonable arg
              NSInteger label_height = [args[@"label_height"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrintAreaSizeWithWidth : label_width height: label_height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setGapWithDistanceOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setGapWithDistance : distance offset: offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setBlineWithHeightOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBlineWithHeight : height offset: offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setOffsetWithDistance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setOffsetWithDistance : distance];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::feedToNextLabel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref feedToNextLabel ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setFeedLength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger length = [args[@"length"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setFeedLength : length];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setPrintSpeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTTSCPrintSpeed speed = (PTTSCPrintSpeed) [args[@"speed"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrintSpeed : speed];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setPrintDensity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTTSCPrintDensity density = (PTTSCPrintDensity) [args[@"density"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrintDensity : density];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setPrintDirectionMirror_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTTSCPrintDirection direction = (PTTSCPrintDirection) [args[@"direction"] integerValue];
              // enum arg
              PTTSCPrintStyle mirror = (PTTSCPrintStyle) [args[@"mirror"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrintDirection : direction mirror: mirror];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setReferenceXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setReferenceXPos : x_pos yPos: y_pos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setCodePage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTTSCCharacterStyle codepage = (PTTSCCharacterStyle) [args[@"codepage"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCodePage : codepage];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setCLS_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCLS ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setBackFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBackFeed : distance];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setBackUP_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger distance = [args[@"distance"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBackUP : distance];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setHome_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setHome ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::printWithSetsCopies_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger sets = [args[@"sets"] integerValue];
              // jsonable arg
              NSInteger copies = [args[@"copies"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printWithSets : sets copies: copies];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setSoundWithLevelInterval_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger level = [args[@"level"] integerValue];
              // jsonable arg
              NSInteger interval = [args[@"interval"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setSoundWithLevel : level interval: interval];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setCut_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCut ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setLimitFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger max_len = [args[@"max_len"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setLimitFeed : max_len];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setFontBold_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL bold = [args[@"bold"] boolValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setFontBold : bold];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setPrinterStateAutomaticBackWithStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL status = [args[@"status"] boolValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrinterStateAutomaticBackWithStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::getPrinterStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref getPrinterStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::drawBarWithXPosYPoswidthheight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref drawBarWithXPos : x_pos yPos: y_pos width: width height: height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::printBarcodeWithXPosYPostypeheightreadablerotationratiocontext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // enum arg
              PTTSCBarcodeStyle type = (PTTSCBarcodeStyle) [args[@"type"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // enum arg
              PTTSCBarcodeReadbleStyle readable = (PTTSCBarcodeReadbleStyle) [args[@"readable"] integerValue];
              // enum arg
              PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
              // enum arg
              PTTSCBarcodeRatio ratio = (PTTSCBarcodeRatio) [args[@"ratio"] integerValue];
              // jsonable arg
              NSString* context = (NSString*) args[@"context"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printBarcodeWithXPos : x_pos yPos: y_pos type: type height: height readable: readable rotation: rotation ratio: ratio context: context];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::printQRcodeWithXPosYPoseccLevelcellWidthmoderotationmodelmaskcontext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // enum arg
              PTTSCQRcodeEcclevel ecc_level = (PTTSCQRcodeEcclevel) [args[@"ecc_level"] integerValue];
              // enum arg
              PTTSCQRcodeWidth width = (PTTSCQRcodeWidth) [args[@"width"] integerValue];
              // enum arg
              PTTSCQRCodeMode mode = (PTTSCQRCodeMode) [args[@"mode"] integerValue];
              // enum arg
              PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
              // enum arg
              PTTSCQRCodeModel model = (PTTSCQRCodeModel) [args[@"model"] integerValue];
              // enum arg
              PTTSCQRcodeMask mask = (PTTSCQRcodeMask) [args[@"mask"] integerValue];
              // jsonable arg
              NSString* context = (NSString*) args[@"context"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printQRcodeWithXPos : x_pos yPos: y_pos eccLevel: ecc_level cellWidth: width mode: mode rotation: rotation model: model mask: mask context: context];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::appendTextWithXposYPosfontrotationxMultiplicationyMultiplicationtext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // enum arg
              PTTSCTextFontStyle font = (PTTSCTextFontStyle) [args[@"font"] integerValue];
              // enum arg
              PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
              // jsonable arg
              NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
              // jsonable arg
              NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendTextWithXpos : x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication text: text];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // enum arg
              PTTSCTextFontStyle font = (PTTSCTextFontStyle) [args[@"font"] integerValue];
              // enum arg
              PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
              // jsonable arg
              NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
              // jsonable arg
              NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
              // jsonable arg
              NSInteger safeHeight = [args[@"safeHeight"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger lineSpacing = [args[@"lineSpacing"] integerValue];
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSInteger result = [ref printAutoTextWithXpos: x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication safeHeight: safeHeight width: width lineSpacing: lineSpacing text: text];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::appendTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationtext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // enum arg
              PTTSCTextVectorFontStyle font = (PTTSCTextVectorFontStyle) [args[@"font"] integerValue];
              // enum arg
              PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
              // jsonable arg
              NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
              // jsonable arg
              NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref appendTextForVectorWithXpos : x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication text: text];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // enum arg
              PTTSCTextVectorFontStyle font = (PTTSCTextVectorFontStyle) [args[@"font"] integerValue];
              // enum arg
              PTTSCStyleRotation rotation = (PTTSCStyleRotation) [args[@"rotation"] integerValue];
              // jsonable arg
              NSInteger x_multiplication = [args[@"x_multiplication"] integerValue];
              // jsonable arg
              NSInteger y_multiplication = [args[@"y_multiplication"] integerValue];
              // jsonable arg
              NSInteger safeHeight = [args[@"safeHeight"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger lineSpacing = [args[@"lineSpacing"] integerValue];
              // jsonable arg
              NSString* text = (NSString*) args[@"text"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSInteger result = [ref printAutoTextForVectorWithXpos: x_pos yPos: y_pos font: font rotation: rotation xMultiplication: x_multiplication yMultiplication: y_multiplication safeHeight: safeHeight width: width lineSpacing: lineSpacing text: text];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setReverseWithXStartYStartxWidthyHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger x_width = [args[@"x_width"] integerValue];
              // jsonable arg
              NSInteger y_height = [args[@"y_height"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setReverseWithXStart : x_start yStart: y_start xWidth: x_width yHeight: y_height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setBoxWithXStartYStartxEndyEndthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger x_end = [args[@"x_end"] integerValue];
              // jsonable arg
              NSInteger y_end = [args[@"y_end"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setBoxWithXStart : x_start yStart: y_start xEnd: x_end yEnd: y_end thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setEllipseWithXStartYStartwidthheightthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setEllipseWithXStart : x_start yStart: y_start width: width height: height thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setCircleWithXStartYStartdiameterthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger diameter = [args[@"diameter"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCircleWithXStart : x_start yStart: y_start diameter: diameter thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setEraseWithXStartYStartxWidthyHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_start = [args[@"x_start"] integerValue];
              // jsonable arg
              NSInteger y_start = [args[@"y_start"] integerValue];
              // jsonable arg
              NSInteger x_width = [args[@"x_width"] integerValue];
              // jsonable arg
              NSInteger y_height = [args[@"y_height"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setEraseWithXStart : x_start yStart: y_start xWidth: x_width yHeight: y_height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::drawDmatrixBarcodeWithXPosYPoswidthheightxmrowcolexpression_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // enum arg
              PTTSCDMATRIXSize xm = (PTTSCDMATRIXSize) [args[@"xm"] integerValue];
              // jsonable arg
              NSInteger row = [args[@"row"] integerValue];
              // jsonable arg
              NSInteger col = [args[@"col"] integerValue];
              // jsonable arg
              NSString* expresssion = (NSString*) args[@"expresssion"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref drawDmatrixBarcodeWithXPos : x_pos yPos: y_pos width: width height: height xm: xm row: row col: col expression: expresssion];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::printPDF417WithXPosYPoswidthheightrotateoptionexpression_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // enum arg
              PTTSCStyleRotation rotate = (PTTSCStyleRotation) [args[@"rotate"] integerValue];
              // jsonable arg
              NSString* option = (NSString*) args[@"option"];
              // jsonable arg
              NSString* expression = (NSString*) args[@"expression"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printPDF417WithXPos : x_pos yPos: y_pos width: width height: height rotate: rotate option: option expression: expression];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // enum arg
              PTTSCStyleRotation rotate = (PTTSCStyleRotation) [args[@"rotate"] integerValue];
              // jsonable arg
              NSInteger size = [args[@"size"] integerValue];
              // jsonable arg
              NSInteger ecp = [args[@"ecp"] integerValue];
              // jsonable arg
              NSInteger flg = [args[@"flg"] integerValue];
              // jsonable arg
              NSInteger menu = [args[@"menu"] integerValue];
              // jsonable arg
              NSInteger multi = [args[@"multi"] integerValue];
              // jsonable arg
              NSInteger rev = [args[@"rev"] integerValue];
              // jsonable arg
              NSString* aztecData = (NSString*) args[@"aztecData"];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printAztecWithXPos : xPos yPos: yPos rotate: rotate size: size ecp: ecp flg: flg menu: menu multi: multi rev: rev aztecData: aztecData];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::printBMPWithFilenameXPosyPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* filename = (NSString*) args[@"filename"];
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printBMPWithFilename : filename xPos: x_pos yPos: y_pos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::printPCXWithFilenameXPosyPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* filename = (NSString*) args[@"filename"];
              // jsonable arg
              NSInteger x_pos = [args[@"x_pos"] integerValue];
              // jsonable arg
              NSInteger y_pos = [args[@"y_pos"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printPCXWithFilename : filename xPos: x_pos yPos: y_pos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setCounterWithCounterNumberStep_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger counterNumber = [args[@"counterNumber"] integerValue];
              // jsonable arg
              NSInteger step = [args[@"step"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCounterWithCounterNumber : counterNumber step: step];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setCutterStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL status = [args[@"status"] boolValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCutterStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandTSPL::setCutterPieces_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger pieces = [args[@"pieces"] integerValue];
      
              // ref
              PTCommandTSPL* ref = (PTCommandTSPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCutterPieces : pieces];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTLabel::dataWithSourceFile_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* filePath = (NSString*) args[@"filePath"];
      
              // ref
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSData* result = [ref dataWithSourceFile: filePath];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTLabel::dataWithTSPL_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSData* result = [ref dataWithTSPL];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTEncode::encodeDataWithString_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* string = (NSString*) args[@"string"];
      
              // ref
        
      
              // invoke native method
              NSData* result = [PTEncode encodeDataWithString: string];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTEncode::decodeStringWithData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
        
      
              // invoke native method
              NSString* result = [PTEncode decodeStringWithData: data];
      
              // result
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::printSelfInspectionPage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printSelfInspectionPage ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclGetPaperStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclGetPaperStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclTurnOnPrintStatusCallBack_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL flag = [args[@"flag"] boolValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclTurnOnPrintStatusCallBack : flag];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclUnderlineON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclUnderlineON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclUnderlineOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclUnderlineOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclUtilitySession_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclUtilitySession ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclLineMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLineMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclReWindOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclReWindOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclGetPrinterSN_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclGetPrinterSN ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclPaperTypeWithType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger type = [args[@"type"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPaperTypeWithType : type];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::setPrinterPaperTypeFor4Inch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger type = [args[@"type"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrinterPaperTypeFor4Inch : type];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclLabelWithOffsetHResvResheightquantity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
              // jsonable arg
              NSInteger hRes = [args[@"hRes"] integerValue];
              // jsonable arg
              NSInteger vRes = [args[@"vRes"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger quantity = [args[@"quantity"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLabelWithOffset : offset hRes: hRes vRes: vRes height: height quantity: quantity];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclBarcodeQRcodeWithXPosYPosmodelunitWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger model = [args[@"model"] integerValue];
              // jsonable arg
              NSInteger unitWidth = [args[@"unitWidth"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeQRcodeWithXPos : xPos yPos: yPos model: model unitWidth: unitWidth];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclBarcodeQRcodeVerticalWithXPosYPosmodelunitWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger model = [args[@"model"] integerValue];
              // jsonable arg
              NSInteger unitWidth = [args[@"unitWidth"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeQRcodeVerticalWithXPos : xPos yPos: yPos model: model unitWidth: unitWidth];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclBarcodeQRcodeEnd_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeQRcodeEnd ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclBarcodeTextWithFontFontSizeoffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger font = [args[@"font"] integerValue];
              // jsonable arg
              NSInteger fontSize = [args[@"fontSize"] integerValue];
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeTextWithFont : font fontSize: fontSize offset: offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclBarcodeTextWithTrueTypeFontXScaleyScaleoffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger font = [args[@"font"] integerValue];
              // jsonable arg
              NSInteger xScale = [args[@"xScale"] integerValue];
              // jsonable arg
              NSInteger yScale = [args[@"yScale"] integerValue];
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeTextWithTrueTypeFont : font xScale: xScale yScale: yScale offset: offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclBarcodeTextOff_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeTextOff ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclBoxWithXPosYPosxEndyEndthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger xEnd = [args[@"xEnd"] integerValue];
              // jsonable arg
              NSInteger yEnd = [args[@"yEnd"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBoxWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclCenterWithRange_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger range = [args[@"range"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclCenterWithRange : range];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclCenter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclCenter ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclConcatStartWithXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclConcatStartWithXPos : xPos yPos: yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclConcatVerticalStartWithXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclConcatVerticalStartWithXPos : xPos yPos: yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclConcatEnd_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclConcatEnd ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclPrint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPrint ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclPoPrint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPoPrint ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclInverseLineWithXPosYPosxEndyEndthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger xEnd = [args[@"xEnd"] integerValue];
              // jsonable arg
              NSInteger yEnd = [args[@"yEnd"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclInverseLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclLeft__int_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger range = [args[@"range"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLeft : range];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclLeft_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLeft ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclLineWithXPosYPosxEndyEndthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger xEnd = [args[@"xEnd"] integerValue];
              // jsonable arg
              NSInteger yEnd = [args[@"yEnd"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclMultiLineStartWithLineHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger lineHeight = [args[@"lineHeight"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclMultiLineStartWithLineHeight : lineHeight];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclMultiLineEnd_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclMultiLineEnd ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclPageWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger pageWidth = [args[@"pageWidth"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPageWidth : pageWidth];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclRight__int_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger right = [args[@"right"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclRight : right];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclRight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclRight ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclRotate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger degrees = [args[@"degrees"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclRotate : degrees];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetBold_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger boldness = [args[@"boldness"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetBold : boldness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetSpacing_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger spacing = [args[@"spacing"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetSpacing : spacing];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetMagWithWidthHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetMagWithWidth : width height: height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclTempMoveUp_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger right = [args[@"right"] integerValue];
              // jsonable arg
              NSInteger up = [args[@"up"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclTempMove : right up: up];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetBackground_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger value = [args[@"value"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetBackground : value];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclLineMargin_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLineMargin : offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetPositionWithXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetPositionWithXPos : xPos yPos: yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetPositionWithXPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetPositionWithXPos : xPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetPositionWithYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetPositionWithYPos : yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclLineFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLineFeed ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclContrast_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger value = [args[@"value"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclContrast : value];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger amount = [args[@"amount"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclFeed : amount];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclLabel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLabel ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclMulti_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger quantity = [args[@"quantity"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclMulti : quantity];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclNoPace_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclNoPace ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclPace_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPace ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclPostFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger amount = [args[@"amount"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPostFeed : amount];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclPreFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger amount = [args[@"amount"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPreFeed : amount];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclReverse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger amount = [args[@"amount"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclReverse : amount];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetFeedSkip_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger length = [args[@"length"] integerValue];
              // jsonable arg
              NSInteger skip = [args[@"skip"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetFeed : length skip: skip];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSpeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger value = [args[@"value"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSpeed : value];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclForm_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclForm ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclTone_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger value = [args[@"value"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclTone : value];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclTurn_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger degrees = [args[@"degrees"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclTurn : degrees];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclFormFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclFormFeed ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclAbort_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclAbort ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclOnFeed_Feed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclOnFeed_Feed ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclOnFeed_Reprint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclOnFeed_Reprint ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclOnFeed_Ignore_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclOnFeed_Ignore ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclReRun_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclReRun ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclWait_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger duration = [args[@"duration"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclWait : duration];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetLabelPositionWithXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetLabelPositionWithXPos : xPos yPos: yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetLabelPositionWithXPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetLabelPositionWithXPos : xPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetLabelPositionWithYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetLabelPositionWithYPos : yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetArabicTransformFunction_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger function = [args[@"function"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetArabicTransformFunction : function];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclGetArabicTransformStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclGetArabicTransformStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetThaiTransformStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger status = [args[@"status"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetThaiTransformStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclSetVietnameseTransformFunction_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger function = [args[@"function"] integerValue];
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetVietnameseTransformFunction : function];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTOldCommandCPCL::cpclGetVietnameseTransformStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTOldCommandCPCL* ref = (PTOldCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclGetVietnameseTransformStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::printSelfTest_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printSelfTest ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::zplLineFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref zplLineFeed ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::A_SetFontFieldOrientationcharacterHeightwidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
              // enum arg
              PTZplOrientation fieldOrientation = (PTZplOrientation) [args[@"fieldOrientation"] integerValue];
              // jsonable arg
              NSInteger characterHeight = [args[@"characterHeight"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref A_SetFont : fontName fieldOrientation: fieldOrientation characterHeight: characterHeight width: width];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::A_SetFontFieldOrientation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
              // enum arg
              PTZplOrientation fieldOrientation = (PTZplOrientation) [args[@"fieldOrientation"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref A_SetFont : fontName fieldOrientation: fieldOrientation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::A_SetFontCharacterHeightwidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
              // jsonable arg
              NSInteger characterHeight = [args[@"characterHeight"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref A_SetFont : fontName characterHeight: characterHeight width: width];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::A_SetFont_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref A_SetFont : fontName];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::A_SetFontWithOrientationHeightwidthlocationfontNameextension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // enum arg
              PTZplFileLocation location = (PTZplFileLocation) [args[@"location"] integerValue];
              // jsonable arg
              NSString* fontName = (NSString*) args[@"fontName"];
              // jsonable arg
              NSString* extension = (NSString*) args[@"extension"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref A_SetFontWithOrientation : orientation height: height width: width location: location fontName: fontName extension: extension];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::A_SetFontWithOrientationHeightwidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref A_SetFontWithOrientation : orientation height: height width: width];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::B0_BacodeAztecWithOrientationMagnificationFactorisContainECICerrorAndSymbolisMenuSymbolappendSymbolNumberappendOptionalID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger magnificationFactor = [args[@"magnificationFactor"] integerValue];
              // enum arg
              PTZplBool isContainECIC = (PTZplBool) [args[@"isContainECIC"] integerValue];
              // jsonable arg
              NSInteger errorAndSymbol = [args[@"errorAndSymbol"] integerValue];
              // enum arg
              PTZplBool isMenuSymbol = (PTZplBool) [args[@"isMenuSymbol"] integerValue];
              // jsonable arg
              NSInteger appendSymbolNumber = [args[@"appendSymbolNumber"] integerValue];
              // jsonable arg
              NSString* appendOptionalID = (NSString*) args[@"appendOptionalID"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref B0_BacodeAztecWithOrientation : orientation magnificationFactor: magnificationFactor isContainECIC: isContainECIC errorAndSymbol: errorAndSymbol isMenuSymbol: isMenuSymbol appendSymbolNumber: appendSymbolNumber appendOptionalID: appendOptionalID];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::B1_BacodeCode11WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // enum arg
              PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref B1_BacodeCode11WithOrientation : orientation checkDigit: checkDigit barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::B3_BacodeCode39WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // enum arg
              PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref B3_BacodeCode39WithOrientation : orientation checkDigit: checkDigit barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::B4_BacodePlanetCodeWithOrientationBarcodeHeightinterpretationLineStyle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTCode49InterpretationLineStyle style = (PTCode49InterpretationLineStyle) [args[@"style"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref B4_BacodePlanetCodeWithOrientation : orientation barcodeHeight: barcodeHeight interpretationLineStyle: style];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::B7_BarcodePDF417CodeWithOrientationBarcodeHeightsecurityLevelcolumnsrowstruncation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // jsonable arg
              NSInteger securityLevel = [args[@"securityLevel"] integerValue];
              // jsonable arg
              NSInteger columns = [args[@"columns"] integerValue];
              // jsonable arg
              NSInteger rows = [args[@"rows"] integerValue];
              // enum arg
              PTZplBool truncation = (PTZplBool) [args[@"truncation"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref B7_BarcodePDF417CodeWithOrientation : orientation barcodeHeight: barcodeHeight securityLevel: securityLevel columns: columns rows: rows truncation: truncation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::B8_BacodeEAN8WithOrientationBarcodeHeightinterpretationLineaboveCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref B8_BacodeEAN8WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::B9_BarcodeUPCE8CodeWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
              // enum arg
              PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref B9_BarcodeUPCE8CodeWithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode checkDigit: checkDigit];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BA_BarcodeCode93WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
              // enum arg
              PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BA_BarcodeCode93WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode checkDigit: checkDigit];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BB_BarcodeCodeBlockWithOrientationBarcodeHeightsecurityLevelperRowCharactersrowsmode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool securityLevel = (PTZplBool) [args[@"securityLevel"] integerValue];
              // jsonable arg
              NSInteger perRowCharacters = [args[@"perRowCharacters"] integerValue];
              // jsonable arg
              NSInteger rows = [args[@"rows"] integerValue];
              // enum arg
              PTZplCodeBlockBarCodeMode mode = (PTZplCodeBlockBarCodeMode) [args[@"mode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BB_BarcodeCodeBlockWithOrientation : orientation barcodeHeight: barcodeHeight securityLevel: securityLevel perRowCharacters: perRowCharacters rows: rows mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BC_BarcodeCode128WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigitmode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
              // enum arg
              PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
              // enum arg
              PTZplCode128Mode mode = (PTZplCode128Mode) [args[@"mode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BC_BarcodeCode128WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode checkDigit: checkDigit mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BD_BarcodeUPSMaxicodeWithModeSymbolNumbertotalSymbolNumbers_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplUpsMaxiCodeMode mode = (PTZplUpsMaxiCodeMode) [args[@"mode"] integerValue];
              // jsonable arg
              NSInteger symbolNumber = [args[@"symbolNumber"] integerValue];
              // jsonable arg
              NSInteger totalSymbolNumbers = [args[@"totalSymbolNumbers"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BD_BarcodeUPSMaxicodeWithMode : mode symbolNumber: symbolNumber totalSymbolNumbers: totalSymbolNumbers];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BE_BacodeEAN13WithOrientationBarcodeHeightinterpretationLineaboveCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BE_BacodeEAN13WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BF_BarcodeMicroPDF417WithOrientationBarcodeHeightmode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // jsonable arg
              NSInteger mode = [args[@"mode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BF_BarcodeMicroPDF417WithOrientation : orientation barcodeHeight: barcodeHeight mode: mode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BI_BacodeIndustrial2of5WithOrientationBarcodeHeightinterpretationLineaboveCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BI_BacodeIndustrial2of5WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BJ_BacodeStandard2of5WithOrientationBarcodeHeightinterpretationLineaboveCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BJ_BacodeStandard2of5WithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BK_BarcodeANSICodebarWithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCodestartCharacterstopCharacter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // enum arg
              PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
              // jsonable arg
              NSString* startCharacter = (NSString*) args[@"startCharacter"];
              // jsonable arg
              NSString* stopCharacter = (NSString*) args[@"stopCharacter"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BK_BarcodeANSICodebarWithOrientation : orientation checkDigit: checkDigit barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode startCharacter: startCharacter stopCharacter: stopCharacter];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BL_BacodeLOGMARSWithOrientationBarcodeHeightprintInterpretationLineAboveCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool isPrint = (PTZplBool) [args[@"isPrint"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BL_BacodeLOGMARSWithOrientation : orientation barcodeHeight: barcodeHeight printInterpretationLineAboveCode: isPrint];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BQ_BarcodeQRcodeWithOrientationModelmagnificationreliabilityLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // enum arg
              PTZplQrModel model = (PTZplQrModel) [args[@"model"] integerValue];
              // jsonable arg
              NSInteger magnification = [args[@"magnification"] integerValue];
              // enum arg
              PTZplQrReliabilityLevel reliabilityLevel = (PTZplQrReliabilityLevel) [args[@"reliabilityLevel"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BQ_BarcodeQRcodeWithOrientation : orientation model: model magnification: magnification reliabilityLevel: reliabilityLevel];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BS_BacodeUPCEANExtensionsWithOrientationBarcodeHeightinterpretationLineaboveCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BS_BacodeUPCEANExtensionsWithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BU_BarcodeUPCAWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
              // enum arg
              PTZplBool interpretationLine = (PTZplBool) [args[@"interpretationLine"] integerValue];
              // enum arg
              PTZplBool aboveCode = (PTZplBool) [args[@"aboveCode"] integerValue];
              // enum arg
              PTZplBool checkDigit = (PTZplBool) [args[@"checkDigit"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BU_BarcodeUPCAWithOrientation : orientation barcodeHeight: barcodeHeight interpretationLine: interpretationLine aboveCode: aboveCode checkDigit: checkDigit];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BY_BarcodeFieldDefaultWithModuleWidthRatiobarcodeHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger moduleWidth = [args[@"moduleWidth"] integerValue];
              // jsonable arg
              float ratio = [args[@"ratio"] floatValue];
              // jsonable arg
              NSInteger barcodeHeight = [args[@"barcodeHeight"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BY_BarcodeFieldDefaultWithModuleWidth : moduleWidth ratio: ratio barcodeHeight: barcodeHeight];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::BY_BarcodeFieldDefaultWithModuleWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger moduleWidth = [args[@"moduleWidth"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref BY_BarcodeFieldDefaultWithModuleWidth : moduleWidth];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::CC_ChangeCaret_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* character = (NSString*) args[@"character"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref CC_ChangeCaret : character];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::CD_ChangeDelimiter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* charactor = (NSString*) args[@"charactor"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref CD_ChangeDelimiter : charactor];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::CF_ChangeDefaultFontWidthheight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFont font = (PTZplFont) [args[@"font"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref CF_ChangeDefaultFont : font width: width height: height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::CF_ChangeDefaultFont_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFont font = (PTZplFont) [args[@"font"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref CF_ChangeDefaultFont : font];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::CF_ChangeDefaultFontWidthHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref CF_ChangeDefaultFontWidth : width height: height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::CI_ChangeInternationalCharacterSet_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* characterSet = (NSString*) args[@"characterSet"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref CI_ChangeInternationalCharacterSet : characterSet];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::CT_ChangeTilde_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* character = (NSString*) args[@"character"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref CT_ChangeTilde : character];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::CV_CodeValidation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplBool codeValidation = (PTZplBool) [args[@"codeValidation"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref CV_CodeValidation : codeValidation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::CW_FontIdentifierFontDriveLocationdownloadedFontextension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFont fontName = (PTZplFont) [args[@"fontName"] integerValue];
              // enum arg
              PTZplFileLocation fontDriveLocation = (PTZplFileLocation) [args[@"fontDriveLocation"] integerValue];
              // jsonable arg
              NSString* downloadedFont = (NSString*) args[@"downloadedFont"];
              // jsonable arg
              NSString* extension = (NSString*) args[@"extension"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref CW_FontIdentifier : fontName fontDriveLocation: fontDriveLocation downloadedFont: downloadedFont extension: extension];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::DF_DownloadFormatWithDeviceImageNameextension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFileLocation deviceToStoreImage = (PTZplFileLocation) [args[@"deviceToStoreImage"] integerValue];
              // jsonable arg
              NSString* imageName = (NSString*) args[@"imageName"];
              // jsonable arg
              NSString* extension = (NSString*) args[@"extension"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref DF_DownloadFormatWithDevice : deviceToStoreImage imageName: imageName extension: extension];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::EG_EraseDownloadGraphics_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref EG_EraseDownloadGraphics ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FD_FieldData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* fieldData = (NSString*) args[@"fieldData"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FD_FieldData : fieldData];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FH_FieldHexadecimalIndicator_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* hexadecimalIndicator = (NSString*) args[@"hexadecimalIndicator"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FH_FieldHexadecimalIndicator : hexadecimalIndicator];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FH_FieldHexadecimal_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FH_FieldHexadecimal ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FN_FieldNumberOptional_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger fieldNumber = [args[@"fieldNumber"] integerValue];
              // jsonable arg
              NSString* optional = (NSString*) args[@"optional"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FN_FieldNumber : fieldNumber optional: optional];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FN_FieldNumber_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger fieldNumber = [args[@"fieldNumber"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FN_FieldNumber : fieldNumber];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FO_FieldOriginWithXAxisYAxisjustification_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger XAxis = [args[@"XAxis"] integerValue];
              // jsonable arg
              NSInteger YAxis = [args[@"YAxis"] integerValue];
              // enum arg
              PTZplJustification justification = (PTZplJustification) [args[@"justification"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FO_FieldOriginWithXAxis : XAxis YAxis: YAxis justification: justification];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FO_FieldOriginWithXAxisYAxis_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger XAxis = [args[@"XAxis"] integerValue];
              // jsonable arg
              NSInteger YAxis = [args[@"YAxis"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FO_FieldOriginWithXAxis : XAxis YAxis: YAxis];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FP_FieldParameterWithDirectionCharacterGap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplTextPrintDirection direction = (PTZplTextPrintDirection) [args[@"direction"] integerValue];
              // jsonable arg
              NSInteger characterGap = [args[@"characterGap"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FP_FieldParameterWithDirection : direction characterGap: characterGap];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FR_FieldReversePrint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FR_FieldReversePrint ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FS_FieldSeparator_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FS_FieldSeparator ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FT_FieldTypesetWithXAxisYAxisjustification_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger XAxis = [args[@"XAxis"] integerValue];
              // jsonable arg
              NSInteger YAxis = [args[@"YAxis"] integerValue];
              // enum arg
              PTZplJustification justification = (PTZplJustification) [args[@"justification"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FT_FieldTypesetWithXAxis : XAxis YAxis: YAxis justification: justification];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FT_FieldTypesetWithXAxisYAxis_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger XAxis = [args[@"XAxis"] integerValue];
              // jsonable arg
              NSInteger YAxis = [args[@"YAxis"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FT_FieldTypesetWithXAxis : XAxis YAxis: YAxis];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FT_FieldTypeset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FT_FieldTypeset ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FV_FieldVariable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* variableFieldData = (NSString*) args[@"variableFieldData"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FV_FieldVariable : variableFieldData];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FW_FieldOrientationJustification_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation fieldOrientation = (PTZplOrientation) [args[@"fieldOrientation"] integerValue];
              // enum arg
              PTZplJustification justification = (PTZplJustification) [args[@"justification"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FW_FieldOrientation : fieldOrientation justification: justification];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FW_FieldOrientation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation fieldOrientation = (PTZplOrientation) [args[@"fieldOrientation"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FW_FieldOrientation : fieldOrientation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::FX_FieldComment_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* comment = (NSString*) args[@"comment"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref FX_FieldComment : comment];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::GB_GraphicBoxWithWidthHeightthicknesslineColorcornorRoundingDegree_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
              // enum arg
              PTZplColor lineColor = (PTZplColor) [args[@"lineColor"] integerValue];
              // jsonable arg
              NSInteger cornorRoundingDegree = [args[@"cornorRoundingDegree"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref GB_GraphicBoxWithWidth : width height: height thickness: thickness lineColor: lineColor cornorRoundingDegree: cornorRoundingDegree];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::GB_GraphicBoxWithWidthHeightthicknesscornorRoundingDegree_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
              // jsonable arg
              NSInteger cornorRoundingDegree = [args[@"cornorRoundingDegree"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref GB_GraphicBoxWithWidth : width height: height thickness: thickness cornorRoundingDegree: cornorRoundingDegree];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::GB_GraphicBoxWithWidthHeightthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref GB_GraphicBoxWithWidth : width height: height thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::GC_GraphicCircleWithDiameterThicknesslineColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger diameter = [args[@"diameter"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
              // enum arg
              PTZplColor lineColor = (PTZplColor) [args[@"lineColor"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref GC_GraphicCircleWithDiameter : diameter thickness: thickness lineColor: lineColor];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::GD_GraphicDiagonalLineWithWidthHeightthicknesslineColororientation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
              // enum arg
              PTZplColor lineColor = (PTZplColor) [args[@"lineColor"] integerValue];
              // enum arg
              PTZplDiagonalOrientation orientation = (PTZplDiagonalOrientation) [args[@"orientation"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref GD_GraphicDiagonalLineWithWidth : width height: height thickness: thickness lineColor: lineColor orientation: orientation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::GE_GraphicEllipseWithWidthHeightthicknesslineColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
              // enum arg
              PTZplColor lineColor = (PTZplColor) [args[@"lineColor"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref GE_GraphicEllipseWithWidth : width height: height thickness: thickness lineColor: lineColor];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::GS_GraphicSymbolWithOrientationHeightwidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplOrientation orientation = (PTZplOrientation) [args[@"orientation"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref GS_GraphicSymbolWithOrientation : orientation height: height width: width];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::GS_GraphicSymbol_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref GS_GraphicSymbol ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::ID_ImageDeleteWithObjectLocationObjectNameextension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFileLocation objectLocation = (PTZplFileLocation) [args[@"objectLocation"] integerValue];
              // jsonable arg
              NSString* objectName = (NSString*) args[@"objectName"];
              // jsonable arg
              NSString* extension = (NSString*) args[@"extension"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref ID_ImageDeleteWithObjectLocation : objectLocation objectName: objectName extension: extension];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::IL_ImageLoadWithObjectLocationObjectNameextension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFileLocation objectLocation = (PTZplFileLocation) [args[@"objectLocation"] integerValue];
              // jsonable arg
              NSString* objectName = (NSString*) args[@"objectName"];
              // jsonable arg
              NSString* extension = (NSString*) args[@"extension"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref IL_ImageLoadWithObjectLocation : objectLocation objectName: objectName extension: extension];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::IM_ImageMoveWithObjectLocationObjectNameextension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFileLocation objectLocation = (PTZplFileLocation) [args[@"objectLocation"] integerValue];
              // jsonable arg
              NSString* objectName = (NSString*) args[@"objectName"];
              // jsonable arg
              NSString* extension = (NSString*) args[@"extension"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref IM_ImageMoveWithObjectLocation : objectLocation objectName: objectName extension: extension];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::IS_ImageSaveWithObjectLocationObjectNameextensionprintAfterSorting_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFileLocation objectLocation = (PTZplFileLocation) [args[@"objectLocation"] integerValue];
              // jsonable arg
              NSString* objectName = (NSString*) args[@"objectName"];
              // jsonable arg
              NSString* extension = (NSString*) args[@"extension"];
              // enum arg
              PTZplBool printAfterSorting = (PTZplBool) [args[@"printAfterSorting"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref IS_ImageSaveWithObjectLocation : objectLocation objectName: objectName extension: extension printAfterSorting: printAfterSorting];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::JA_CancelAll_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref JA_CancelAll ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::JD_EnableCommunicationsDiagnostics_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref JD_EnableCommunicationsDiagnostics ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::JE_DisableDiagnostics_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref JE_DisableDiagnostics ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::JZ_SetReprintAfterError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplBool enable = (PTZplBool) [args[@"enable"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref JZ_SetReprintAfterError : enable];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::LH_LabelHomeWithXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger XPos = [args[@"XPos"] integerValue];
              // jsonable arg
              NSInteger YPos = [args[@"YPos"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref LH_LabelHomeWithXPos : XPos YPos: YPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::LL_LabelLength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger length = [args[@"length"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref LL_LabelLength : length];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::LR_LabelReversePrint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplBool reverse = (PTZplBool) [args[@"reverse"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref LR_LabelReversePrint : reverse];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::LS_LabelShift_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger shift = [args[@"shift"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref LS_LabelShift : shift];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::LT_LabelTop_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger top = [args[@"top"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref LT_LabelTop : top];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::MC_MapClear_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplBool clear = (PTZplBool) [args[@"clear"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref MC_MapClear : clear];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::ML_MaximumLabelLength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger length = [args[@"length"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref ML_MaximumLabelLength : length];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::MT_SetMediaType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplMediaType type = (PTZplMediaType) [args[@"type"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref MT_SetMediaType : type];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::ND_SetNetworkSettingWithIPSubnetMask_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* ipAddress = (NSString*) args[@"ipAddress"];
              // jsonable arg
              NSString* subnetMask = (NSString*) args[@"subnetMask"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref ND_SetNetworkSettingWithIP : ipAddress SubnetMask: subnetMask];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::PM_PrintLabelMirrorImage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplBool mirror = (PTZplBool) [args[@"mirror"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref PM_PrintLabelMirrorImage : mirror];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::PO_PrintOrientation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplPrintOrientation orientation = (PTZplPrintOrientation) [args[@"orientation"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref PO_PrintOrientation : orientation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::PP_ProgrammablePause_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref PP_ProgrammablePause ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::PQ_PrintQuantityPauseValuereplicateValueoverrided_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger quantity = [args[@"quantity"] integerValue];
              // jsonable arg
              NSInteger pauseValue = [args[@"pauseValue"] integerValue];
              // jsonable arg
              NSInteger replicateValue = [args[@"replicateValue"] integerValue];
              // enum arg
              PTZplBool overrided = (PTZplBool) [args[@"overrided"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref PQ_PrintQuantity : quantity pauseValue: pauseValue replicateValue: replicateValue overrided: overrided];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::PQ_PrintQuantity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger quantity = [args[@"quantity"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref PQ_PrintQuantity : quantity];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::PW_PrintWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger width = [args[@"width"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref PW_PrintWidth : width];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::SC_SetSerialCommunicationsWithBaudRateDataBitsParityStopBitsProtocolMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* baudRate = (NSString*) args[@"baudRate"];
              // jsonable arg
              NSString* dataBits = (NSString*) args[@"dataBits"];
              // jsonable arg
              NSString* parity = (NSString*) args[@"parity"];
              // jsonable arg
              NSString* stopBits = (NSString*) args[@"stopBits"];
              // jsonable arg
              NSString* protocolMode = (NSString*) args[@"protocolMode"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref SC_SetSerialCommunicationsWithBaudRate : baudRate DataBits: dataBits Parity: parity StopBits: stopBits ProtocolMode: protocolMode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::SD_SetDarkness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger darkness = [args[@"darkness"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref SD_SetDarkness : darkness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::SF_SerializationFieldWithMaskStringIncrementString_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* maskString = (NSString*) args[@"maskString"];
              // jsonable arg
              NSString* incrementString = (NSString*) args[@"incrementString"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref SF_SerializationFieldWithMaskString : maskString incrementString: incrementString];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::TO_TransferObjectWithSourceDeviceSourceObjectNamesourceExtensiondestinationDevicedestinationObjectNamedestinationExtension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFileLocation sourceDevice = (PTZplFileLocation) [args[@"sourceDevice"] integerValue];
              // jsonable arg
              NSString* sourceObjectName = (NSString*) args[@"sourceObjectName"];
              // jsonable arg
              NSString* sourceExtension = (NSString*) args[@"sourceExtension"];
              // enum arg
              PTZplFileLocation destinationDevice = (PTZplFileLocation) [args[@"destinationDevice"] integerValue];
              // jsonable arg
              NSString* destinationObjectName = (NSString*) args[@"destinationObjectName"];
              // jsonable arg
              NSString* destinationExtension = (NSString*) args[@"destinationExtension"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref TO_TransferObjectWithSourceDevice : sourceDevice sourceObjectName: sourceObjectName sourceExtension: sourceExtension destinationDevice: destinationDevice destinationObjectName: destinationObjectName destinationExtension: destinationExtension];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::XA_FormatStart_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref XA_FormatStart ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::XF_RecallFormatWithSourceDeviceImageNameextension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFileLocation sourceDevice = (PTZplFileLocation) [args[@"sourceDevice"] integerValue];
              // jsonable arg
              NSString* imageName = (NSString*) args[@"imageName"];
              // jsonable arg
              NSString* extension = (NSString*) args[@"extension"];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref XF_RecallFormatWithSourceDevice : sourceDevice imageName: imageName extension: extension];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::XG_RecallGraphicWithSourceDeviceImageNameextensionXAxisMagnificationYAxisMagnification_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTZplFileLocation sourceDevice = (PTZplFileLocation) [args[@"sourceDevice"] integerValue];
              // jsonable arg
              NSString* imageName = (NSString*) args[@"imageName"];
              // jsonable arg
              NSString* extension = (NSString*) args[@"extension"];
              // jsonable arg
              NSInteger XAxisMagnification = [args[@"XAxisMagnification"] integerValue];
              // jsonable arg
              NSInteger YAxisMagnification = [args[@"YAxisMagnification"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref XG_RecallGraphicWithSourceDevice : sourceDevice imageName: imageName extension: extension XAxisMagnification: XAxisMagnification YAxisMagnification: YAxisMagnification];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::XZ_FormatEnd_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref XZ_FormatEnd ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandZPL::PR_SetSpeedSlewSpeedbackfeedSpeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger speed = [args[@"speed"] integerValue];
              // jsonable arg
              NSInteger slewSpeed = [args[@"slewSpeed"] integerValue];
              // jsonable arg
              NSInteger backfeedSpeed = [args[@"backfeedSpeed"] integerValue];
      
              // ref
              PTCommandZPL* ref = (PTCommandZPL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref PR_SetSpeed : speed slewSpeed: slewSpeed backfeedSpeed: backfeedSpeed];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::printSelfInspectionPage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref printSelfInspectionPage ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclGetPaperStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclGetPaperStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::getFirmwareVersion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref getFirmwareVersion ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclTurnOnPrintStatusCallBack_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL flag = [args[@"flag"] boolValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclTurnOnPrintStatusCallBack : flag];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclUnderlineON_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclUnderlineON ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclUnderlineOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclUnderlineOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclGetPrinterSN_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclGetPrinterSN ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclPaperTypeWithType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTCPCLPaperType type = (PTCPCLPaperType) [args[@"type"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPaperTypeWithType : type];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::setPrinterPaperTypeFor4Inch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTCPCLNewPaperType type = (PTCPCLNewPaperType) [args[@"type"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setPrinterPaperTypeFor4Inch : type];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclLabelWithOffsetHResvResheightquantity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
              // enum arg
              PTCPCLLabelResolution hRes = (PTCPCLLabelResolution) [args[@"hRes"] integerValue];
              // enum arg
              PTCPCLLabelResolution vRes = (PTCPCLLabelResolution) [args[@"vRes"] integerValue];
              // jsonable arg
              NSInteger height = [args[@"height"] integerValue];
              // jsonable arg
              NSInteger quantity = [args[@"quantity"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLabelWithOffset : offset hRes: hRes vRes: vRes height: height quantity: quantity];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclPageWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger pageWidth = [args[@"pageWidth"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPageWidth : pageWidth];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclBarcodeTextWithFontFontSizeoffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTCPCLTextFontName font = (PTCPCLTextFontName) [args[@"font"] integerValue];
              // jsonable arg
              NSInteger fontSize = [args[@"fontSize"] integerValue];
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeTextWithFont : font fontSize: fontSize offset: offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclBarcodeTextWithTrueTypeFontXScaleyScaleoffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTCPCLTextFontName font = (PTCPCLTextFontName) [args[@"font"] integerValue];
              // jsonable arg
              NSInteger xScale = [args[@"xScale"] integerValue];
              // jsonable arg
              NSInteger yScale = [args[@"yScale"] integerValue];
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeTextWithTrueTypeFont : font xScale: xScale yScale: yScale offset: offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclBarcodeTextOff_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeTextOff ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclBarcodeQRcodeWithXPosYPosmodelunitWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // enum arg
              PTCPCLQRCodeModel model = (PTCPCLQRCodeModel) [args[@"model"] integerValue];
              // enum arg
              PTCPCLQRCodeUnitWidth unitWidth = (PTCPCLQRCodeUnitWidth) [args[@"unitWidth"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeQRcodeWithXPos : xPos yPos: yPos model: model unitWidth: unitWidth];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclBarcodeVerticalQRcodeWithXPosYPosmodelunitWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // enum arg
              PTCPCLQRCodeModel model = (PTCPCLQRCodeModel) [args[@"model"] integerValue];
              // enum arg
              PTCPCLQRCodeUnitWidth unitWidth = (PTCPCLQRCodeUnitWidth) [args[@"unitWidth"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeVerticalQRcodeWithXPos : xPos yPos: yPos model: model unitWidth: unitWidth];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclBarcodeQRcodeEnd_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBarcodeQRcodeEnd ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclPDF417CodeWithDirectionXPosyPosxDotyDotcolumnsrowseccbinaryModel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTCPCLPDF417Direction directon = (PTCPCLPDF417Direction) [args[@"directon"] integerValue];
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger xDot = [args[@"xDot"] integerValue];
              // jsonable arg
              NSInteger yDot = [args[@"yDot"] integerValue];
              // jsonable arg
              NSInteger columns = [args[@"columns"] integerValue];
              // jsonable arg
              NSInteger rows = [args[@"rows"] integerValue];
              // enum arg
              PTCPCLPDF417ErrLevel ecc = (PTCPCLPDF417ErrLevel) [args[@"ecc"] integerValue];
              // enum arg
              PTCPCLPDF417Binary binaryModel = (PTCPCLPDF417Binary) [args[@"binaryModel"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPDF417CodeWithDirection : directon xPos: xPos yPos: yPos xDot: xDot yDot: yDot columns: columns rows: rows ecc: ecc binaryModel: binaryModel];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclPDF417codeEnd_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPDF417codeEnd ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclBoxWithXPosYPosxEndyEndthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger xEnd = [args[@"xEnd"] integerValue];
              // jsonable arg
              NSInteger yEnd = [args[@"yEnd"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclBoxWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclLineWithXPosYPosxEndyEndthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger xEnd = [args[@"xEnd"] integerValue];
              // jsonable arg
              NSInteger yEnd = [args[@"yEnd"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclInverseLineWithXPosYPosxEndyEndthickness_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
              // jsonable arg
              NSInteger xEnd = [args[@"xEnd"] integerValue];
              // jsonable arg
              NSInteger yEnd = [args[@"yEnd"] integerValue];
              // jsonable arg
              NSInteger thickness = [args[@"thickness"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclInverseLineWithXPos : xPos yPos: yPos xEnd: xEnd yEnd: yEnd thickness: thickness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclConcatStartWithXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclConcatStartWithXPos : xPos yPos: yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclConcatVerticalStartWithXPosYPos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger xPos = [args[@"xPos"] integerValue];
              // jsonable arg
              NSInteger yPos = [args[@"yPos"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclConcatVerticalStartWithXPos : xPos yPos: yPos];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclConcatEnd_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclConcatEnd ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclPrint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPrint ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclPoPrint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPoPrint ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclCenterWithRange_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger range = [args[@"range"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclCenterWithRange : range];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclCenter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclCenter ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclLeft__int_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger range = [args[@"range"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLeft : range];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclLeft_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLeft ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclRight__int_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger right = [args[@"right"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclRight : right];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclRight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclRight ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclMoveWithRightUp_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger right = [args[@"right"] integerValue];
              // jsonable arg
              NSInteger up = [args[@"up"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclMoveWithRight : right up: up];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclTempMoveWithRightUp_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger right = [args[@"right"] integerValue];
              // jsonable arg
              NSInteger up = [args[@"up"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclTempMoveWithRight : right up: up];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclMultiLineStartWithLineHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger lineHeight = [args[@"lineHeight"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclMultiLineStartWithLineHeight : lineHeight];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclMultiLineEnd_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclMultiLineEnd ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclRotate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger degrees = [args[@"degrees"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclRotate : degrees];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclSetBold_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTCPCLTextBold boldness = (PTCPCLTextBold) [args[@"boldness"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetBold : boldness];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclSetSpacing_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger spacing = [args[@"spacing"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetSpacing : spacing];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclSetMagWithWidthHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              PTCPCLFontScale width = (PTCPCLFontScale) [args[@"width"] integerValue];
              // enum arg
              PTCPCLFontScale height = (PTCPCLFontScale) [args[@"height"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetMagWithWidth : width height: height];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclSetBackgroundBlacknessValue_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger value = [args[@"value"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetBackgroundBlacknessValue : value];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclUtilitySession_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclUtilitySession ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclLineMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLineMode ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclReWindOFF_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclReWindOFF ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclLineMargin_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger offset = [args[@"offset"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLineMargin : offset];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclLineFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclLineFeed ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger amount = [args[@"amount"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclFeed : amount];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclPostFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger amount = [args[@"amount"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPostFeed : amount];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclPreFeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger amount = [args[@"amount"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclPreFeed : amount];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclReverse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger amount = [args[@"amount"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclReverse : amount];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclSetFeedSkip_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger length = [args[@"length"] integerValue];
              // jsonable arg
              NSInteger skip = [args[@"skip"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetFeed : length skip: skip];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclSpeed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger value = [args[@"value"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSpeed : value];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclForm_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclForm ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclTone_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger value = [args[@"value"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclTone : value];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclTurn_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger degrees = [args[@"degrees"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclTurn : degrees];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclOnFeed_Feed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclOnFeed_Feed ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclOnFeed_Reprint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclOnFeed_Reprint ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclOnFeed_Ignore_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclOnFeed_Ignore ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclSetArabicTransformFunction_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger function = [args[@"function"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetArabicTransformFunction : function];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclGetArabicTransformStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclGetArabicTransformStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclSetThaiTransformStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger status = [args[@"status"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetThaiTransformStatus : status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclSetVietnameseTransformFunction_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger function = [args[@"function"] integerValue];
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclSetVietnameseTransformFunction : function];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTCommandCPCL::cpclGetVietnameseTransformStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTCommandCPCL* ref = (PTCommandCPCL*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cpclGetVietnameseTransformStatus ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::share_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
        
      
              // invoke native method
              PTDispatcher* result = [PTDispatcher share];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::sendData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref sendData : data];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::pauseWriteData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref pauseWriteData ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::resumeWriteData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref resumeWriteData ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::scanBluetooth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref scanBluetooth ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::stopScanBluetooth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref stopScanBluetooth ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::connectPrinter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              PTPrinter* printer = (PTPrinter*) HEAP[@([args[@"printer"] integerValue])];
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref connectPrinter : printer];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::unconnectPrinter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              PTPrinter* printer = (PTPrinter*) HEAP[@([args[@"printer"] integerValue])];
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref unconnectPrinter : printer];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::getBluetoothStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref getBluetoothStatus];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::setupBleConnectTimeout_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              double timeout = [args[@"timeout"] doubleValue];
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setupBleConnectTimeout : timeout];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::unregisterDelegate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref unregisterDelegate ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTDispatcher::SDKBuildTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSString* result = [ref SDKBuildTime];
      
              // result
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"PTRouter::get_broadcastIP": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::get_broadcastIP");
          }
      
          // ref object
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.broadcastIP;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTRouter::get_localIP": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::get_localIP");
          }
      
          // ref object
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.localIP;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTRouter::get_netmask": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::get_netmask");
          }
      
          // ref object
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.netmask;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTRouter::get_interface": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::get_interface");
          }
      
          // ref object
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.interface;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTRouter::get_gateway": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::get_gateway");
          }
      
          // ref object
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.gateway;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTRouter::get_connected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::get_connected");
          }
      
          // ref object
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.connected;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"PTRouter::get_MAC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::get_MAC");
          }
      
          // ref object
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.MAC;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTRouter::get_SSID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::get_SSID");
          }
      
          // ref object
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.SSID;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTRouter::get_SSIDDATA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::get_SSIDDATA");
          }
      
          // ref object
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.SSIDDATA;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_express_company": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_express_company");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.express_company;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_delivery_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_delivery_number");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.delivery_number;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_order_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_order_number");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.order_number;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_distributing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_distributing");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.distributing;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_barcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_barcode");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.barcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_barcode_text": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_barcode_text");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.barcode_text;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_qrcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_qrcode");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.qrcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_qrcode_text": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_qrcode_text");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.qrcode_text;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_receiver_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_receiver_name");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.receiver_name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_receiver_phone": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_receiver_phone");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.receiver_phone;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_receiver_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_receiver_address");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.receiver_address;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_receiver_message": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_receiver_message");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.receiver_message;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_sender_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_sender_name");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.sender_name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_sender_phone": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_sender_phone");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.sender_phone;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_sender_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_sender_address");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.sender_address;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_sender_message": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_sender_message");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.sender_message;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_article_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_article_name");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.article_name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_article_weight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_article_weight");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.article_weight;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_amount_declare": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_amount_declare");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.amount_declare;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_amount_paid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_amount_paid");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.amount_paid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTLabel::get_amount_paid_advance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::get_amount_paid_advance");
          }
      
          // ref object
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.amount_paid_advance;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTDispatcher::get_printerConnected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTDispatcher::get_printerConnected");
          }
      
          // ref object
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          PTPrinter* result = ref.printerConnected;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"PTDispatcher::get_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTDispatcher::get_mode");
          }
      
          // ref object
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          PTDispatchMode result = ref.mode;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"PTPrinter::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::get_name");
          }
      
          // ref object
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTPrinter::get_mac": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::get_mac");
          }
      
          // ref object
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.mac;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTPrinter::get_module": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::get_module");
          }
      
          // ref object
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          PTPrinterModule result = ref.module;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"PTPrinter::get_uuid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::get_uuid");
          }
      
          // ref object
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uuid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTPrinter::get_ip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::get_ip");
          }
      
          // ref object
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.ip;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTPrinter::get_port": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::get_port");
          }
      
          // ref object
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.port;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"PTRouter::get_broadcastIP_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.broadcastIP;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTRouter::get_localIP_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.localIP;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTRouter::get_netmask_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.netmask;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTRouter::get_interface_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.interface;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTRouter::get_gateway_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.gateway;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTRouter::get_connected_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.connected;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTRouter::get_MAC_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.MAC;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTRouter::get_SSID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.SSID;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTRouter::get_SSIDDATA_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.SSIDDATA;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_express_company_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.express_company;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_delivery_number_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.delivery_number;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_order_number_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.order_number;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_distributing_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.distributing;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_barcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.barcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_barcode_text_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.barcode_text;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_qrcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.qrcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_qrcode_text_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.qrcode_text;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_receiver_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.receiver_name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_receiver_phone_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.receiver_phone;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_receiver_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.receiver_address;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_receiver_message_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.receiver_message;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_sender_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.sender_name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_sender_phone_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.sender_phone;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_sender_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.sender_address;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_sender_message_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.sender_message;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_article_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.article_name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_article_weight_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.article_weight;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_amount_declare_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.amount_declare;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_amount_paid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.amount_paid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTLabel::get_amount_paid_advance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.amount_paid_advance;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTDispatcher::get_printerConnected_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              PTPrinter* result = ref.printerConnected;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTDispatcher::get_mode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              PTDispatchMode result = ref.mode;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTPrinter::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTPrinter::get_mac_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.mac;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTPrinter::get_module_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              PTPrinterModule result = ref.module;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTPrinter::get_uuid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uuid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTPrinter::get_ip_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.ip;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTPrinter::get_port_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.port;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"PTRouter::set_broadcastIP": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::set_broadcastIP");
          }
      
          // args
          // jsonable arg
          NSString* broadcastIP = (NSString*) args[@"broadcastIP"];
      
          // ref
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.broadcastIP = broadcastIP;
          methodResult(@"success");
      },
      
      @"PTRouter::set_localIP": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::set_localIP");
          }
      
          // args
          // jsonable arg
          NSString* localIP = (NSString*) args[@"localIP"];
      
          // ref
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.localIP = localIP;
          methodResult(@"success");
      },
      
      @"PTRouter::set_netmask": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::set_netmask");
          }
      
          // args
          // jsonable arg
          NSString* netmask = (NSString*) args[@"netmask"];
      
          // ref
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.netmask = netmask;
          methodResult(@"success");
      },
      
      @"PTRouter::set_interface": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::set_interface");
          }
      
          // args
          // jsonable arg
          NSString* interface = (NSString*) args[@"interface"];
      
          // ref
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.interface = interface;
          methodResult(@"success");
      },
      
      @"PTRouter::set_gateway": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::set_gateway");
          }
      
          // args
          // jsonable arg
          NSString* gateway = (NSString*) args[@"gateway"];
      
          // ref
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.gateway = gateway;
          methodResult(@"success");
      },
      
      @"PTRouter::set_connected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::set_connected");
          }
      
          // args
          // jsonable arg
          BOOL connected = [args[@"connected"] boolValue];
      
          // ref
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.connected = connected;
          methodResult(@"success");
      },
      
      @"PTRouter::set_MAC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::set_MAC");
          }
      
          // args
          // jsonable arg
          NSString* MAC = (NSString*) args[@"MAC"];
      
          // ref
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.MAC = MAC;
          methodResult(@"success");
      },
      
      @"PTRouter::set_SSID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::set_SSID");
          }
      
          // args
          // jsonable arg
          NSString* SSID = (NSString*) args[@"SSID"];
      
          // ref
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.SSID = SSID;
          methodResult(@"success");
      },
      
      @"PTRouter::set_SSIDDATA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTRouter::set_SSIDDATA");
          }
      
          // args
          // jsonable arg
          NSString* SSIDDATA = (NSString*) args[@"SSIDDATA"];
      
          // ref
          PTRouter* ref = (PTRouter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.SSIDDATA = SSIDDATA;
          methodResult(@"success");
      },
      
      @"PTLabel::set_express_company": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_express_company");
          }
      
          // args
          // jsonable arg
          NSString* express_company = (NSString*) args[@"express_company"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.express_company = express_company;
          methodResult(@"success");
      },
      
      @"PTLabel::set_delivery_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_delivery_number");
          }
      
          // args
          // jsonable arg
          NSString* delivery_number = (NSString*) args[@"delivery_number"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delivery_number = delivery_number;
          methodResult(@"success");
      },
      
      @"PTLabel::set_order_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_order_number");
          }
      
          // args
          // jsonable arg
          NSString* order_number = (NSString*) args[@"order_number"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.order_number = order_number;
          methodResult(@"success");
      },
      
      @"PTLabel::set_distributing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_distributing");
          }
      
          // args
          // jsonable arg
          NSString* distributing = (NSString*) args[@"distributing"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distributing = distributing;
          methodResult(@"success");
      },
      
      @"PTLabel::set_barcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_barcode");
          }
      
          // args
          // jsonable arg
          NSString* barcode = (NSString*) args[@"barcode"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.barcode = barcode;
          methodResult(@"success");
      },
      
      @"PTLabel::set_barcode_text": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_barcode_text");
          }
      
          // args
          // jsonable arg
          NSString* barcode_text = (NSString*) args[@"barcode_text"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.barcode_text = barcode_text;
          methodResult(@"success");
      },
      
      @"PTLabel::set_qrcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_qrcode");
          }
      
          // args
          // jsonable arg
          NSString* qrcode = (NSString*) args[@"qrcode"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.qrcode = qrcode;
          methodResult(@"success");
      },
      
      @"PTLabel::set_qrcode_text": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_qrcode_text");
          }
      
          // args
          // jsonable arg
          NSString* qrcode_text = (NSString*) args[@"qrcode_text"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.qrcode_text = qrcode_text;
          methodResult(@"success");
      },
      
      @"PTLabel::set_receiver_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_receiver_name");
          }
      
          // args
          // jsonable arg
          NSString* receiver_name = (NSString*) args[@"receiver_name"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.receiver_name = receiver_name;
          methodResult(@"success");
      },
      
      @"PTLabel::set_receiver_phone": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_receiver_phone");
          }
      
          // args
          // jsonable arg
          NSString* receiver_phone = (NSString*) args[@"receiver_phone"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.receiver_phone = receiver_phone;
          methodResult(@"success");
      },
      
      @"PTLabel::set_receiver_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_receiver_address");
          }
      
          // args
          // jsonable arg
          NSString* receiver_address = (NSString*) args[@"receiver_address"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.receiver_address = receiver_address;
          methodResult(@"success");
      },
      
      @"PTLabel::set_receiver_message": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_receiver_message");
          }
      
          // args
          // jsonable arg
          NSString* receiver_message = (NSString*) args[@"receiver_message"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.receiver_message = receiver_message;
          methodResult(@"success");
      },
      
      @"PTLabel::set_sender_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_sender_name");
          }
      
          // args
          // jsonable arg
          NSString* sender_name = (NSString*) args[@"sender_name"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sender_name = sender_name;
          methodResult(@"success");
      },
      
      @"PTLabel::set_sender_phone": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_sender_phone");
          }
      
          // args
          // jsonable arg
          NSString* sender_phone = (NSString*) args[@"sender_phone"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sender_phone = sender_phone;
          methodResult(@"success");
      },
      
      @"PTLabel::set_sender_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_sender_address");
          }
      
          // args
          // jsonable arg
          NSString* sender_address = (NSString*) args[@"sender_address"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sender_address = sender_address;
          methodResult(@"success");
      },
      
      @"PTLabel::set_sender_message": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_sender_message");
          }
      
          // args
          // jsonable arg
          NSString* sender_message = (NSString*) args[@"sender_message"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sender_message = sender_message;
          methodResult(@"success");
      },
      
      @"PTLabel::set_article_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_article_name");
          }
      
          // args
          // jsonable arg
          NSString* article_name = (NSString*) args[@"article_name"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.article_name = article_name;
          methodResult(@"success");
      },
      
      @"PTLabel::set_article_weight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_article_weight");
          }
      
          // args
          // jsonable arg
          NSString* article_weight = (NSString*) args[@"article_weight"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.article_weight = article_weight;
          methodResult(@"success");
      },
      
      @"PTLabel::set_amount_declare": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_amount_declare");
          }
      
          // args
          // jsonable arg
          NSString* amount_declare = (NSString*) args[@"amount_declare"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.amount_declare = amount_declare;
          methodResult(@"success");
      },
      
      @"PTLabel::set_amount_paid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_amount_paid");
          }
      
          // args
          // jsonable arg
          NSString* amount_paid = (NSString*) args[@"amount_paid"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.amount_paid = amount_paid;
          methodResult(@"success");
      },
      
      @"PTLabel::set_amount_paid_advance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTLabel::set_amount_paid_advance");
          }
      
          // args
          // jsonable arg
          NSString* amount_paid_advance = (NSString*) args[@"amount_paid_advance"];
      
          // ref
          PTLabel* ref = (PTLabel*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.amount_paid_advance = amount_paid_advance;
          methodResult(@"success");
      },
      
      @"PTDispatcher::set_printerConnected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTDispatcher::set_printerConnected");
          }
      
          // args
          // ref arg
          PTPrinter* printerConnected = (PTPrinter*) HEAP[@([args[@"printerConnected"] integerValue])];
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.printerConnected = printerConnected;
          methodResult(@"success");
      },
      
      @"PTDispatcher::set_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTDispatcher::set_mode");
          }
      
          // args
          // enum arg
          PTDispatchMode mode = (PTDispatchMode) [args[@"mode"] integerValue];
      
          // ref
          PTDispatcher* ref = (PTDispatcher*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.mode = mode;
          methodResult(@"success");
      },
      
      @"PTPrinter::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"PTPrinter::set_mac": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::set_mac");
          }
      
          // args
          // jsonable arg
          NSString* mac = (NSString*) args[@"mac"];
      
          // ref
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.mac = mac;
          methodResult(@"success");
      },
      
      @"PTPrinter::set_module": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::set_module");
          }
      
          // args
          // enum arg
          PTPrinterModule module = (PTPrinterModule) [args[@"module"] integerValue];
      
          // ref
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.module = module;
          methodResult(@"success");
      },
      
      @"PTPrinter::set_uuid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::set_uuid");
          }
      
          // args
          // jsonable arg
          NSString* uuid = (NSString*) args[@"uuid"];
      
          // ref
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uuid = uuid;
          methodResult(@"success");
      },
      
      @"PTPrinter::set_ip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::set_ip");
          }
      
          // args
          // jsonable arg
          NSString* ip = (NSString*) args[@"ip"];
      
          // ref
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.ip = ip;
          methodResult(@"success");
      },
      
      @"PTPrinter::set_port": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"PTPrinter::set_port");
          }
      
          // args
          // jsonable arg
          NSString* port = (NSString*) args[@"port"];
      
          // ref
          PTPrinter* ref = (PTPrinter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.port = port;
          methodResult(@"success");
      },
      
      @"RefClass::isKindOfPTOldCommandTSPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTOldCommandTSPL class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTCommandCommon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTCommandCommon class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTRouter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTRouter class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTBitmap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTBitmap class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTCommandESC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTCommandESC class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTCommandTSPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTCommandTSPL class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTLabel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTLabel class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTEncode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTEncode class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTOldCommandCPCL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTOldCommandCPCL class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTCommandZPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTCommandZPL class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTCommandCPCL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTCommandCPCL class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTDispatcher": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTDispatcher class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfPTPrinter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[PTPrinter class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::asPTOldCommandTSPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTOldCommandTSPL *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTCommandCommon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTCommandCommon *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTRouter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTRouter *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTBitmap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTBitmap *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTCommandESC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTCommandESC *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTCommandTSPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTCommandTSPL *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTLabel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTLabel *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTEncode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTEncode *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTOldCommandCPCL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTOldCommandCPCL *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTCommandZPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTCommandZPL *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTCommandCPCL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTCommandCPCL *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTDispatcher": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTDispatcher *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asPTPrinter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (PTPrinter *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"ObjectFactory::createPTOldCommandTSPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTOldCommandTSPL");
          }
      
          PTOldCommandTSPL* ref = [[PTOldCommandTSPL alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTCommandCommon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTCommandCommon");
          }
      
          PTCommandCommon* ref = [[PTCommandCommon alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTRouter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTRouter");
          }
      
          PTRouter* ref = [[PTRouter alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTBitmap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTBitmap");
          }
      
          PTBitmap* ref = [[PTBitmap alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTCommandESC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTCommandESC");
          }
      
          PTCommandESC* ref = [[PTCommandESC alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTCommandTSPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTCommandTSPL");
          }
      
          PTCommandTSPL* ref = [[PTCommandTSPL alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTLabel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTLabel");
          }
      
          PTLabel* ref = [[PTLabel alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTEncode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTEncode");
          }
      
          PTEncode* ref = [[PTEncode alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTOldCommandCPCL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTOldCommandCPCL");
          }
      
          PTOldCommandCPCL* ref = [[PTOldCommandCPCL alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTCommandZPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTCommandZPL");
          }
      
          PTCommandZPL* ref = [[PTCommandZPL alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTCommandCPCL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTCommandCPCL");
          }
      
          PTCommandCPCL* ref = [[PTCommandCPCL alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTDispatcher": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTDispatcher");
          }
      
          PTDispatcher* ref = [[PTDispatcher alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createPTPrinter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createPTPrinter");
          }
      
          PTPrinter* ref = [[PTPrinter alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTOldCommandTSPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTOldCommandTSPL* ref = [[PTOldCommandTSPL alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTCommandCommon": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTCommandCommon* ref = [[PTCommandCommon alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTRouter": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTRouter* ref = [[PTRouter alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTBitmap": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTBitmap* ref = [[PTBitmap alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTCommandESC": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTCommandESC* ref = [[PTCommandESC alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTCommandTSPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTCommandTSPL* ref = [[PTCommandTSPL alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTLabel": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTLabel* ref = [[PTLabel alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTEncode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTEncode* ref = [[PTEncode alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTOldCommandCPCL": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTOldCommandCPCL* ref = [[PTOldCommandCPCL alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTCommandZPL": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTCommandZPL* ref = [[PTCommandZPL alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTCommandCPCL": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTCommandCPCL* ref = [[PTCommandCPCL alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTDispatcher": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTDispatcher* ref = [[PTDispatcher alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchPTPrinter": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              PTPrinter* ref = [[PTPrinter alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/hanyin_printer_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[HanyinPrinterFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, [methodCall arguments], methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们


@end