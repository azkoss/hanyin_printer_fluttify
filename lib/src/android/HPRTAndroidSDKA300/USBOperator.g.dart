// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class HPRTAndroidSDKA300_USBOperator extends java_lang_Object with HPRTAndroidSDKA300_IPort {
  //region constants
  
  //endregion

  //region creators
  static Future<HPRTAndroidSDKA300_USBOperator> create__android_content_Context(android_content_Context var1) async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createHPRTAndroidSDKA300_USBOperator__android_content_Context', {"var1": var1.refId});
    final object = HPRTAndroidSDKA300_USBOperator()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<HPRTAndroidSDKA300_USBOperator> create__android_content_Context__String(android_content_Context var1, String var2) async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createHPRTAndroidSDKA300_USBOperator__android_content_Context__String', {"var1": var1.refId, "var2": var2});
    final object = HPRTAndroidSDKA300_USBOperator()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<HPRTAndroidSDKA300_USBOperator>> create_batch__android_content_Context(List<android_content_Context> var1) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchHPRTAndroidSDKA300_USBOperator__android_content_Context', [for (int i = 0; i < var1.length; i++) {"var1": var1[i].refId}]);
  
    final List<HPRTAndroidSDKA300_USBOperator> typedResult = resultBatch.map((result) => HPRTAndroidSDKA300_USBOperator()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<HPRTAndroidSDKA300_USBOperator>> create_batch__android_content_Context__String(List<android_content_Context> var1, List<String> var2) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchHPRTAndroidSDKA300_USBOperator__android_content_Context__String', [for (int i = 0; i < var1.length; i++) {"var1": var1[i].refId, "var2": var2[i]}]);
  
    final List<HPRTAndroidSDKA300_USBOperator> typedResult = resultBatch.map((result) => HPRTAndroidSDKA300_USBOperator()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_intPermissionState() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.USBOperator::get_intPermissionState", {'refId': refId});
  
    return result;
  }
  
  Future<android_content_Intent> get_intent() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.USBOperator::get_intent", {'refId': refId});
    kNativeObjectPool.add(android_content_Intent()..refId = result..tag = 'hanyin_printer_fluttify');
    return android_content_Intent()..refId = result..tag = 'hanyin_printer_fluttify';
  }
  
  //endregion

  //region setters
  Future<void> set_intPermissionState(int intPermissionState) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.USBOperator::set_intPermissionState', {'refId': refId, "intPermissionState": intPermissionState});
  
  
  }
  
  Future<void> set_intent(android_content_Intent intent) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.USBOperator::set_intent', {'refId': refId, "intent": intent.refId});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension HPRTAndroidSDKA300_USBOperator_Batch on List<HPRTAndroidSDKA300_USBOperator> {
  //region getters
  Future<List<int>> get_intPermissionState_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.USBOperator::get_intPermissionState_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<android_content_Intent>> get_intent_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.USBOperator::get_intent_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => android_content_Intent()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}