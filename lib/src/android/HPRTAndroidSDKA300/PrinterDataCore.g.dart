// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class HPRTAndroidSDKA300_PrinterDataCore extends java_lang_Object  {
  //region constants
  
  //endregion

  //region creators
  static Future<HPRTAndroidSDKA300_PrinterDataCore> create__() async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createHPRTAndroidSDKA300_PrinterDataCore__');
    final object = HPRTAndroidSDKA300_PrinterDataCore()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<HPRTAndroidSDKA300_PrinterDataCore>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchHPRTAndroidSDKA300_PrinterDataCore__', {'length': length});
  
    final List<HPRTAndroidSDKA300_PrinterDataCore> typedResult = resultBatch.map((result) => HPRTAndroidSDKA300_PrinterDataCore()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_BitmapWidth() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_BitmapWidth", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_PrintDataHeight() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_PrintDataHeight", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_HalftoneMode() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_HalftoneMode", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_ScaleMode() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_ScaleMode", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_CompressMode() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_CompressMode", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_BitmapWidth(int BitmapWidth) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.PrinterDataCore::set_BitmapWidth', {'refId': refId, "BitmapWidth": BitmapWidth});
  
  
  }
  
  Future<void> set_PrintDataHeight(int PrintDataHeight) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.PrinterDataCore::set_PrintDataHeight', {'refId': refId, "PrintDataHeight": PrintDataHeight});
  
  
  }
  
  Future<void> set_HalftoneMode(int HalftoneMode) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.PrinterDataCore::set_HalftoneMode', {'refId': refId, "HalftoneMode": HalftoneMode});
  
  
  }
  
  Future<void> set_ScaleMode(int ScaleMode) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.PrinterDataCore::set_ScaleMode', {'refId': refId, "ScaleMode": ScaleMode});
  
  
  }
  
  Future<void> set_CompressMode(int CompressMode) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.PrinterDataCore::set_CompressMode', {'refId': refId, "CompressMode": CompressMode});
  
  
  }
  
  //endregion

  //region methods
  Future<Uint8List> PrintDataFormat(android_graphics_Bitmap var1) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: HPRTAndroidSDKA300.PrinterDataCore@$refId::PrintDataFormat([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.PrinterDataCore::PrintDataFormat', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return (result as List).cast<int>();
    }
  }
  
  Future<Uint8List> sysCopy(Uint8List var1) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: HPRTAndroidSDKA300.PrinterDataCore@$refId::sysCopy([\'var1\':$var1])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.PrinterDataCore::sysCopy', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return (result as List).cast<int>();
    }
  }
  
  //endregion
}

extension HPRTAndroidSDKA300_PrinterDataCore_Batch on List<HPRTAndroidSDKA300_PrinterDataCore> {
  //region getters
  Future<List<int>> get_BitmapWidth_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_BitmapWidth_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_PrintDataHeight_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_PrintDataHeight_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_HalftoneMode_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_HalftoneMode_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_ScaleMode_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_ScaleMode_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_CompressMode_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("HPRTAndroidSDKA300.PrinterDataCore::get_CompressMode_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region methods
  Future<List<Uint8List>> PrintDataFormat_batch(List<android_graphics_Bitmap> var1) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.PrinterDataCore::PrintDataFormat_batch', [for (int i = 0; i < this.length; i++) {"var1": var1[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => (result as List).cast<int>()).toList();
    
      return typedResult;
    }
  }
  
  Future<List<Uint8List>> sysCopy_batch(List<Uint8List> var1) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('HPRTAndroidSDKA300.PrinterDataCore::sysCopy_batch', [for (int i = 0; i < this.length; i++) {"var1": var1[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => (result as List).cast<int>()).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}