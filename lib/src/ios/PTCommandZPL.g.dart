// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class PTCommandZPL extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<PTCommandZPL> create__() async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createPTCommandZPL');
    final object = PTCommandZPL()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<PTCommandZPL>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchPTCommandZPL', {'length': length});
  
    final List<PTCommandZPL> typedResult = resultBatch.map((result) => PTCommandZPL()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  Future<void> printSelfTest() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::printSelfTest([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::printSelfTest', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> zplLineFeed() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::zplLineFeed([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::zplLineFeed', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> A_SetFontFieldOrientationcharacterHeightwidth(PTZplFont fontName, PTZplOrientation fieldOrientation, int characterHeight, int width) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::A_SetFont([\'characterHeight\':$characterHeight, \'width\':$width])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontFieldOrientationcharacterHeightwidth', {"fontName": fontName.index, "fieldOrientation": fieldOrientation.index, "characterHeight": characterHeight, "width": width, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> A_SetFontFieldOrientation(PTZplFont fontName, PTZplOrientation fieldOrientation) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::A_SetFont([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontFieldOrientation', {"fontName": fontName.index, "fieldOrientation": fieldOrientation.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> A_SetFontCharacterHeightwidth(PTZplFont fontName, int characterHeight, int width) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::A_SetFont([\'characterHeight\':$characterHeight, \'width\':$width])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontCharacterHeightwidth', {"fontName": fontName.index, "characterHeight": characterHeight, "width": width, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> A_SetFont(PTZplFont fontName) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::A_SetFont([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFont', {"fontName": fontName.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> A_SetFontWithOrientationHeightwidthlocationfontNameextension(PTZplOrientation orientation, int height, int width, PTZplFileLocation location, String fontName, String extension) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::A_SetFontWithOrientation([\'height\':$height, \'width\':$width, \'fontName\':$fontName, \'extension\':$extension])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontWithOrientationHeightwidthlocationfontNameextension', {"orientation": orientation.index, "height": height, "width": width, "location": location.index, "fontName": fontName, "extension": extension, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> A_SetFontWithOrientationHeightwidth(PTZplOrientation orientation, int height, int width) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::A_SetFontWithOrientation([\'height\':$height, \'width\':$width])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontWithOrientationHeightwidth', {"orientation": orientation.index, "height": height, "width": width, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> B0_BacodeAztecWithOrientationMagnificationFactorisContainECICerrorAndSymbolisMenuSymbolappendSymbolNumberappendOptionalID(PTZplOrientation orientation, int magnificationFactor, PTZplBool isContainECIC, int errorAndSymbol, PTZplBool isMenuSymbol, int appendSymbolNumber, String appendOptionalID) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::B0_BacodeAztecWithOrientation([\'magnificationFactor\':$magnificationFactor, \'errorAndSymbol\':$errorAndSymbol, \'appendSymbolNumber\':$appendSymbolNumber, \'appendOptionalID\':$appendOptionalID])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B0_BacodeAztecWithOrientationMagnificationFactorisContainECICerrorAndSymbolisMenuSymbolappendSymbolNumberappendOptionalID', {"orientation": orientation.index, "magnificationFactor": magnificationFactor, "isContainECIC": isContainECIC.index, "errorAndSymbol": errorAndSymbol, "isMenuSymbol": isMenuSymbol.index, "appendSymbolNumber": appendSymbolNumber, "appendOptionalID": appendOptionalID, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> B1_BacodeCode11WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode(PTZplOrientation orientation, PTZplBool checkDigit, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::B1_BacodeCode11WithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B1_BacodeCode11WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode', {"orientation": orientation.index, "checkDigit": checkDigit.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> B3_BacodeCode39WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode(PTZplOrientation orientation, PTZplBool checkDigit, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::B3_BacodeCode39WithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B3_BacodeCode39WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode', {"orientation": orientation.index, "checkDigit": checkDigit.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> B4_BacodePlanetCodeWithOrientationBarcodeHeightinterpretationLineStyle(PTZplOrientation orientation, int barcodeHeight, PTCode49InterpretationLineStyle style) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::B4_BacodePlanetCodeWithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B4_BacodePlanetCodeWithOrientationBarcodeHeightinterpretationLineStyle', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "style": style.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> B7_BarcodePDF417CodeWithOrientationBarcodeHeightsecurityLevelcolumnsrowstruncation(PTZplOrientation orientation, int barcodeHeight, int securityLevel, int columns, int rows, PTZplBool truncation) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::B7_BarcodePDF417CodeWithOrientation([\'barcodeHeight\':$barcodeHeight, \'securityLevel\':$securityLevel, \'columns\':$columns, \'rows\':$rows])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B7_BarcodePDF417CodeWithOrientationBarcodeHeightsecurityLevelcolumnsrowstruncation', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "securityLevel": securityLevel, "columns": columns, "rows": rows, "truncation": truncation.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> B8_BacodeEAN8WithOrientationBarcodeHeightinterpretationLineaboveCode(PTZplOrientation orientation, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::B8_BacodeEAN8WithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B8_BacodeEAN8WithOrientationBarcodeHeightinterpretationLineaboveCode', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> B9_BarcodeUPCE8CodeWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit(PTZplOrientation orientation, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode, PTZplBool checkDigit) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::B9_BarcodeUPCE8CodeWithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B9_BarcodeUPCE8CodeWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "checkDigit": checkDigit.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BA_BarcodeCode93WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit(PTZplOrientation orientation, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode, PTZplBool checkDigit) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BA_BarcodeCode93WithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BA_BarcodeCode93WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "checkDigit": checkDigit.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BB_BarcodeCodeBlockWithOrientationBarcodeHeightsecurityLevelperRowCharactersrowsmode(PTZplOrientation orientation, int barcodeHeight, PTZplBool securityLevel, int perRowCharacters, int rows, PTZplCodeBlockBarCodeMode mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BB_BarcodeCodeBlockWithOrientation([\'barcodeHeight\':$barcodeHeight, \'perRowCharacters\':$perRowCharacters, \'rows\':$rows])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BB_BarcodeCodeBlockWithOrientationBarcodeHeightsecurityLevelperRowCharactersrowsmode', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "securityLevel": securityLevel.index, "perRowCharacters": perRowCharacters, "rows": rows, "mode": mode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BC_BarcodeCode128WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigitmode(PTZplOrientation orientation, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode, PTZplBool checkDigit, PTZplCode128Mode mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BC_BarcodeCode128WithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BC_BarcodeCode128WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigitmode', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "checkDigit": checkDigit.index, "mode": mode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BD_BarcodeUPSMaxicodeWithModeSymbolNumbertotalSymbolNumbers(PTZplUpsMaxiCodeMode mode, int symbolNumber, int totalSymbolNumbers) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BD_BarcodeUPSMaxicodeWithMode([\'symbolNumber\':$symbolNumber, \'totalSymbolNumbers\':$totalSymbolNumbers])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BD_BarcodeUPSMaxicodeWithModeSymbolNumbertotalSymbolNumbers', {"mode": mode.index, "symbolNumber": symbolNumber, "totalSymbolNumbers": totalSymbolNumbers, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BE_BacodeEAN13WithOrientationBarcodeHeightinterpretationLineaboveCode(PTZplOrientation orientation, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BE_BacodeEAN13WithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BE_BacodeEAN13WithOrientationBarcodeHeightinterpretationLineaboveCode', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BF_BarcodeMicroPDF417WithOrientationBarcodeHeightmode(PTZplOrientation orientation, int barcodeHeight, int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BF_BarcodeMicroPDF417WithOrientation([\'barcodeHeight\':$barcodeHeight, \'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BF_BarcodeMicroPDF417WithOrientationBarcodeHeightmode', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BI_BacodeIndustrial2of5WithOrientationBarcodeHeightinterpretationLineaboveCode(PTZplOrientation orientation, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BI_BacodeIndustrial2of5WithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BI_BacodeIndustrial2of5WithOrientationBarcodeHeightinterpretationLineaboveCode', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BJ_BacodeStandard2of5WithOrientationBarcodeHeightinterpretationLineaboveCode(PTZplOrientation orientation, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BJ_BacodeStandard2of5WithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BJ_BacodeStandard2of5WithOrientationBarcodeHeightinterpretationLineaboveCode', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BK_BarcodeANSICodebarWithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCodestartCharacterstopCharacter(PTZplOrientation orientation, PTZplBool checkDigit, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode, String startCharacter, String stopCharacter) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BK_BarcodeANSICodebarWithOrientation([\'barcodeHeight\':$barcodeHeight, \'startCharacter\':$startCharacter, \'stopCharacter\':$stopCharacter])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BK_BarcodeANSICodebarWithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCodestartCharacterstopCharacter', {"orientation": orientation.index, "checkDigit": checkDigit.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "startCharacter": startCharacter, "stopCharacter": stopCharacter, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BL_BacodeLOGMARSWithOrientationBarcodeHeightprintInterpretationLineAboveCode(PTZplOrientation orientation, int barcodeHeight, PTZplBool isPrint) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BL_BacodeLOGMARSWithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BL_BacodeLOGMARSWithOrientationBarcodeHeightprintInterpretationLineAboveCode', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "isPrint": isPrint.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BQ_BarcodeQRcodeWithOrientationModelmagnificationreliabilityLevel(PTZplOrientation orientation, PTZplQrModel model, int magnification, PTZplQrReliabilityLevel reliabilityLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BQ_BarcodeQRcodeWithOrientation([\'magnification\':$magnification])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BQ_BarcodeQRcodeWithOrientationModelmagnificationreliabilityLevel', {"orientation": orientation.index, "model": model.index, "magnification": magnification, "reliabilityLevel": reliabilityLevel.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BS_BacodeUPCEANExtensionsWithOrientationBarcodeHeightinterpretationLineaboveCode(PTZplOrientation orientation, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BS_BacodeUPCEANExtensionsWithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BS_BacodeUPCEANExtensionsWithOrientationBarcodeHeightinterpretationLineaboveCode', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BU_BarcodeUPCAWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit(PTZplOrientation orientation, int barcodeHeight, PTZplBool interpretationLine, PTZplBool aboveCode, PTZplBool checkDigit) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BU_BarcodeUPCAWithOrientation([\'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BU_BarcodeUPCAWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit', {"orientation": orientation.index, "barcodeHeight": barcodeHeight, "interpretationLine": interpretationLine.index, "aboveCode": aboveCode.index, "checkDigit": checkDigit.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BY_BarcodeFieldDefaultWithModuleWidthRatiobarcodeHeight(int moduleWidth, double ratio, int barcodeHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BY_BarcodeFieldDefaultWithModuleWidth([\'moduleWidth\':$moduleWidth, \'ratio\':$ratio, \'barcodeHeight\':$barcodeHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BY_BarcodeFieldDefaultWithModuleWidthRatiobarcodeHeight', {"moduleWidth": moduleWidth, "ratio": ratio, "barcodeHeight": barcodeHeight, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> BY_BarcodeFieldDefaultWithModuleWidth(int moduleWidth) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::BY_BarcodeFieldDefaultWithModuleWidth([\'moduleWidth\':$moduleWidth])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BY_BarcodeFieldDefaultWithModuleWidth', {"moduleWidth": moduleWidth, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> CC_ChangeCaret(String character) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::CC_ChangeCaret([\'character\':$character])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CC_ChangeCaret', {"character": character, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> CD_ChangeDelimiter(String charactor) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::CD_ChangeDelimiter([\'charactor\':$charactor])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CD_ChangeDelimiter', {"charactor": charactor, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> CF_ChangeDefaultFontWidthheight(PTZplFont font, int width, int height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::CF_ChangeDefaultFont([\'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CF_ChangeDefaultFontWidthheight', {"font": font.index, "width": width, "height": height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> CF_ChangeDefaultFont(PTZplFont font) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::CF_ChangeDefaultFont([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CF_ChangeDefaultFont', {"font": font.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> CF_ChangeDefaultFontWidthHeight(int width, int height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::CF_ChangeDefaultFontWidth([\'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CF_ChangeDefaultFontWidthHeight', {"width": width, "height": height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> CI_ChangeInternationalCharacterSet(String characterSet) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::CI_ChangeInternationalCharacterSet([\'characterSet\':$characterSet])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CI_ChangeInternationalCharacterSet', {"characterSet": characterSet, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> CT_ChangeTilde(String character) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::CT_ChangeTilde([\'character\':$character])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CT_ChangeTilde', {"character": character, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> CV_CodeValidation(PTZplBool codeValidation) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::CV_CodeValidation([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CV_CodeValidation', {"codeValidation": codeValidation.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> CW_FontIdentifierFontDriveLocationdownloadedFontextension(PTZplFont fontName, PTZplFileLocation fontDriveLocation, String downloadedFont, String extension) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::CW_FontIdentifier([\'downloadedFont\':$downloadedFont, \'extension\':$extension])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CW_FontIdentifierFontDriveLocationdownloadedFontextension', {"fontName": fontName.index, "fontDriveLocation": fontDriveLocation.index, "downloadedFont": downloadedFont, "extension": extension, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> DF_DownloadFormatWithDeviceImageNameextension(PTZplFileLocation deviceToStoreImage, String imageName, String extension) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::DF_DownloadFormatWithDevice([\'imageName\':$imageName, \'extension\':$extension])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::DF_DownloadFormatWithDeviceImageNameextension', {"deviceToStoreImage": deviceToStoreImage.index, "imageName": imageName, "extension": extension, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> EG_EraseDownloadGraphics() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::EG_EraseDownloadGraphics([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::EG_EraseDownloadGraphics', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FD_FieldData(String fieldData) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FD_FieldData([\'fieldData\':$fieldData])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FD_FieldData', {"fieldData": fieldData, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FH_FieldHexadecimalIndicator(String hexadecimalIndicator) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FH_FieldHexadecimalIndicator([\'hexadecimalIndicator\':$hexadecimalIndicator])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FH_FieldHexadecimalIndicator', {"hexadecimalIndicator": hexadecimalIndicator, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FH_FieldHexadecimal() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FH_FieldHexadecimal([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FH_FieldHexadecimal', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FN_FieldNumberOptional(int fieldNumber, String optional) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FN_FieldNumber([\'fieldNumber\':$fieldNumber, \'optional\':$optional])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FN_FieldNumberOptional', {"fieldNumber": fieldNumber, "optional": optional, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FN_FieldNumber(int fieldNumber) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FN_FieldNumber([\'fieldNumber\':$fieldNumber])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FN_FieldNumber', {"fieldNumber": fieldNumber, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FO_FieldOriginWithXAxisYAxisjustification(int XAxis, int YAxis, PTZplJustification justification) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FO_FieldOriginWithXAxis([\'XAxis\':$XAxis, \'YAxis\':$YAxis])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FO_FieldOriginWithXAxisYAxisjustification', {"XAxis": XAxis, "YAxis": YAxis, "justification": justification.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FO_FieldOriginWithXAxisYAxis(int XAxis, int YAxis) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FO_FieldOriginWithXAxis([\'XAxis\':$XAxis, \'YAxis\':$YAxis])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FO_FieldOriginWithXAxisYAxis', {"XAxis": XAxis, "YAxis": YAxis, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FP_FieldParameterWithDirectionCharacterGap(PTZplTextPrintDirection direction, int characterGap) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FP_FieldParameterWithDirection([\'characterGap\':$characterGap])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FP_FieldParameterWithDirectionCharacterGap', {"direction": direction.index, "characterGap": characterGap, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FR_FieldReversePrint() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FR_FieldReversePrint([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FR_FieldReversePrint', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FS_FieldSeparator() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FS_FieldSeparator([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FS_FieldSeparator', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FT_FieldTypesetWithXAxisYAxisjustification(int XAxis, int YAxis, PTZplJustification justification) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FT_FieldTypesetWithXAxis([\'XAxis\':$XAxis, \'YAxis\':$YAxis])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FT_FieldTypesetWithXAxisYAxisjustification', {"XAxis": XAxis, "YAxis": YAxis, "justification": justification.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FT_FieldTypesetWithXAxisYAxis(int XAxis, int YAxis) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FT_FieldTypesetWithXAxis([\'XAxis\':$XAxis, \'YAxis\':$YAxis])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FT_FieldTypesetWithXAxisYAxis', {"XAxis": XAxis, "YAxis": YAxis, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FT_FieldTypeset() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FT_FieldTypeset([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FT_FieldTypeset', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FV_FieldVariable(String variableFieldData) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FV_FieldVariable([\'variableFieldData\':$variableFieldData])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FV_FieldVariable', {"variableFieldData": variableFieldData, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FW_FieldOrientationJustification(PTZplOrientation fieldOrientation, PTZplJustification justification) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FW_FieldOrientation([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FW_FieldOrientationJustification', {"fieldOrientation": fieldOrientation.index, "justification": justification.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FW_FieldOrientation(PTZplOrientation fieldOrientation) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FW_FieldOrientation([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FW_FieldOrientation', {"fieldOrientation": fieldOrientation.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> FX_FieldComment(String comment) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::FX_FieldComment([\'comment\':$comment])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FX_FieldComment', {"comment": comment, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> GB_GraphicBoxWithWidthHeightthicknesslineColorcornorRoundingDegree(int width, int height, int thickness, PTZplColor lineColor, int cornorRoundingDegree) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::GB_GraphicBoxWithWidth([\'width\':$width, \'height\':$height, \'thickness\':$thickness, \'cornorRoundingDegree\':$cornorRoundingDegree])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GB_GraphicBoxWithWidthHeightthicknesslineColorcornorRoundingDegree', {"width": width, "height": height, "thickness": thickness, "lineColor": lineColor.index, "cornorRoundingDegree": cornorRoundingDegree, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> GB_GraphicBoxWithWidthHeightthicknesscornorRoundingDegree(int width, int height, int thickness, int cornorRoundingDegree) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::GB_GraphicBoxWithWidth([\'width\':$width, \'height\':$height, \'thickness\':$thickness, \'cornorRoundingDegree\':$cornorRoundingDegree])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GB_GraphicBoxWithWidthHeightthicknesscornorRoundingDegree', {"width": width, "height": height, "thickness": thickness, "cornorRoundingDegree": cornorRoundingDegree, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> GB_GraphicBoxWithWidthHeightthickness(int width, int height, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::GB_GraphicBoxWithWidth([\'width\':$width, \'height\':$height, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GB_GraphicBoxWithWidthHeightthickness', {"width": width, "height": height, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> GC_GraphicCircleWithDiameterThicknesslineColor(int diameter, int thickness, PTZplColor lineColor) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::GC_GraphicCircleWithDiameter([\'diameter\':$diameter, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GC_GraphicCircleWithDiameterThicknesslineColor', {"diameter": diameter, "thickness": thickness, "lineColor": lineColor.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> GD_GraphicDiagonalLineWithWidthHeightthicknesslineColororientation(int width, int height, int thickness, PTZplColor lineColor, PTZplDiagonalOrientation orientation) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::GD_GraphicDiagonalLineWithWidth([\'width\':$width, \'height\':$height, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GD_GraphicDiagonalLineWithWidthHeightthicknesslineColororientation', {"width": width, "height": height, "thickness": thickness, "lineColor": lineColor.index, "orientation": orientation.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> GE_GraphicEllipseWithWidthHeightthicknesslineColor(int width, int height, int thickness, PTZplColor lineColor) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::GE_GraphicEllipseWithWidth([\'width\':$width, \'height\':$height, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GE_GraphicEllipseWithWidthHeightthicknesslineColor', {"width": width, "height": height, "thickness": thickness, "lineColor": lineColor.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> GS_GraphicSymbolWithOrientationHeightwidth(PTZplOrientation orientation, int height, int width) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::GS_GraphicSymbolWithOrientation([\'height\':$height, \'width\':$width])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GS_GraphicSymbolWithOrientationHeightwidth', {"orientation": orientation.index, "height": height, "width": width, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> GS_GraphicSymbol() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::GS_GraphicSymbol([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GS_GraphicSymbol', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> ID_ImageDeleteWithObjectLocationObjectNameextension(PTZplFileLocation objectLocation, String objectName, String extension) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::ID_ImageDeleteWithObjectLocation([\'objectName\':$objectName, \'extension\':$extension])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::ID_ImageDeleteWithObjectLocationObjectNameextension', {"objectLocation": objectLocation.index, "objectName": objectName, "extension": extension, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> IL_ImageLoadWithObjectLocationObjectNameextension(PTZplFileLocation objectLocation, String objectName, String extension) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::IL_ImageLoadWithObjectLocation([\'objectName\':$objectName, \'extension\':$extension])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::IL_ImageLoadWithObjectLocationObjectNameextension', {"objectLocation": objectLocation.index, "objectName": objectName, "extension": extension, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> IM_ImageMoveWithObjectLocationObjectNameextension(PTZplFileLocation objectLocation, String objectName, String extension) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::IM_ImageMoveWithObjectLocation([\'objectName\':$objectName, \'extension\':$extension])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::IM_ImageMoveWithObjectLocationObjectNameextension', {"objectLocation": objectLocation.index, "objectName": objectName, "extension": extension, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> IS_ImageSaveWithObjectLocationObjectNameextensionprintAfterSorting(PTZplFileLocation objectLocation, String objectName, String extension, PTZplBool printAfterSorting) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::IS_ImageSaveWithObjectLocation([\'objectName\':$objectName, \'extension\':$extension])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::IS_ImageSaveWithObjectLocationObjectNameextensionprintAfterSorting', {"objectLocation": objectLocation.index, "objectName": objectName, "extension": extension, "printAfterSorting": printAfterSorting.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> JA_CancelAll() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::JA_CancelAll([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::JA_CancelAll', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> JD_EnableCommunicationsDiagnostics() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::JD_EnableCommunicationsDiagnostics([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::JD_EnableCommunicationsDiagnostics', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> JE_DisableDiagnostics() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::JE_DisableDiagnostics([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::JE_DisableDiagnostics', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> JZ_SetReprintAfterError(PTZplBool enable) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::JZ_SetReprintAfterError([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::JZ_SetReprintAfterError', {"enable": enable.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> LH_LabelHomeWithXPosYPos(int XPos, int YPos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::LH_LabelHomeWithXPos([\'XPos\':$XPos, \'YPos\':$YPos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LH_LabelHomeWithXPosYPos', {"XPos": XPos, "YPos": YPos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> LL_LabelLength(int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::LL_LabelLength([\'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LL_LabelLength', {"length": length, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> LR_LabelReversePrint(PTZplBool reverse) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::LR_LabelReversePrint([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LR_LabelReversePrint', {"reverse": reverse.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> LS_LabelShift(int shift) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::LS_LabelShift([\'shift\':$shift])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LS_LabelShift', {"shift": shift, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> LT_LabelTop(int top) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::LT_LabelTop([\'top\':$top])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LT_LabelTop', {"top": top, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> MC_MapClear(PTZplBool clear) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::MC_MapClear([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::MC_MapClear', {"clear": clear.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> ML_MaximumLabelLength(int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::ML_MaximumLabelLength([\'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::ML_MaximumLabelLength', {"length": length, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> MT_SetMediaType(PTZplMediaType type) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::MT_SetMediaType([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::MT_SetMediaType', {"type": type.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> ND_SetNetworkSettingWithIPSubnetMask(String ipAddress, String subnetMask) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::ND_SetNetworkSettingWithIP([\'ipAddress\':$ipAddress, \'subnetMask\':$subnetMask])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::ND_SetNetworkSettingWithIPSubnetMask', {"ipAddress": ipAddress, "subnetMask": subnetMask, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> PM_PrintLabelMirrorImage(PTZplBool mirror) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::PM_PrintLabelMirrorImage([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PM_PrintLabelMirrorImage', {"mirror": mirror.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> PO_PrintOrientation(PTZplPrintOrientation orientation) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::PO_PrintOrientation([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PO_PrintOrientation', {"orientation": orientation.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> PP_ProgrammablePause() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::PP_ProgrammablePause([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PP_ProgrammablePause', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> PQ_PrintQuantityPauseValuereplicateValueoverrided(int quantity, int pauseValue, int replicateValue, PTZplBool overrided) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::PQ_PrintQuantity([\'quantity\':$quantity, \'pauseValue\':$pauseValue, \'replicateValue\':$replicateValue])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PQ_PrintQuantityPauseValuereplicateValueoverrided', {"quantity": quantity, "pauseValue": pauseValue, "replicateValue": replicateValue, "overrided": overrided.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> PQ_PrintQuantity(int quantity) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::PQ_PrintQuantity([\'quantity\':$quantity])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PQ_PrintQuantity', {"quantity": quantity, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> PW_PrintWidth(int width) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::PW_PrintWidth([\'width\':$width])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PW_PrintWidth', {"width": width, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> SC_SetSerialCommunicationsWithBaudRateDataBitsParityStopBitsProtocolMode(String baudRate, String dataBits, String parity, String stopBits, String protocolMode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::SC_SetSerialCommunicationsWithBaudRate([\'baudRate\':$baudRate, \'dataBits\':$dataBits, \'parity\':$parity, \'stopBits\':$stopBits, \'protocolMode\':$protocolMode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::SC_SetSerialCommunicationsWithBaudRateDataBitsParityStopBitsProtocolMode', {"baudRate": baudRate, "dataBits": dataBits, "parity": parity, "stopBits": stopBits, "protocolMode": protocolMode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> SD_SetDarkness(int darkness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::SD_SetDarkness([\'darkness\':$darkness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::SD_SetDarkness', {"darkness": darkness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> SF_SerializationFieldWithMaskStringIncrementString(String maskString, String incrementString) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::SF_SerializationFieldWithMaskString([\'maskString\':$maskString, \'incrementString\':$incrementString])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::SF_SerializationFieldWithMaskStringIncrementString', {"maskString": maskString, "incrementString": incrementString, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> TO_TransferObjectWithSourceDeviceSourceObjectNamesourceExtensiondestinationDevicedestinationObjectNamedestinationExtension(PTZplFileLocation sourceDevice, String sourceObjectName, String sourceExtension, PTZplFileLocation destinationDevice, String destinationObjectName, String destinationExtension) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::TO_TransferObjectWithSourceDevice([\'sourceObjectName\':$sourceObjectName, \'sourceExtension\':$sourceExtension, \'destinationObjectName\':$destinationObjectName, \'destinationExtension\':$destinationExtension])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::TO_TransferObjectWithSourceDeviceSourceObjectNamesourceExtensiondestinationDevicedestinationObjectNamedestinationExtension', {"sourceDevice": sourceDevice.index, "sourceObjectName": sourceObjectName, "sourceExtension": sourceExtension, "destinationDevice": destinationDevice.index, "destinationObjectName": destinationObjectName, "destinationExtension": destinationExtension, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> XA_FormatStart() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::XA_FormatStart([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::XA_FormatStart', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> XF_RecallFormatWithSourceDeviceImageNameextension(PTZplFileLocation sourceDevice, String imageName, String extension) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::XF_RecallFormatWithSourceDevice([\'imageName\':$imageName, \'extension\':$extension])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::XF_RecallFormatWithSourceDeviceImageNameextension', {"sourceDevice": sourceDevice.index, "imageName": imageName, "extension": extension, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> XG_RecallGraphicWithSourceDeviceImageNameextensionXAxisMagnificationYAxisMagnification(PTZplFileLocation sourceDevice, String imageName, String extension, int XAxisMagnification, int YAxisMagnification) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::XG_RecallGraphicWithSourceDevice([\'imageName\':$imageName, \'extension\':$extension, \'XAxisMagnification\':$XAxisMagnification, \'YAxisMagnification\':$YAxisMagnification])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::XG_RecallGraphicWithSourceDeviceImageNameextensionXAxisMagnificationYAxisMagnification', {"sourceDevice": sourceDevice.index, "imageName": imageName, "extension": extension, "XAxisMagnification": XAxisMagnification, "YAxisMagnification": YAxisMagnification, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> XZ_FormatEnd() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::XZ_FormatEnd([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::XZ_FormatEnd', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> PR_SetSpeedSlewSpeedbackfeedSpeed(int speed, int slewSpeed, int backfeedSpeed) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandZPL@$refId::PR_SetSpeed([\'speed\':$speed, \'slewSpeed\':$slewSpeed, \'backfeedSpeed\':$backfeedSpeed])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PR_SetSpeedSlewSpeedbackfeedSpeed', {"speed": speed, "slewSpeed": slewSpeed, "backfeedSpeed": backfeedSpeed, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension PTCommandZPL_Batch on List<PTCommandZPL> {
  //region getters
  
  //endregion

  //region methods
  Future<void> printSelfTest_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::printSelfTest_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> zplLineFeed_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::zplLineFeed_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> A_SetFontFieldOrientationcharacterHeightwidth_batch(List<PTZplFont> fontName, List<PTZplOrientation> fieldOrientation, List<int> characterHeight, List<int> width) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontFieldOrientationcharacterHeightwidth_batch', [for (int i = 0; i < this.length; i++) {"fontName": fontName[i].index, "fieldOrientation": fieldOrientation[i].index, "characterHeight": characterHeight[i], "width": width[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> A_SetFontFieldOrientation_batch(List<PTZplFont> fontName, List<PTZplOrientation> fieldOrientation) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontFieldOrientation_batch', [for (int i = 0; i < this.length; i++) {"fontName": fontName[i].index, "fieldOrientation": fieldOrientation[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> A_SetFontCharacterHeightwidth_batch(List<PTZplFont> fontName, List<int> characterHeight, List<int> width) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontCharacterHeightwidth_batch', [for (int i = 0; i < this.length; i++) {"fontName": fontName[i].index, "characterHeight": characterHeight[i], "width": width[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> A_SetFont_batch(List<PTZplFont> fontName) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFont_batch', [for (int i = 0; i < this.length; i++) {"fontName": fontName[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> A_SetFontWithOrientationHeightwidthlocationfontNameextension_batch(List<PTZplOrientation> orientation, List<int> height, List<int> width, List<PTZplFileLocation> location, List<String> fontName, List<String> extension) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontWithOrientationHeightwidthlocationfontNameextension_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "height": height[i], "width": width[i], "location": location[i].index, "fontName": fontName[i], "extension": extension[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> A_SetFontWithOrientationHeightwidth_batch(List<PTZplOrientation> orientation, List<int> height, List<int> width) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::A_SetFontWithOrientationHeightwidth_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "height": height[i], "width": width[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> B0_BacodeAztecWithOrientationMagnificationFactorisContainECICerrorAndSymbolisMenuSymbolappendSymbolNumberappendOptionalID_batch(List<PTZplOrientation> orientation, List<int> magnificationFactor, List<PTZplBool> isContainECIC, List<int> errorAndSymbol, List<PTZplBool> isMenuSymbol, List<int> appendSymbolNumber, List<String> appendOptionalID) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B0_BacodeAztecWithOrientationMagnificationFactorisContainECICerrorAndSymbolisMenuSymbolappendSymbolNumberappendOptionalID_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "magnificationFactor": magnificationFactor[i], "isContainECIC": isContainECIC[i].index, "errorAndSymbol": errorAndSymbol[i], "isMenuSymbol": isMenuSymbol[i].index, "appendSymbolNumber": appendSymbolNumber[i], "appendOptionalID": appendOptionalID[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> B1_BacodeCode11WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode_batch(List<PTZplOrientation> orientation, List<PTZplBool> checkDigit, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B1_BacodeCode11WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "checkDigit": checkDigit[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> B3_BacodeCode39WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode_batch(List<PTZplOrientation> orientation, List<PTZplBool> checkDigit, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B3_BacodeCode39WithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "checkDigit": checkDigit[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> B4_BacodePlanetCodeWithOrientationBarcodeHeightinterpretationLineStyle_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTCode49InterpretationLineStyle> style) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B4_BacodePlanetCodeWithOrientationBarcodeHeightinterpretationLineStyle_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "style": style[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> B7_BarcodePDF417CodeWithOrientationBarcodeHeightsecurityLevelcolumnsrowstruncation_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<int> securityLevel, List<int> columns, List<int> rows, List<PTZplBool> truncation) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B7_BarcodePDF417CodeWithOrientationBarcodeHeightsecurityLevelcolumnsrowstruncation_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "securityLevel": securityLevel[i], "columns": columns[i], "rows": rows[i], "truncation": truncation[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> B8_BacodeEAN8WithOrientationBarcodeHeightinterpretationLineaboveCode_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B8_BacodeEAN8WithOrientationBarcodeHeightinterpretationLineaboveCode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> B9_BarcodeUPCE8CodeWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode, List<PTZplBool> checkDigit) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::B9_BarcodeUPCE8CodeWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "checkDigit": checkDigit[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BA_BarcodeCode93WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode, List<PTZplBool> checkDigit) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BA_BarcodeCode93WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "checkDigit": checkDigit[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BB_BarcodeCodeBlockWithOrientationBarcodeHeightsecurityLevelperRowCharactersrowsmode_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> securityLevel, List<int> perRowCharacters, List<int> rows, List<PTZplCodeBlockBarCodeMode> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BB_BarcodeCodeBlockWithOrientationBarcodeHeightsecurityLevelperRowCharactersrowsmode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "securityLevel": securityLevel[i].index, "perRowCharacters": perRowCharacters[i], "rows": rows[i], "mode": mode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BC_BarcodeCode128WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigitmode_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode, List<PTZplBool> checkDigit, List<PTZplCode128Mode> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BC_BarcodeCode128WithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigitmode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "checkDigit": checkDigit[i].index, "mode": mode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BD_BarcodeUPSMaxicodeWithModeSymbolNumbertotalSymbolNumbers_batch(List<PTZplUpsMaxiCodeMode> mode, List<int> symbolNumber, List<int> totalSymbolNumbers) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BD_BarcodeUPSMaxicodeWithModeSymbolNumbertotalSymbolNumbers_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i].index, "symbolNumber": symbolNumber[i], "totalSymbolNumbers": totalSymbolNumbers[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BE_BacodeEAN13WithOrientationBarcodeHeightinterpretationLineaboveCode_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BE_BacodeEAN13WithOrientationBarcodeHeightinterpretationLineaboveCode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BF_BarcodeMicroPDF417WithOrientationBarcodeHeightmode_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BF_BarcodeMicroPDF417WithOrientationBarcodeHeightmode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BI_BacodeIndustrial2of5WithOrientationBarcodeHeightinterpretationLineaboveCode_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BI_BacodeIndustrial2of5WithOrientationBarcodeHeightinterpretationLineaboveCode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BJ_BacodeStandard2of5WithOrientationBarcodeHeightinterpretationLineaboveCode_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BJ_BacodeStandard2of5WithOrientationBarcodeHeightinterpretationLineaboveCode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BK_BarcodeANSICodebarWithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCodestartCharacterstopCharacter_batch(List<PTZplOrientation> orientation, List<PTZplBool> checkDigit, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode, List<String> startCharacter, List<String> stopCharacter) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BK_BarcodeANSICodebarWithOrientationCheckDigitbarcodeHeightinterpretationLineaboveCodestartCharacterstopCharacter_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "checkDigit": checkDigit[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "startCharacter": startCharacter[i], "stopCharacter": stopCharacter[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BL_BacodeLOGMARSWithOrientationBarcodeHeightprintInterpretationLineAboveCode_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> isPrint) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BL_BacodeLOGMARSWithOrientationBarcodeHeightprintInterpretationLineAboveCode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "isPrint": isPrint[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BQ_BarcodeQRcodeWithOrientationModelmagnificationreliabilityLevel_batch(List<PTZplOrientation> orientation, List<PTZplQrModel> model, List<int> magnification, List<PTZplQrReliabilityLevel> reliabilityLevel) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BQ_BarcodeQRcodeWithOrientationModelmagnificationreliabilityLevel_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "model": model[i].index, "magnification": magnification[i], "reliabilityLevel": reliabilityLevel[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BS_BacodeUPCEANExtensionsWithOrientationBarcodeHeightinterpretationLineaboveCode_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BS_BacodeUPCEANExtensionsWithOrientationBarcodeHeightinterpretationLineaboveCode_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BU_BarcodeUPCAWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit_batch(List<PTZplOrientation> orientation, List<int> barcodeHeight, List<PTZplBool> interpretationLine, List<PTZplBool> aboveCode, List<PTZplBool> checkDigit) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BU_BarcodeUPCAWithOrientationBarcodeHeightinterpretationLineaboveCodecheckDigit_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "barcodeHeight": barcodeHeight[i], "interpretationLine": interpretationLine[i].index, "aboveCode": aboveCode[i].index, "checkDigit": checkDigit[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BY_BarcodeFieldDefaultWithModuleWidthRatiobarcodeHeight_batch(List<int> moduleWidth, List<double> ratio, List<int> barcodeHeight) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BY_BarcodeFieldDefaultWithModuleWidthRatiobarcodeHeight_batch', [for (int i = 0; i < this.length; i++) {"moduleWidth": moduleWidth[i], "ratio": ratio[i], "barcodeHeight": barcodeHeight[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> BY_BarcodeFieldDefaultWithModuleWidth_batch(List<int> moduleWidth) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::BY_BarcodeFieldDefaultWithModuleWidth_batch', [for (int i = 0; i < this.length; i++) {"moduleWidth": moduleWidth[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> CC_ChangeCaret_batch(List<String> character) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CC_ChangeCaret_batch', [for (int i = 0; i < this.length; i++) {"character": character[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> CD_ChangeDelimiter_batch(List<String> charactor) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CD_ChangeDelimiter_batch', [for (int i = 0; i < this.length; i++) {"charactor": charactor[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> CF_ChangeDefaultFontWidthheight_batch(List<PTZplFont> font, List<int> width, List<int> height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CF_ChangeDefaultFontWidthheight_batch', [for (int i = 0; i < this.length; i++) {"font": font[i].index, "width": width[i], "height": height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> CF_ChangeDefaultFont_batch(List<PTZplFont> font) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CF_ChangeDefaultFont_batch', [for (int i = 0; i < this.length; i++) {"font": font[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> CF_ChangeDefaultFontWidthHeight_batch(List<int> width, List<int> height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CF_ChangeDefaultFontWidthHeight_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "height": height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> CI_ChangeInternationalCharacterSet_batch(List<String> characterSet) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CI_ChangeInternationalCharacterSet_batch', [for (int i = 0; i < this.length; i++) {"characterSet": characterSet[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> CT_ChangeTilde_batch(List<String> character) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CT_ChangeTilde_batch', [for (int i = 0; i < this.length; i++) {"character": character[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> CV_CodeValidation_batch(List<PTZplBool> codeValidation) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CV_CodeValidation_batch', [for (int i = 0; i < this.length; i++) {"codeValidation": codeValidation[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> CW_FontIdentifierFontDriveLocationdownloadedFontextension_batch(List<PTZplFont> fontName, List<PTZplFileLocation> fontDriveLocation, List<String> downloadedFont, List<String> extension) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::CW_FontIdentifierFontDriveLocationdownloadedFontextension_batch', [for (int i = 0; i < this.length; i++) {"fontName": fontName[i].index, "fontDriveLocation": fontDriveLocation[i].index, "downloadedFont": downloadedFont[i], "extension": extension[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> DF_DownloadFormatWithDeviceImageNameextension_batch(List<PTZplFileLocation> deviceToStoreImage, List<String> imageName, List<String> extension) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::DF_DownloadFormatWithDeviceImageNameextension_batch', [for (int i = 0; i < this.length; i++) {"deviceToStoreImage": deviceToStoreImage[i].index, "imageName": imageName[i], "extension": extension[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> EG_EraseDownloadGraphics_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::EG_EraseDownloadGraphics_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FD_FieldData_batch(List<String> fieldData) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FD_FieldData_batch', [for (int i = 0; i < this.length; i++) {"fieldData": fieldData[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FH_FieldHexadecimalIndicator_batch(List<String> hexadecimalIndicator) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FH_FieldHexadecimalIndicator_batch', [for (int i = 0; i < this.length; i++) {"hexadecimalIndicator": hexadecimalIndicator[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FH_FieldHexadecimal_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FH_FieldHexadecimal_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FN_FieldNumberOptional_batch(List<int> fieldNumber, List<String> optional) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FN_FieldNumberOptional_batch', [for (int i = 0; i < this.length; i++) {"fieldNumber": fieldNumber[i], "optional": optional[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FN_FieldNumber_batch(List<int> fieldNumber) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FN_FieldNumber_batch', [for (int i = 0; i < this.length; i++) {"fieldNumber": fieldNumber[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FO_FieldOriginWithXAxisYAxisjustification_batch(List<int> XAxis, List<int> YAxis, List<PTZplJustification> justification) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FO_FieldOriginWithXAxisYAxisjustification_batch', [for (int i = 0; i < this.length; i++) {"XAxis": XAxis[i], "YAxis": YAxis[i], "justification": justification[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FO_FieldOriginWithXAxisYAxis_batch(List<int> XAxis, List<int> YAxis) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FO_FieldOriginWithXAxisYAxis_batch', [for (int i = 0; i < this.length; i++) {"XAxis": XAxis[i], "YAxis": YAxis[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FP_FieldParameterWithDirectionCharacterGap_batch(List<PTZplTextPrintDirection> direction, List<int> characterGap) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FP_FieldParameterWithDirectionCharacterGap_batch', [for (int i = 0; i < this.length; i++) {"direction": direction[i].index, "characterGap": characterGap[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FR_FieldReversePrint_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FR_FieldReversePrint_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FS_FieldSeparator_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FS_FieldSeparator_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FT_FieldTypesetWithXAxisYAxisjustification_batch(List<int> XAxis, List<int> YAxis, List<PTZplJustification> justification) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FT_FieldTypesetWithXAxisYAxisjustification_batch', [for (int i = 0; i < this.length; i++) {"XAxis": XAxis[i], "YAxis": YAxis[i], "justification": justification[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FT_FieldTypesetWithXAxisYAxis_batch(List<int> XAxis, List<int> YAxis) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FT_FieldTypesetWithXAxisYAxis_batch', [for (int i = 0; i < this.length; i++) {"XAxis": XAxis[i], "YAxis": YAxis[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FT_FieldTypeset_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FT_FieldTypeset_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FV_FieldVariable_batch(List<String> variableFieldData) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FV_FieldVariable_batch', [for (int i = 0; i < this.length; i++) {"variableFieldData": variableFieldData[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FW_FieldOrientationJustification_batch(List<PTZplOrientation> fieldOrientation, List<PTZplJustification> justification) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FW_FieldOrientationJustification_batch', [for (int i = 0; i < this.length; i++) {"fieldOrientation": fieldOrientation[i].index, "justification": justification[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FW_FieldOrientation_batch(List<PTZplOrientation> fieldOrientation) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FW_FieldOrientation_batch', [for (int i = 0; i < this.length; i++) {"fieldOrientation": fieldOrientation[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> FX_FieldComment_batch(List<String> comment) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::FX_FieldComment_batch', [for (int i = 0; i < this.length; i++) {"comment": comment[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> GB_GraphicBoxWithWidthHeightthicknesslineColorcornorRoundingDegree_batch(List<int> width, List<int> height, List<int> thickness, List<PTZplColor> lineColor, List<int> cornorRoundingDegree) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GB_GraphicBoxWithWidthHeightthicknesslineColorcornorRoundingDegree_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "height": height[i], "thickness": thickness[i], "lineColor": lineColor[i].index, "cornorRoundingDegree": cornorRoundingDegree[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> GB_GraphicBoxWithWidthHeightthicknesscornorRoundingDegree_batch(List<int> width, List<int> height, List<int> thickness, List<int> cornorRoundingDegree) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GB_GraphicBoxWithWidthHeightthicknesscornorRoundingDegree_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "height": height[i], "thickness": thickness[i], "cornorRoundingDegree": cornorRoundingDegree[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> GB_GraphicBoxWithWidthHeightthickness_batch(List<int> width, List<int> height, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GB_GraphicBoxWithWidthHeightthickness_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "height": height[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> GC_GraphicCircleWithDiameterThicknesslineColor_batch(List<int> diameter, List<int> thickness, List<PTZplColor> lineColor) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GC_GraphicCircleWithDiameterThicknesslineColor_batch', [for (int i = 0; i < this.length; i++) {"diameter": diameter[i], "thickness": thickness[i], "lineColor": lineColor[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> GD_GraphicDiagonalLineWithWidthHeightthicknesslineColororientation_batch(List<int> width, List<int> height, List<int> thickness, List<PTZplColor> lineColor, List<PTZplDiagonalOrientation> orientation) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GD_GraphicDiagonalLineWithWidthHeightthicknesslineColororientation_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "height": height[i], "thickness": thickness[i], "lineColor": lineColor[i].index, "orientation": orientation[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> GE_GraphicEllipseWithWidthHeightthicknesslineColor_batch(List<int> width, List<int> height, List<int> thickness, List<PTZplColor> lineColor) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GE_GraphicEllipseWithWidthHeightthicknesslineColor_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "height": height[i], "thickness": thickness[i], "lineColor": lineColor[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> GS_GraphicSymbolWithOrientationHeightwidth_batch(List<PTZplOrientation> orientation, List<int> height, List<int> width) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GS_GraphicSymbolWithOrientationHeightwidth_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "height": height[i], "width": width[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> GS_GraphicSymbol_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::GS_GraphicSymbol_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> ID_ImageDeleteWithObjectLocationObjectNameextension_batch(List<PTZplFileLocation> objectLocation, List<String> objectName, List<String> extension) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::ID_ImageDeleteWithObjectLocationObjectNameextension_batch', [for (int i = 0; i < this.length; i++) {"objectLocation": objectLocation[i].index, "objectName": objectName[i], "extension": extension[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> IL_ImageLoadWithObjectLocationObjectNameextension_batch(List<PTZplFileLocation> objectLocation, List<String> objectName, List<String> extension) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::IL_ImageLoadWithObjectLocationObjectNameextension_batch', [for (int i = 0; i < this.length; i++) {"objectLocation": objectLocation[i].index, "objectName": objectName[i], "extension": extension[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> IM_ImageMoveWithObjectLocationObjectNameextension_batch(List<PTZplFileLocation> objectLocation, List<String> objectName, List<String> extension) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::IM_ImageMoveWithObjectLocationObjectNameextension_batch', [for (int i = 0; i < this.length; i++) {"objectLocation": objectLocation[i].index, "objectName": objectName[i], "extension": extension[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> IS_ImageSaveWithObjectLocationObjectNameextensionprintAfterSorting_batch(List<PTZplFileLocation> objectLocation, List<String> objectName, List<String> extension, List<PTZplBool> printAfterSorting) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::IS_ImageSaveWithObjectLocationObjectNameextensionprintAfterSorting_batch', [for (int i = 0; i < this.length; i++) {"objectLocation": objectLocation[i].index, "objectName": objectName[i], "extension": extension[i], "printAfterSorting": printAfterSorting[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> JA_CancelAll_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::JA_CancelAll_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> JD_EnableCommunicationsDiagnostics_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::JD_EnableCommunicationsDiagnostics_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> JE_DisableDiagnostics_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::JE_DisableDiagnostics_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> JZ_SetReprintAfterError_batch(List<PTZplBool> enable) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::JZ_SetReprintAfterError_batch', [for (int i = 0; i < this.length; i++) {"enable": enable[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> LH_LabelHomeWithXPosYPos_batch(List<int> XPos, List<int> YPos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LH_LabelHomeWithXPosYPos_batch', [for (int i = 0; i < this.length; i++) {"XPos": XPos[i], "YPos": YPos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> LL_LabelLength_batch(List<int> length) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LL_LabelLength_batch', [for (int i = 0; i < this.length; i++) {"length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> LR_LabelReversePrint_batch(List<PTZplBool> reverse) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LR_LabelReversePrint_batch', [for (int i = 0; i < this.length; i++) {"reverse": reverse[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> LS_LabelShift_batch(List<int> shift) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LS_LabelShift_batch', [for (int i = 0; i < this.length; i++) {"shift": shift[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> LT_LabelTop_batch(List<int> top) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::LT_LabelTop_batch', [for (int i = 0; i < this.length; i++) {"top": top[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> MC_MapClear_batch(List<PTZplBool> clear) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::MC_MapClear_batch', [for (int i = 0; i < this.length; i++) {"clear": clear[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> ML_MaximumLabelLength_batch(List<int> length) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::ML_MaximumLabelLength_batch', [for (int i = 0; i < this.length; i++) {"length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> MT_SetMediaType_batch(List<PTZplMediaType> type) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::MT_SetMediaType_batch', [for (int i = 0; i < this.length; i++) {"type": type[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> ND_SetNetworkSettingWithIPSubnetMask_batch(List<String> ipAddress, List<String> subnetMask) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::ND_SetNetworkSettingWithIPSubnetMask_batch', [for (int i = 0; i < this.length; i++) {"ipAddress": ipAddress[i], "subnetMask": subnetMask[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> PM_PrintLabelMirrorImage_batch(List<PTZplBool> mirror) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PM_PrintLabelMirrorImage_batch', [for (int i = 0; i < this.length; i++) {"mirror": mirror[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> PO_PrintOrientation_batch(List<PTZplPrintOrientation> orientation) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PO_PrintOrientation_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> PP_ProgrammablePause_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PP_ProgrammablePause_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> PQ_PrintQuantityPauseValuereplicateValueoverrided_batch(List<int> quantity, List<int> pauseValue, List<int> replicateValue, List<PTZplBool> overrided) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PQ_PrintQuantityPauseValuereplicateValueoverrided_batch', [for (int i = 0; i < this.length; i++) {"quantity": quantity[i], "pauseValue": pauseValue[i], "replicateValue": replicateValue[i], "overrided": overrided[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> PQ_PrintQuantity_batch(List<int> quantity) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PQ_PrintQuantity_batch', [for (int i = 0; i < this.length; i++) {"quantity": quantity[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> PW_PrintWidth_batch(List<int> width) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PW_PrintWidth_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> SC_SetSerialCommunicationsWithBaudRateDataBitsParityStopBitsProtocolMode_batch(List<String> baudRate, List<String> dataBits, List<String> parity, List<String> stopBits, List<String> protocolMode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::SC_SetSerialCommunicationsWithBaudRateDataBitsParityStopBitsProtocolMode_batch', [for (int i = 0; i < this.length; i++) {"baudRate": baudRate[i], "dataBits": dataBits[i], "parity": parity[i], "stopBits": stopBits[i], "protocolMode": protocolMode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> SD_SetDarkness_batch(List<int> darkness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::SD_SetDarkness_batch', [for (int i = 0; i < this.length; i++) {"darkness": darkness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> SF_SerializationFieldWithMaskStringIncrementString_batch(List<String> maskString, List<String> incrementString) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::SF_SerializationFieldWithMaskStringIncrementString_batch', [for (int i = 0; i < this.length; i++) {"maskString": maskString[i], "incrementString": incrementString[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> TO_TransferObjectWithSourceDeviceSourceObjectNamesourceExtensiondestinationDevicedestinationObjectNamedestinationExtension_batch(List<PTZplFileLocation> sourceDevice, List<String> sourceObjectName, List<String> sourceExtension, List<PTZplFileLocation> destinationDevice, List<String> destinationObjectName, List<String> destinationExtension) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::TO_TransferObjectWithSourceDeviceSourceObjectNamesourceExtensiondestinationDevicedestinationObjectNamedestinationExtension_batch', [for (int i = 0; i < this.length; i++) {"sourceDevice": sourceDevice[i].index, "sourceObjectName": sourceObjectName[i], "sourceExtension": sourceExtension[i], "destinationDevice": destinationDevice[i].index, "destinationObjectName": destinationObjectName[i], "destinationExtension": destinationExtension[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> XA_FormatStart_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::XA_FormatStart_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> XF_RecallFormatWithSourceDeviceImageNameextension_batch(List<PTZplFileLocation> sourceDevice, List<String> imageName, List<String> extension) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::XF_RecallFormatWithSourceDeviceImageNameextension_batch', [for (int i = 0; i < this.length; i++) {"sourceDevice": sourceDevice[i].index, "imageName": imageName[i], "extension": extension[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> XG_RecallGraphicWithSourceDeviceImageNameextensionXAxisMagnificationYAxisMagnification_batch(List<PTZplFileLocation> sourceDevice, List<String> imageName, List<String> extension, List<int> XAxisMagnification, List<int> YAxisMagnification) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::XG_RecallGraphicWithSourceDeviceImageNameextensionXAxisMagnificationYAxisMagnification_batch', [for (int i = 0; i < this.length; i++) {"sourceDevice": sourceDevice[i].index, "imageName": imageName[i], "extension": extension[i], "XAxisMagnification": XAxisMagnification[i], "YAxisMagnification": YAxisMagnification[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> XZ_FormatEnd_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::XZ_FormatEnd_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> PR_SetSpeedSlewSpeedbackfeedSpeed_batch(List<int> speed, List<int> slewSpeed, List<int> backfeedSpeed) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandZPL::PR_SetSpeedSlewSpeedbackfeedSpeed_batch', [for (int i = 0; i < this.length; i++) {"speed": speed[i], "slewSpeed": slewSpeed[i], "backfeedSpeed": backfeedSpeed[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}