// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
extension TypeOpHanyinPrinterFluttifyIOS on Ref {
  Future<bool> isPTOldCommandTSPL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTOldCommandTSPL', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTCommandCommon() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTCommandCommon', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTRouter() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTRouter', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTBitmap() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTBitmap', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTCommandESC() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTCommandESC', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTCommandTSPL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTCommandTSPL', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTLabel() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTLabel', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTEncode() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTEncode', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTOldCommandCPCL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTOldCommandCPCL', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTCommandZPL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTCommandZPL', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTCommandCPCL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTCommandCPCL', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTDispatcher() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTDispatcher', {'refId': refId});
    return result;
  }
  
  Future<bool> isPTPrinter() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::isKindOfPTPrinter', {'refId': refId});
    return result;
  }
  

  Future<PTOldCommandTSPL> asPTOldCommandTSPL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTOldCommandTSPL', {'refId': refId});
    return PTOldCommandTSPL()..refId = result;
  }
  
  Future<PTCommandCommon> asPTCommandCommon() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTCommandCommon', {'refId': refId});
    return PTCommandCommon()..refId = result;
  }
  
  Future<PTRouter> asPTRouter() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTRouter', {'refId': refId});
    return PTRouter()..refId = result;
  }
  
  Future<PTBitmap> asPTBitmap() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTBitmap', {'refId': refId});
    return PTBitmap()..refId = result;
  }
  
  Future<PTCommandESC> asPTCommandESC() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTCommandESC', {'refId': refId});
    return PTCommandESC()..refId = result;
  }
  
  Future<PTCommandTSPL> asPTCommandTSPL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTCommandTSPL', {'refId': refId});
    return PTCommandTSPL()..refId = result;
  }
  
  Future<PTLabel> asPTLabel() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTLabel', {'refId': refId});
    return PTLabel()..refId = result;
  }
  
  Future<PTEncode> asPTEncode() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTEncode', {'refId': refId});
    return PTEncode()..refId = result;
  }
  
  Future<PTOldCommandCPCL> asPTOldCommandCPCL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTOldCommandCPCL', {'refId': refId});
    return PTOldCommandCPCL()..refId = result;
  }
  
  Future<PTCommandZPL> asPTCommandZPL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTCommandZPL', {'refId': refId});
    return PTCommandZPL()..refId = result;
  }
  
  Future<PTCommandCPCL> asPTCommandCPCL() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTCommandCPCL', {'refId': refId});
    return PTCommandCPCL()..refId = result;
  }
  
  Future<PTDispatcher> asPTDispatcher() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTDispatcher', {'refId': refId});
    return PTDispatcher()..refId = result;
  }
  
  Future<PTPrinter> asPTPrinter() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('RefClass::asPTPrinter', {'refId': refId});
    return PTPrinter()..refId = result;
  }
  
}