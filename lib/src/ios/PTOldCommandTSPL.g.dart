// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class PTOldCommandTSPL extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<PTOldCommandTSPL> create__() async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createPTOldCommandTSPL');
    final object = PTOldCommandTSPL()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<PTOldCommandTSPL>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchPTOldCommandTSPL', {'length': length});
  
    final List<PTOldCommandTSPL> typedResult = resultBatch.map((result) => PTOldCommandTSPL()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  Future<void> selfTest() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::selfTest([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::selfTest', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendCommand(String cmd) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::appendCommand([\'cmd\':$cmd])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::appendCommand', {"cmd": cmd, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAndLineFeed() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::printAndLineFeed([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printAndLineFeed', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setFontBold(int bold) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setFontBold([\'bold\':$bold])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setFontBold', {"bold": bold, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrinterStateAutomaticBackWithStatus(int status) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setPrinterStateAutomaticBackWithStatus([\'status\':$status])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPrinterStateAutomaticBackWithStatus', {"status": status, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrintAreaSizeWithWidthHeight(int label_width, int label_height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setPrintAreaSizeWithWidth([\'label_width\':$label_width, \'label_height\':$label_height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPrintAreaSizeWithWidthHeight', {"label_width": label_width, "label_height": label_height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> getPrinterStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::getPrinterStatus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::getPrinterStatus', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setGapWithDistanceOffset(int distance, int offset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setGapWithDistance([\'distance\':$distance, \'offset\':$offset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setGapWithDistanceOffset', {"distance": distance, "offset": offset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBlineWithHeightOffset(int height, int offset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setBlineWithHeight([\'height\':$height, \'offset\':$offset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBlineWithHeightOffset', {"height": height, "offset": offset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setOffsetWithDistance(int distance) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setOffsetWithDistance([\'distance\':$distance])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setOffsetWithDistance', {"distance": distance, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printWithSetsCopies(int sets, int copies) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::printWithSets([\'sets\':$sets, \'copies\':$copies])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printWithSetsCopies', {"sets": sets, "copies": copies, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext(int x_pos, int y_pos, int font, int rotation, int x_multiplication, int y_multiplication, int safeHeight, int width, int lineSpacing, String text) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::printAutoTextForVectorWithXpos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'font\':$font, \'rotation\':$rotation, \'x_multiplication\':$x_multiplication, \'y_multiplication\':$y_multiplication, \'safeHeight\':$safeHeight, \'width\':$width, \'lineSpacing\':$lineSpacing, \'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext', {"x_pos": x_pos, "y_pos": y_pos, "font": font, "rotation": rotation, "x_multiplication": x_multiplication, "y_multiplication": y_multiplication, "safeHeight": safeHeight, "width": width, "lineSpacing": lineSpacing, "text": text, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext(int x_pos, int y_pos, int font, int rotation, int x_multiplication, int y_multiplication, int safeHeight, int width, int lineSpacing, String text) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::printAutoTextWithXpos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'font\':$font, \'rotation\':$rotation, \'x_multiplication\':$x_multiplication, \'y_multiplication\':$y_multiplication, \'safeHeight\':$safeHeight, \'width\':$width, \'lineSpacing\':$lineSpacing, \'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext', {"x_pos": x_pos, "y_pos": y_pos, "font": font, "rotation": rotation, "x_multiplication": x_multiplication, "y_multiplication": y_multiplication, "safeHeight": safeHeight, "width": width, "lineSpacing": lineSpacing, "text": text, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendTextWithXposYposFontRotationXmultiplicationYmultiplicationText(int x_pos, int y_pos, int font, int rotation, int x_multiplication, int y_multiplication, String text) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::appendTextWithXpos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'font\':$font, \'rotation\':$rotation, \'x_multiplication\':$x_multiplication, \'y_multiplication\':$y_multiplication, \'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::appendTextWithXposYposFontRotationXmultiplicationYmultiplicationText', {"x_pos": x_pos, "y_pos": y_pos, "font": font, "rotation": rotation, "x_multiplication": x_multiplication, "y_multiplication": y_multiplication, "text": text, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCLS() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCLS([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCLS', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printBarcodeWithXPosYPosTypeHeightHumanReadableRotationNarrowWideCodeNumber(int x_pos, int y_pos, String type, int height, int readable, int rotation, int narrow, int wide, String codeNumber) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::printBarcodeWithXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'type\':$type, \'height\':$height, \'readable\':$readable, \'rotation\':$rotation, \'narrow\':$narrow, \'wide\':$wide, \'codeNumber\':$codeNumber])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printBarcodeWithXPosYPosTypeHeightHumanReadableRotationNarrowWideCodeNumber', {"x_pos": x_pos, "y_pos": y_pos, "type": type, "height": height, "readable": readable, "rotation": rotation, "narrow": narrow, "wide": wide, "codeNumber": codeNumber, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printQRcodeWithXPosYPosEccLevelCellWidthModeRotationModelMaskText(int x_pos, int y_pos, String ecc_level, int width, String mode, int rotation, String model, String mask, String text) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::printQRcodeWithXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'ecc_level\':$ecc_level, \'width\':$width, \'mode\':$mode, \'rotation\':$rotation, \'model\':$model, \'mask\':$mask, \'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printQRcodeWithXPosYPosEccLevelCellWidthModeRotationModelMaskText', {"x_pos": x_pos, "y_pos": y_pos, "ecc_level": ecc_level, "width": width, "mode": mode, "rotation": rotation, "model": model, "mask": mask, "text": text, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setSpeed(int speed) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setSpeed([\'speed\':$speed])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setSpeed', {"speed": speed, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setDensity(int density) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setDensity([\'density\':$density])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setDensity', {"density": density, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setDirectionMirror(int direction, int mirror) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setDirection([\'direction\':$direction, \'mirror\':$mirror])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setDirectionMirror', {"direction": direction, "mirror": mirror, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setReferenceXPosYPos(int x_pos, int y_pos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setReferenceXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setReferenceXPosYPos', {"x_pos": x_pos, "y_pos": y_pos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCodePage(String codepage) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCodePage([\'codepage\':$codepage])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCodePage', {"codepage": codepage, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setFeedLength(int feedLength) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setFeedLength([\'feedLength\':$feedLength])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setFeedLength', {"feedLength": feedLength, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setFormFeed() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setFormFeed([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setFormFeed', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBackFeed(int distance) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setBackFeed([\'distance\':$distance])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBackFeed', {"distance": distance, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBackUP(int distance) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setBackUP([\'distance\':$distance])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBackUP', {"distance": distance, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setHome() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setHome([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setHome', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setSoundWithLevelInterval(int level, int interval) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setSoundWithLevel([\'level\':$level, \'interval\':$interval])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setSoundWithLevelInterval', {"level": level, "interval": interval, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCut() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCut([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCut', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setLimitFeed(int max_len) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setLimitFeed([\'max_len\':$max_len])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setLimitFeed', {"max_len": max_len, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printBarWithXPosYPosWidthHeight(int x_pos, int y_pos, int width, int height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::printBarWithXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printBarWithXPosYPosWidthHeight', {"x_pos": x_pos, "y_pos": y_pos, "width": width, "height": height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBoxWithXStartYStartXEndYEndThickness(int x_start, int y_start, int x_end, int y_end, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setBoxWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'x_end\':$x_end, \'y_end\':$y_end, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBoxWithXStartYStartXEndYEndThickness', {"x_start": x_start, "y_start": y_start, "x_end": x_end, "y_end": y_end, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setEllipseWithXStartYStartWidthHeightThickness(int x_start, int y_start, int width, int height, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setEllipseWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'width\':$width, \'height\':$height, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setEllipseWithXStartYStartWidthHeightThickness', {"x_start": x_start, "y_start": y_start, "width": width, "height": height, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCircleWithXStartYStartDiameterThickness(int x_start, int y_start, int diameter, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCircleWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'diameter\':$diameter, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCircleWithXStartYStartDiameterThickness', {"x_start": x_start, "y_start": y_start, "diameter": diameter, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setEraseWithXStartYStartXWidthYHeight(int x_start, int y_start, int x_width, int y_height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setEraseWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'x_width\':$x_width, \'y_height\':$y_height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setEraseWithXStartYStartXWidthYHeight', {"x_start": x_start, "y_start": y_start, "x_width": x_width, "y_height": y_height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setDmatrixWithExpressionXPosYPosWidthHeightXMRowCol(String expression, int x_pos, int y_pos, int width, int height, String xm, String row, String col) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setDmatrixWithExpression([\'expression\':$expression, \'x_pos\':$x_pos, \'y_pos\':$y_pos, \'width\':$width, \'height\':$height, \'xm\':$xm, \'row\':$row, \'col\':$col])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setDmatrixWithExpressionXPosYPosWidthHeightXMRowCol', {"expression": expression, "x_pos": x_pos, "y_pos": y_pos, "width": width, "height": height, "xm": xm, "row": row, "col": col, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setMaxicodeXPosYPosModeClassCountryPostLM(String text, int x_pos, int y_pos, int mode, int iClass, int country, String post, int lm) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setMaxicode([\'text\':$text, \'x_pos\':$x_pos, \'y_pos\':$y_pos, \'mode\':$mode, \'iClass\':$iClass, \'country\':$country, \'post\':$post, \'lm\':$lm])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setMaxicodeXPosYPosModeClassCountryPostLM', {"text": text, "x_pos": x_pos, "y_pos": y_pos, "mode": mode, "iClass": iClass, "country": country, "post": post, "lm": lm, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printPDF417WithXPosYPosWidthHeightRotateOptionExpression(int x_pos, int y_pos, int width, int height, int rotate, String option, String expression) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::printPDF417WithXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'width\':$width, \'height\':$height, \'rotate\':$rotate, \'option\':$option, \'expression\':$expression])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printPDF417WithXPosYPosWidthHeightRotateOptionExpression', {"x_pos": x_pos, "y_pos": y_pos, "width": width, "height": height, "rotate": rotate, "option": option, "expression": expression, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData(int XPos, int YPos, int rotate, int size, int ecp, int flg, int menu, int multi, int rev, String aztecData) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::printAztecWithXPos([\'XPos\':$XPos, \'YPos\':$YPos, \'rotate\':$rotate, \'size\':$size, \'ecp\':$ecp, \'flg\':$flg, \'menu\':$menu, \'multi\':$multi, \'rev\':$rev, \'aztecData\':$aztecData])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData', {"XPos": XPos, "YPos": YPos, "rotate": rotate, "size": size, "ecp": ecp, "flg": flg, "menu": menu, "multi": multi, "rev": rev, "aztecData": aztecData, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> putBMPWithFilenameXPosYPos(String filename, int x_pos, int y_pos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::putBMPWithFilename([\'filename\':$filename, \'x_pos\':$x_pos, \'y_pos\':$y_pos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::putBMPWithFilenameXPosYPos', {"filename": filename, "x_pos": x_pos, "y_pos": y_pos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> putPCXWithFilenameXPosYPos(String filename, int x_pos, int y_pos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::putPCXWithFilename([\'filename\':$filename, \'x_pos\':$x_pos, \'y_pos\':$y_pos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::putPCXWithFilenameXPosYPos', {"filename": filename, "x_pos": x_pos, "y_pos": y_pos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setReverseWithXStartYStartXWidthYHeight(int x_start, int y_start, int x_width, int y_height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setReverseWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'x_width\':$x_width, \'y_height\':$y_height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setReverseWithXStartYStartXWidthYHeight', {"x_start": x_start, "y_start": y_start, "x_width": x_width, "y_height": y_height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCounterWithCounterNumberStep(int counterNumber, int step) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCounterWithCounterNumber([\'counterNumber\':$counterNumber, \'step\':$step])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCounterWithCounterNumberStep', {"counterNumber": counterNumber, "step": step, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCutterON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCutterON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCutterON', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCutterOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCutterOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCutterOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCutterBATCH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCutterBATCH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCutterBATCH', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCutterPieces(int pieces) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCutterPieces([\'pieces\':$pieces])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCutterPieces', {"pieces": pieces, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPARTIAL_CUTTER_OFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setPARTIAL_CUTTER_OFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPARTIAL_CUTTER_OFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPARTIAL_CUTTER_BATCH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setPARTIAL_CUTTER_BATCH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPARTIAL_CUTTER_BATCH', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPARTIAL_CUTTER_Pieces(int pieces) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setPARTIAL_CUTTER_Pieces([\'pieces\':$pieces])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPARTIAL_CUTTER_Pieces', {"pieces": pieces, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBackOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setBackOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBackOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBackON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setBackON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBackON', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setKEYSwitch(int index, String switcher) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setKEY([\'index\':$index, \'switcher\':$switcher])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setKEYSwitch', {"index": index, "switcher": switcher, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setLEDSwitch(int index, String switcher) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setLED([\'index\':$index, \'switcher\':$switcher])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setLEDSwitch', {"index": index, "switcher": switcher, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPeelON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setPeelON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPeelON', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPeelOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setPeelOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPeelOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setTearON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setTearON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setTearON', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setTearOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setTearOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setTearOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setStriperON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setStriperON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setStriperON', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setStriperOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setStriperOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setStriperOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setHeadON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setHeadON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setHeadON', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setHeadOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setHeadOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setHeadOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setRibbonON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setRibbonON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setRibbonON', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setRibbonOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setRibbonOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setRibbonOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCOM1WithBaudParityDataStop(int baud, String parity, String data, String stop) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setCOM1WithBaud([\'baud\':$baud, \'parity\':$parity, \'data\':$data, \'stop\':$stop])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCOM1WithBaudParityDataStop', {"baud": baud, "parity": parity, "data": data, "stop": stop, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrintKey(String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setPrintKey([\'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPrintKey', {"key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setReprintON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setReprintON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setReprintON', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setReprintOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTOldCommandTSPL@$refId::setReprintOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setReprintOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension PTOldCommandTSPL_Batch on List<PTOldCommandTSPL> {
  //region getters
  
  //endregion

  //region methods
  Future<void> selfTest_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::selfTest_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendCommand_batch(List<String> cmd) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::appendCommand_batch', [for (int i = 0; i < this.length; i++) {"cmd": cmd[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAndLineFeed_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printAndLineFeed_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setFontBold_batch(List<int> bold) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setFontBold_batch', [for (int i = 0; i < this.length; i++) {"bold": bold[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrinterStateAutomaticBackWithStatus_batch(List<int> status) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPrinterStateAutomaticBackWithStatus_batch', [for (int i = 0; i < this.length; i++) {"status": status[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrintAreaSizeWithWidthHeight_batch(List<int> label_width, List<int> label_height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPrintAreaSizeWithWidthHeight_batch', [for (int i = 0; i < this.length; i++) {"label_width": label_width[i], "label_height": label_height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> getPrinterStatus_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::getPrinterStatus_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setGapWithDistanceOffset_batch(List<int> distance, List<int> offset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setGapWithDistanceOffset_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "offset": offset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBlineWithHeightOffset_batch(List<int> height, List<int> offset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBlineWithHeightOffset_batch', [for (int i = 0; i < this.length; i++) {"height": height[i], "offset": offset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setOffsetWithDistance_batch(List<int> distance) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setOffsetWithDistance_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printWithSetsCopies_batch(List<int> sets, List<int> copies) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printWithSetsCopies_batch', [for (int i = 0; i < this.length; i++) {"sets": sets[i], "copies": copies[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch(List<int> x_pos, List<int> y_pos, List<int> font, List<int> rotation, List<int> x_multiplication, List<int> y_multiplication, List<int> safeHeight, List<int> width, List<int> lineSpacing, List<String> text) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "font": font[i], "rotation": rotation[i], "x_multiplication": x_multiplication[i], "y_multiplication": y_multiplication[i], "safeHeight": safeHeight[i], "width": width[i], "lineSpacing": lineSpacing[i], "text": text[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch(List<int> x_pos, List<int> y_pos, List<int> font, List<int> rotation, List<int> x_multiplication, List<int> y_multiplication, List<int> safeHeight, List<int> width, List<int> lineSpacing, List<String> text) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "font": font[i], "rotation": rotation[i], "x_multiplication": x_multiplication[i], "y_multiplication": y_multiplication[i], "safeHeight": safeHeight[i], "width": width[i], "lineSpacing": lineSpacing[i], "text": text[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendTextWithXposYposFontRotationXmultiplicationYmultiplicationText_batch(List<int> x_pos, List<int> y_pos, List<int> font, List<int> rotation, List<int> x_multiplication, List<int> y_multiplication, List<String> text) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::appendTextWithXposYposFontRotationXmultiplicationYmultiplicationText_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "font": font[i], "rotation": rotation[i], "x_multiplication": x_multiplication[i], "y_multiplication": y_multiplication[i], "text": text[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCLS_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCLS_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printBarcodeWithXPosYPosTypeHeightHumanReadableRotationNarrowWideCodeNumber_batch(List<int> x_pos, List<int> y_pos, List<String> type, List<int> height, List<int> readable, List<int> rotation, List<int> narrow, List<int> wide, List<String> codeNumber) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printBarcodeWithXPosYPosTypeHeightHumanReadableRotationNarrowWideCodeNumber_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "type": type[i], "height": height[i], "readable": readable[i], "rotation": rotation[i], "narrow": narrow[i], "wide": wide[i], "codeNumber": codeNumber[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printQRcodeWithXPosYPosEccLevelCellWidthModeRotationModelMaskText_batch(List<int> x_pos, List<int> y_pos, List<String> ecc_level, List<int> width, List<String> mode, List<int> rotation, List<String> model, List<String> mask, List<String> text) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printQRcodeWithXPosYPosEccLevelCellWidthModeRotationModelMaskText_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "ecc_level": ecc_level[i], "width": width[i], "mode": mode[i], "rotation": rotation[i], "model": model[i], "mask": mask[i], "text": text[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setSpeed_batch(List<int> speed) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setSpeed_batch', [for (int i = 0; i < this.length; i++) {"speed": speed[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setDensity_batch(List<int> density) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setDensity_batch', [for (int i = 0; i < this.length; i++) {"density": density[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setDirectionMirror_batch(List<int> direction, List<int> mirror) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setDirectionMirror_batch', [for (int i = 0; i < this.length; i++) {"direction": direction[i], "mirror": mirror[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setReferenceXPosYPos_batch(List<int> x_pos, List<int> y_pos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setReferenceXPosYPos_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCodePage_batch(List<String> codepage) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCodePage_batch', [for (int i = 0; i < this.length; i++) {"codepage": codepage[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setFeedLength_batch(List<int> feedLength) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setFeedLength_batch', [for (int i = 0; i < this.length; i++) {"feedLength": feedLength[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setFormFeed_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setFormFeed_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBackFeed_batch(List<int> distance) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBackFeed_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBackUP_batch(List<int> distance) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBackUP_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setHome_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setHome_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setSoundWithLevelInterval_batch(List<int> level, List<int> interval) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setSoundWithLevelInterval_batch', [for (int i = 0; i < this.length; i++) {"level": level[i], "interval": interval[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCut_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCut_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setLimitFeed_batch(List<int> max_len) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setLimitFeed_batch', [for (int i = 0; i < this.length; i++) {"max_len": max_len[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printBarWithXPosYPosWidthHeight_batch(List<int> x_pos, List<int> y_pos, List<int> width, List<int> height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printBarWithXPosYPosWidthHeight_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "width": width[i], "height": height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBoxWithXStartYStartXEndYEndThickness_batch(List<int> x_start, List<int> y_start, List<int> x_end, List<int> y_end, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBoxWithXStartYStartXEndYEndThickness_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "x_end": x_end[i], "y_end": y_end[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setEllipseWithXStartYStartWidthHeightThickness_batch(List<int> x_start, List<int> y_start, List<int> width, List<int> height, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setEllipseWithXStartYStartWidthHeightThickness_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "width": width[i], "height": height[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCircleWithXStartYStartDiameterThickness_batch(List<int> x_start, List<int> y_start, List<int> diameter, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCircleWithXStartYStartDiameterThickness_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "diameter": diameter[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setEraseWithXStartYStartXWidthYHeight_batch(List<int> x_start, List<int> y_start, List<int> x_width, List<int> y_height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setEraseWithXStartYStartXWidthYHeight_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "x_width": x_width[i], "y_height": y_height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setDmatrixWithExpressionXPosYPosWidthHeightXMRowCol_batch(List<String> expression, List<int> x_pos, List<int> y_pos, List<int> width, List<int> height, List<String> xm, List<String> row, List<String> col) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setDmatrixWithExpressionXPosYPosWidthHeightXMRowCol_batch', [for (int i = 0; i < this.length; i++) {"expression": expression[i], "x_pos": x_pos[i], "y_pos": y_pos[i], "width": width[i], "height": height[i], "xm": xm[i], "row": row[i], "col": col[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setMaxicodeXPosYPosModeClassCountryPostLM_batch(List<String> text, List<int> x_pos, List<int> y_pos, List<int> mode, List<int> iClass, List<int> country, List<String> post, List<int> lm) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setMaxicodeXPosYPosModeClassCountryPostLM_batch', [for (int i = 0; i < this.length; i++) {"text": text[i], "x_pos": x_pos[i], "y_pos": y_pos[i], "mode": mode[i], "iClass": iClass[i], "country": country[i], "post": post[i], "lm": lm[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printPDF417WithXPosYPosWidthHeightRotateOptionExpression_batch(List<int> x_pos, List<int> y_pos, List<int> width, List<int> height, List<int> rotate, List<String> option, List<String> expression) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printPDF417WithXPosYPosWidthHeightRotateOptionExpression_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "width": width[i], "height": height[i], "rotate": rotate[i], "option": option[i], "expression": expression[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData_batch(List<int> XPos, List<int> YPos, List<int> rotate, List<int> size, List<int> ecp, List<int> flg, List<int> menu, List<int> multi, List<int> rev, List<String> aztecData) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData_batch', [for (int i = 0; i < this.length; i++) {"XPos": XPos[i], "YPos": YPos[i], "rotate": rotate[i], "size": size[i], "ecp": ecp[i], "flg": flg[i], "menu": menu[i], "multi": multi[i], "rev": rev[i], "aztecData": aztecData[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> putBMPWithFilenameXPosYPos_batch(List<String> filename, List<int> x_pos, List<int> y_pos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::putBMPWithFilenameXPosYPos_batch', [for (int i = 0; i < this.length; i++) {"filename": filename[i], "x_pos": x_pos[i], "y_pos": y_pos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> putPCXWithFilenameXPosYPos_batch(List<String> filename, List<int> x_pos, List<int> y_pos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::putPCXWithFilenameXPosYPos_batch', [for (int i = 0; i < this.length; i++) {"filename": filename[i], "x_pos": x_pos[i], "y_pos": y_pos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setReverseWithXStartYStartXWidthYHeight_batch(List<int> x_start, List<int> y_start, List<int> x_width, List<int> y_height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setReverseWithXStartYStartXWidthYHeight_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "x_width": x_width[i], "y_height": y_height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCounterWithCounterNumberStep_batch(List<int> counterNumber, List<int> step) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCounterWithCounterNumberStep_batch', [for (int i = 0; i < this.length; i++) {"counterNumber": counterNumber[i], "step": step[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCutterON_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCutterON_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCutterOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCutterOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCutterBATCH_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCutterBATCH_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCutterPieces_batch(List<int> pieces) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCutterPieces_batch', [for (int i = 0; i < this.length; i++) {"pieces": pieces[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPARTIAL_CUTTER_OFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPARTIAL_CUTTER_OFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPARTIAL_CUTTER_BATCH_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPARTIAL_CUTTER_BATCH_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPARTIAL_CUTTER_Pieces_batch(List<int> pieces) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPARTIAL_CUTTER_Pieces_batch', [for (int i = 0; i < this.length; i++) {"pieces": pieces[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBackOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBackOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBackON_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setBackON_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setKEYSwitch_batch(List<int> index, List<String> switcher) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setKEYSwitch_batch', [for (int i = 0; i < this.length; i++) {"index": index[i], "switcher": switcher[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setLEDSwitch_batch(List<int> index, List<String> switcher) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setLEDSwitch_batch', [for (int i = 0; i < this.length; i++) {"index": index[i], "switcher": switcher[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPeelON_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPeelON_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPeelOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPeelOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setTearON_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setTearON_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setTearOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setTearOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setStriperON_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setStriperON_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setStriperOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setStriperOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setHeadON_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setHeadON_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setHeadOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setHeadOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setRibbonON_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setRibbonON_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setRibbonOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setRibbonOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCOM1WithBaudParityDataStop_batch(List<int> baud, List<String> parity, List<String> data, List<String> stop) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setCOM1WithBaudParityDataStop_batch', [for (int i = 0; i < this.length; i++) {"baud": baud[i], "parity": parity[i], "data": data[i], "stop": stop[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrintKey_batch(List<String> key) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setPrintKey_batch', [for (int i = 0; i < this.length; i++) {"key": key[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setReprintON_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setReprintON_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setReprintOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTOldCommandTSPL::setReprintOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}