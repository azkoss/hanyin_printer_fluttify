// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class PTCommandESC extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<PTCommandESC> create__() async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createPTCommandESC');
    final object = PTCommandESC()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<PTCommandESC>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchPTCommandESC', {'length': length});
  
    final List<PTCommandESC> typedResult = resultBatch.map((result) => PTCommandESC()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<NSMutableArray> get_cmdQueue() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTCommandESC::get_cmdQueue", {'refId': refId});
    kNativeObjectPool.addAll((result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'hanyin_printer_fluttify').toList());
    return (result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'hanyin_printer_fluttify').toList();
  }
  
  //endregion

  //region setters
  Future<void> set_cmdQueue(NSMutableArray cmdQueue) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::set_cmdQueue', {'refId': refId, "cmdQueue": cmdQueue.map((it) => it.refId).toList()});
  
  
  }
  
  //endregion

  //region methods
  Future<void> initCommandQueue() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::initCommandQueue([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::initCommandQueue', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendCommandData(NSData cmdData) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendCommandData([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendCommandData', {"cmdData": cmdData.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<NSData> getCommandData() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::getCommandData([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::getCommandData', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(NSData()..refId = result..tag = 'hanyin_printer_fluttify');
      return NSData()..refId = result..tag = 'hanyin_printer_fluttify';
    }
  }
  
  Future<void> appendText(String text) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendText([\'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendText', {"text": text, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> getPrinterStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::getPrinterStatus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::getPrinterStatus', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printSelfTest() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printSelfTest([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printSelfTest', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAndLineFeed() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printAndLineFeed([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndLineFeed', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAndReturnStandardMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printAndReturnStandardMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndReturnStandardMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAndCarriageReturn() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printAndCarriageReturn([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndCarriageReturn', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printDataInPageMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printDataInPageMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printDataInPageMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> turnOnPrintStatusCallBack(bool flag) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::turnOnPrintStatusCallBack([\'flag\':$flag])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::turnOnPrintStatusCallBack', {"flag": flag, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAndFeed(int offset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printAndFeed([\'offset\':$offset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndFeed', {"offset": offset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAndReverseFeed(int offset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printAndReverseFeed([\'offset\':$offset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndReverseFeed', {"offset": offset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAndFeedLines(int lines) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printAndFeedLines([\'lines\':$lines])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndFeedLines', {"lines": lines, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAndReverseFeedLines(int lines) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printAndReverseFeedLines([\'lines\':$lines])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndReverseFeedLines', {"lines": lines, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setLineSpacingDefault() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setLineSpacingDefault([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setLineSpacingDefault', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setLineSpacing(int spacing) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setLineSpacing([\'spacing\':$spacing])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setLineSpacing', {"spacing": spacing, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cancelPrint() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::cancelPrint([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::cancelPrint', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setRightCharacterSpacing(int spacing) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setRightCharacterSpacing([\'spacing\':$spacing])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setRightCharacterSpacing', {"spacing": spacing, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setTextMode(ESCText mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setTextMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setTextMode', {"mode": mode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setTextStyleMiniBolddoubleWidthdoubleHeightunderline(bool mini, bool bold, bool doubleWidth, bool doubleHeight, bool underline) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setTextStyleMini([\'mini\':$mini, \'bold\':$bold, \'doubleWidth\':$doubleWidth, \'doubleHeight\':$doubleHeight, \'underline\':$underline])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setTextStyleMiniBolddoubleWidthdoubleHeightunderline', {"mini": mini, "bold": bold, "doubleWidth": doubleWidth, "doubleHeight": doubleHeight, "underline": underline, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendTextMode(String text, ESCText mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendText([\'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendTextMode', {"text": text, "mode": mode.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setUserDefinedCharacterSet(int set) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setUserDefinedCharacterSet([\'set\':$set])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setUserDefinedCharacterSet', {"set": set, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> defineCharactersWithCodeStartCodeEndhorizontaldata(int codeStart, int codeEnd, int horizontal, NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::defineCharactersWithCodeStart([\'codeStart\':$codeStart, \'codeEnd\':$codeEnd, \'horizontal\':$horizontal])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineCharactersWithCodeStartCodeEndhorizontaldata', {"codeStart": codeStart, "codeEnd": codeEnd, "horizontal": horizontal, "data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setUnderline(int underline) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setUnderline([\'underline\':$underline])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setUnderline', {"underline": underline, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cancelUserDefinedCharacters(int n) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::cancelUserDefinedCharacters([\'n\':$n])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::cancelUserDefinedCharacters', {"n": n, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBold(int bold) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setBold([\'bold\':$bold])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setBold', {"bold": bold, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setDoubleStrike(int doubleStrike) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setDoubleStrike([\'doubleStrike\':$doubleStrike])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setDoubleStrike', {"doubleStrike": doubleStrike, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCharacterFont(int font) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setCharacterFont([\'font\':$font])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterFont', {"font": font, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setInternationalCharacterSet(int set) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setInternationalCharacterSet([\'set\':$set])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setInternationalCharacterSet', {"set": set, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setVerticalMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setVerticalMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setVerticalMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrintColor(int color) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPrintColor([\'color\':$color])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPrintColor', {"color": color, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCharacterCodeTable(int table) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setCharacterCodeTable([\'table\':$table])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterCodeTable', {"table": table, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrinterCodepage(int codepage) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPrinterCodepage([\'codepage\':$codepage])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPrinterCodepage', {"codepage": codepage, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCharacterTransformMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setCharacterTransformMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterTransformMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> enterPrinterSaveMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::enterPrinterSaveMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::enterPrinterSaveMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> exitPrinterSaveMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::exitPrinterSaveMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::exitPrinterSaveMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> getVietnamTransformMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::getVietnamTransformMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::getVietnamTransformMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setVietnamTransformMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setVietnamTransformMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setVietnamTransformMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setThaiTransformStatus(int status) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setThaiTransformStatus([\'status\':$status])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setThaiTransformStatus', {"status": status, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrinterLanguageMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPrinterLanguageMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPrinterLanguageMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setUpToDownMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setUpToDownMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setUpToDownMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCharacterColor(int color) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setCharacterColor([\'color\':$color])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterColor', {"color": color, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBackgroundColor(int color) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setBackgroundColor([\'color\':$color])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setBackgroundColor', {"color": color, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setShadowModeColor(int mode, int color) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setShadowMode([\'mode\':$mode, \'color\':$color])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setShadowModeColor', {"mode": mode, "color": color, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCharacterSize(int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setCharacterSize([\'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterSize', {"size": size, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCharacterWidthHeight(int width, int height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setCharacterWidth([\'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterWidthHeight', {"width": width, "height": height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCharacterMultipleSize(int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setCharacterMultipleSize([\'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterMultipleSize', {"size": size, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setReverse(int reverse) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setReverse([\'reverse\':$reverse])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setReverse', {"reverse": reverse, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setSmooth(int smooth) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setSmooth([\'smooth\':$smooth])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setSmooth', {"smooth": smooth, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPanelButtonMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPanelButtonMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPanelButtonMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> enableOutPaperSensor(bool enable) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::enableOutPaperSensor([\'enable\':$enable])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::enableOutPaperSensor', {"enable": enable, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> enableStopPrintSensor(bool enable) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::enableStopPrintSensor([\'enable\':$enable])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::enableStopPrintSensor', {"enable": enable, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setHorizontalTab() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setHorizontalTab([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setHorizontalTab', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setAbsolutePosition(int position) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setAbsolutePosition([\'position\':$position])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setAbsolutePosition', {"position": position, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setHorizontalTabPositionsData(NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setHorizontalTabPositionsData([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setHorizontalTabPositionsData', {"data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> pageSetPrintDirection(int direction) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::pageSetPrintDirection([\'direction\':$direction])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::pageSetPrintDirection', {"direction": direction, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> pageSetPrintAreaWithXPosYPoswidthheight(int xPos, int yPos, int width, int height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::pageSetPrintAreaWithXPos([\'xPos\':$xPos, \'yPos\':$yPos, \'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::pageSetPrintAreaWithXPosYPoswidthheight', {"xPos": xPos, "yPos": yPos, "width": width, "height": height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setRelativePosition(int position) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setRelativePosition([\'position\':$position])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setRelativePosition', {"position": position, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setJustification(int justification) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setJustification([\'justification\':$justification])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setJustification', {"justification": justification, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> pageSetAbsoluteYPos(int yPos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::pageSetAbsoluteYPos([\'yPos\':$yPos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::pageSetAbsoluteYPos', {"yPos": yPos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setLeftMargin(int left) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setLeftMargin([\'left\':$left])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setLeftMargin', {"left": left, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setLinePrintPositionMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setLinePrintPositionMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setLinePrintPositionMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrintAreaWidth(int width) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPrintAreaWidth([\'width\':$width])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPrintAreaWidth', {"width": width, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> pageSetRelativeYPos(int yPos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::pageSetRelativeYPos([\'yPos\':$yPos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::pageSetRelativeYPos', {"yPos": yPos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setImageModeImageWidthdata(int mode, int width, NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setImageMode([\'mode\':$mode, \'width\':$width])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setImageModeImageWidthdata', {"mode": mode, "width": width, "data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setNVBitImageMode(int imageID, int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setNVBitImage([\'imageID\':$imageID, \'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setNVBitImageMode', {"imageID": imageID, "mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setNVGraphicsMemorySize(String size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setNVGraphicsMemorySize([\'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setNVGraphicsMemorySize', {"size": size, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setGraphicDotDensityX(int fn, int x) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setGraphicDotDensity([\'fn\':$fn, \'x\':$x])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setGraphicDotDensityX', {"fn": fn, "x": x, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printBufferGraphic(int fn) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printBufferGraphic([\'fn\':$fn])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printBufferGraphic', {"fn": fn, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitGraphicRemainingMemory(int fn) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitGraphicRemainingMemory([\'fn\':$fn])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitGraphicRemainingMemory', {"fn": fn, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitDownloadGraphicRemainingMemory(int fn) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitDownloadGraphicRemainingMemory([\'fn\':$fn])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitDownloadGraphicRemainingMemory', {"fn": fn, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitNVGrapihcKeyCodeList() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitNVGrapihcKeyCodeList([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitNVGrapihcKeyCodeList', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> deleteNVGraphicAll() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::deleteNVGraphicAll([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteNVGraphicAll', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> deleteNVGraphicWithKeycode1Keycode2(int keycode1, int keycode2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::deleteNVGraphicWithKeycode1([\'keycode1\':$keycode1, \'keycode2\':$keycode2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteNVGraphicWithKeycode1Keycode2', {"keycode1": keycode1, "keycode2": keycode2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> defineRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight(NSData data, int keycode, int keycode2, int imageWidth, int imageHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::defineRasterNVGraphicData([\'keycode\':$keycode, \'keycode2\':$keycode2, \'imageWidth\':$imageWidth, \'imageHeight\':$imageHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight', {"data": data.refId, "keycode": keycode, "keycode2": keycode2, "imageWidth": imageWidth, "imageHeight": imageHeight, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> defineColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight(NSData data, int keycode, int keycode2, int imageWidth, int imageHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::defineColumnNVGraphicData([\'keycode\':$keycode, \'keycode2\':$keycode2, \'imageWidth\':$imageWidth, \'imageHeight\':$imageHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight', {"data": data.refId, "keycode": keycode, "keycode2": keycode2, "imageWidth": imageWidth, "imageHeight": imageHeight, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printNVGraphicWithKeycodeKeycode2xScaleyScale(int keycode, int keycode2, int xScale, int yScale) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printNVGraphicWithKeycode([\'keycode\':$keycode, \'keycode2\':$keycode2, \'xScale\':$xScale, \'yScale\':$yScale])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printNVGraphicWithKeycodeKeycode2xScaleyScale', {"keycode": keycode, "keycode2": keycode2, "xScale": xScale, "yScale": yScale, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitGraphicKeycodeList() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitGraphicKeycodeList([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitGraphicKeycodeList', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> deleteDownloadedNVGraphicAll() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::deleteDownloadedNVGraphicAll([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteDownloadedNVGraphicAll', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> deleteDownloadedNVGraphicKeycodeKeycode2(int keycode, int keycode2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::deleteDownloadedNVGraphicKeycode([\'keycode\':$keycode, \'keycode2\':$keycode2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteDownloadedNVGraphicKeycodeKeycode2', {"keycode": keycode, "keycode2": keycode2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> defineDownloadedRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight(NSData data, int keycode, int keycode2, int imageWidth, int imageHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::defineDownloadedRasterNVGraphicData([\'keycode\':$keycode, \'keycode2\':$keycode2, \'imageWidth\':$imageWidth, \'imageHeight\':$imageHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineDownloadedRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight', {"data": data.refId, "keycode": keycode, "keycode2": keycode2, "imageWidth": imageWidth, "imageHeight": imageHeight, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> defineDownloadedColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight(NSData data, int keycode, int keycode2, int imageWidth, int imageHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::defineDownloadedColumnNVGraphicData([\'keycode\':$keycode, \'keycode2\':$keycode2, \'imageWidth\':$imageWidth, \'imageHeight\':$imageHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineDownloadedColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight', {"data": data.refId, "keycode": keycode, "keycode2": keycode2, "imageWidth": imageWidth, "imageHeight": imageHeight, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printDownloadedNVGraphicWithKeycodeKeycode2xScaleyScale(int keycode, int keycode2, int xScale, int yScale) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printDownloadedNVGraphicWithKeycode([\'keycode\':$keycode, \'keycode2\':$keycode2, \'xScale\':$xScale, \'yScale\':$yScale])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printDownloadedNVGraphicWithKeycodeKeycode2xScaleyScale', {"keycode": keycode, "keycode2": keycode2, "xScale": xScale, "yScale": yScale, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> storeRasterGraphicDataXScaleyScaleimageWidthimageHeight(NSData data, int xScale, int yScale, int imageWidth, int imageHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::storeRasterGraphicData([\'xScale\':$xScale, \'yScale\':$yScale, \'imageWidth\':$imageWidth, \'imageHeight\':$imageHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::storeRasterGraphicDataXScaleyScaleimageWidthimageHeight', {"data": data.refId, "xScale": xScale, "yScale": yScale, "imageWidth": imageWidth, "imageHeight": imageHeight, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> storeColumnGraphicDataXScaleyScaleimageWidthimageHeight(NSData data, int xScale, int yScale, int imageWidth, int imageHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::storeColumnGraphicData([\'xScale\':$xScale, \'yScale\':$yScale, \'imageWidth\':$imageWidth, \'imageHeight\':$imageHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::storeColumnGraphicDataXScaleyScaleimageWidthimageHeight', {"data": data.refId, "xScale": xScale, "yScale": yScale, "imageWidth": imageWidth, "imageHeight": imageHeight, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> defineNVGraphicDataNumber(NSData data, int number) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::defineNVGraphicData([\'number\':$number])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineNVGraphicDataNumber', {"data": data.refId, "number": number, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> defineDownloadedImageWidthBytesheightBytes(NSData imageData, int widthBytes, int heightBytes) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::defineDownloadedImage([\'widthBytes\':$widthBytes, \'heightBytes\':$heightBytes])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineDownloadedImageWidthBytesheightBytes', {"imageData": imageData.refId, "widthBytes": widthBytes, "heightBytes": heightBytes, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printDownloadedImageWithScale(int scale) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::printDownloadedImageWithScale([\'scale\':$scale])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printDownloadedImageWithScale', {"scale": scale, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitRealTimeStatus(int status) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitRealTimeStatus([\'status\':$status])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitRealTimeStatus', {"status": status, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitPeripheralDeviceStatus(int status) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitPeripheralDeviceStatus([\'status\':$status])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitPeripheralDeviceStatus', {"status": status, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitPaperSonsorStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitPaperSonsorStatus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitPaperSonsorStatus', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setASBStatusWithDrawerOfflineerrorrollPaperpanelSwitch(bool drawer, bool offline, bool error, bool rollPaper, bool panelSwitch) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setASBStatusWithDrawer([\'drawer\':$drawer, \'offline\':$offline, \'error\':$error, \'rollPaper\':$rollPaper, \'panelSwitch\':$panelSwitch])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setASBStatusWithDrawerOfflineerrorrollPaperpanelSwitch', {"drawer": drawer, "offline": offline, "error": error, "rollPaper": rollPaper, "panelSwitch": panelSwitch, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setInkASBWithOfflineDetection(bool offline, bool detection) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setInkASBWithOffline([\'offline\':$offline, \'detection\':$detection])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setInkASBWithOfflineDetection', {"offline": offline, "detection": detection, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitStatus(int status) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitStatus([\'status\':$status])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitStatus', {"status": status, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setHRIFont(int font) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setHRIFont([\'font\':$font])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setHRIFont', {"font": font, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendBarcodeDatajustificationwidthheighthri(ESCBarcode type, String data, int justification, int width, int height, int hri) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendBarcode([\'data\':$data, \'justification\':$justification, \'width\':$width, \'height\':$height, \'hri\':$hri])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendBarcodeDatajustificationwidthheighthri', {"type": type.index, "data": data, "justification": justification, "width": width, "height": height, "hri": hri, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> defineMacro() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::defineMacro([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineMacro', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> executeMacroWithTimesWaitTimesmode(int times, int waitTimes, int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::executeMacroWithTimes([\'times\':$times, \'waitTimes\':$waitTimes, \'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::executeMacroWithTimesWaitTimesmode', {"times": times, "waitTimes": waitTimes, "mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> returnHome() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::returnHome([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::returnHome', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setUnidirectionalPrintMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setUnidirectionalPrintMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setUnidirectionalPrintMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPartialCut1() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPartialCut1([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPartialCut1', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPartialCut3() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPartialCut3([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPartialCut3', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPartialCut() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPartialCut([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPartialCut', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setFullCut() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setFullCut([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setFullCut', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPartialCutWithDistance(int distance) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPartialCutWithDistance([\'distance\':$distance])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPartialCutWithDistance', {"distance": distance, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setFullCutWithDistance(int distance) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setFullCutWithDistance([\'distance\':$distance])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setFullCutWithDistance', {"distance": distance, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCutModeDistance(int mode, int distance) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setCutMode([\'mode\':$mode, \'distance\':$distance])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCutModeDistance', {"mode": mode, "distance": distance, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> kickCashdrawer(int number) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::kickCashdrawer([\'number\':$number])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::kickCashdrawer', {"number": number, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> getPrinterCashdrawerStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::getPrinterCashdrawerStatus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::getPrinterCashdrawerStatus', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> sendRealTimeRequest(int request) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::sendRealTimeRequest([\'request\':$request])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::sendRealTimeRequest', {"request": request, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> generatePulseWithModeTime(int mode, int time) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::generatePulseWithMode([\'mode\':$mode, \'time\':$time])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::generatePulseWithModeTime', {"mode": mode, "time": time, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> executePowerOffSequence() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::executePowerOffSequence([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::executePowerOffSequence', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitSpecifiedStatus(int status) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitSpecifiedStatus([\'status\':$status])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitSpecifiedStatus', {"status": status, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> clearBuffer() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::clearBuffer([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::clearBuffer', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escBeepIntegratedBeeperWithTimesT1T2(int times, int t1, int t2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escBeepIntegratedBeeperWithTimes([\'times\':$times, \'t1\':$t1, \'t2\':$t2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escBeepIntegratedBeeperWithTimesT1T2', {"times": times, "t1": t1, "t2": t2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSetIntegratedBeeperWhenOfflineFactorsOccurATimesT1T2(int a, int times, int t1, int t2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSetIntegratedBeeperWhenOfflineFactorsOccurA([\'a\':$a, \'times\':$times, \'t1\':$t1, \'t2\':$t2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetIntegratedBeeperWhenOfflineFactorsOccurATimesT1T2', {"a": a, "times": times, "t1": t1, "t2": t2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimesT1T2(int times, int t1, int t2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimes([\'times\':$times, \'t1\':$t1, \'t2\':$t2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimesT1T2', {"times": times, "t1": t1, "t2": t2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSelectPeripheralDevice(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSelectPeripheralDevice([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectPeripheralDevice', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> initializePrinter() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::initializePrinter([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::initializePrinter', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPageMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPageMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPageMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setStandardMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setStandardMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setStandardMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escGeneratePulsePinModeONTimeOFFTime(int pin_mode, int on_time, int off_time) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escGeneratePulsePinMode([\'pin_mode\':$pin_mode, \'on_time\':$on_time, \'off_time\':$off_time])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escGeneratePulsePinModeONTimeOFFTime', {"pin_mode": pin_mode, "on_time": on_time, "off_time": off_time, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escExecuteTestPrintTypeMode(int type, int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escExecuteTestPrintType([\'type\':$type, \'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escExecuteTestPrintTypeMode', {"type": type, "mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSetRealTimeCommandLengthTypemode(int cmdLength, int type, int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSetRealTimeCommandLength([\'cmdLength\':$cmdLength, \'type\':$type, \'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetRealTimeCommandLengthTypemode', {"cmdLength": cmdLength, "type": type, "mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escRequestTransmissionOfResponseOrStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escRequestTransmissionOfResponseOrStatus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escRequestTransmissionOfResponseOrStatus', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSelectPrintControlMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSelectPrintControlMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectPrintControlMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setDensity(int density) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setDensity([\'density\':$density])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setDensity', {"density": density, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setSpeed(int speed) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setSpeed([\'speed\':$speed])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setSpeed', {"speed": speed, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSelectNumbersOfPartsForThermalHeadEnergizing(int number) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSelectNumbersOfPartsForThermalHeadEnergizing([\'number\':$number])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectNumbersOfPartsForThermalHeadEnergizing', {"number": number, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPageAreaWithWidthHeightxOffset(int width, int height, int xOffset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setPageAreaWithWidth([\'width\':$width, \'height\':$height, \'xOffset\':$xOffset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPageAreaWithWidthHeightxOffset', {"width": width, "height": height, "xOffset": xOffset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendLineWithXPosYPosxEndyEndmode(int xPos, int yPos, int xEnd, int yEnd, int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendLineWithXPos([\'xPos\':$xPos, \'yPos\':$yPos, \'xEnd\':$xEnd, \'yEnd\':$yEnd, \'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendLineWithXPosYPosxEndyEndmode', {"xPos": xPos, "yPos": yPos, "xEnd": xEnd, "yEnd": yEnd, "mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendRectWithXPosYPosxEndyEndmode(int xPos, int yPos, int xEnd, int yEnd, int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendRectWithXPos([\'xPos\':$xPos, \'yPos\':$yPos, \'xEnd\':$xEnd, \'yEnd\':$yEnd, \'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendRectWithXPosYPosxEndyEndmode', {"xPos": xPos, "yPos": yPos, "xEnd": xEnd, "yEnd": yEnd, "mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escTransmitPrinterID(int id_number) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escTransmitPrinterID([\'id_number\':$id_number])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitPrinterID', {"id_number": id_number, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setMotionUnitsWithHorizontalVertical(int horizontal, int vertical) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setMotionUnitsWithHorizontal([\'horizontal\':$horizontal, \'vertical\':$vertical])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setMotionUnitsWithHorizontalVertical', {"horizontal": horizontal, "vertical": vertical, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escInitializeMaintenanceCounter(int counter) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escInitializeMaintenanceCounter([\'counter\':$counter])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escInitializeMaintenanceCounter', {"counter": counter, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escTransmitMaintenanceCounter(int counter) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escTransmitMaintenanceCounter([\'counter\':$counter])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitMaintenanceCounter', {"counter": counter, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSetOnlineRecoveryWaitTime1WaitTime2(int wait_time1, int wait_time2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSetOnlineRecoveryWaitTime1([\'wait_time1\':$wait_time1, \'wait_time2\':$wait_time2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetOnlineRecoveryWaitTime1WaitTime2', {"wait_time1": wait_time1, "wait_time2": wait_time2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setKanjiWithReverseDoubleWidthdoubleHeightunderline(bool reverse, bool doubleWidth, bool doubleHeight, bool underline) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setKanjiWithReverse([\'reverse\':$reverse, \'doubleWidth\':$doubleWidth, \'doubleHeight\':$doubleHeight, \'underline\':$underline])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiWithReverseDoubleWidthdoubleHeightunderline', {"reverse": reverse, "doubleWidth": doubleWidth, "doubleHeight": doubleHeight, "underline": underline, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setKanjiMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setKanjiMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setKanjiFontMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setKanjiFontMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiFontMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setKanjiUnderline(int underline) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setKanjiUnderline([\'underline\':$underline])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiUnderline', {"underline": underline, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cancelKanjiMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::cancelKanjiMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::cancelKanjiMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> defineKanjiFirstsecond(NSData data, int first, int second) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::defineKanji([\'first\':$first, \'second\':$second])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineKanjiFirstsecond', {"data": data.refId, "first": first, "second": second, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setKanjiCodeSystem(int system) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setKanjiCodeSystem([\'system\':$system])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiCodeSystem', {"system": system, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setKanjiSpacingWithLeftRight(int left, int right) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setKanjiSpacingWithLeft([\'left\':$left, \'right\':$right])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiSpacingWithLeftRight', {"left": left, "right": right, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setKanjiQuadrupleMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::setKanjiQuadrupleMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiQuadrupleMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cancelKanjiDefineWithFirstSecond(int first, int second) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::cancelKanjiDefineWithFirst([\'first\':$first, \'second\':$second])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::cancelKanjiDefineWithFirstSecond', {"first": first, "second": second, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendPDF417DataRowcolumnwidthrowHeighteccModeeccLeveloption(String data, int row, int column, int width, int rowHeight, int eccMode, int eccLevel, int option) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendPDF417Data([\'data\':$data, \'row\':$row, \'column\':$column, \'width\':$width, \'rowHeight\':$rowHeight, \'eccMode\':$eccMode, \'eccLevel\':$eccLevel, \'option\':$option])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendPDF417DataRowcolumnwidthrowHeighteccModeeccLeveloption', {"data": data, "row": row, "column": column, "width": width, "rowHeight": rowHeight, "eccMode": eccMode, "eccLevel": eccLevel, "option": option, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitPDF417SymbolDataSize() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitPDF417SymbolDataSize([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitPDF417SymbolDataSize', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendQRCodeDataJustificationleftMargineccLevelmodelsize(String data, int justification, int leftMargin, int eccLevel, int model, int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendQRCodeData([\'data\':$data, \'justification\':$justification, \'leftMargin\':$leftMargin, \'eccLevel\':$eccLevel, \'model\':$model, \'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendQRCodeDataJustificationleftMargineccLevelmodelsize', {"data": data, "justification": justification, "leftMargin": leftMargin, "eccLevel": eccLevel, "model": model, "size": size, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitQRCodeSymbolDataSize() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitQRCodeSymbolDataSize([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitQRCodeSymbolDataSize', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendMaxiCodeDataMode(String data, int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendMaxiCodeData([\'data\':$data, \'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendMaxiCodeDataMode', {"data": data, "mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitMaxiCodeSymbolDataSize() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitMaxiCodeSymbolDataSize([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitMaxiCodeSymbolDataSize', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendRSS2DataModemoduleWidthmaxWidth(NSData data, int mode, int moduleWidth, int maxWidth) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendRSS2Data([\'mode\':$mode, \'moduleWidth\':$moduleWidth, \'maxWidth\':$maxWidth])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendRSS2DataModemoduleWidthmaxWidth', {"data": data.refId, "mode": mode, "moduleWidth": moduleWidth, "maxWidth": maxWidth, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitRSS2SymbolDataSize() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitRSS2SymbolDataSize([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitRSS2SymbolDataSize', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendCompositeSymbolDataModetypemoduleWidthmaxWidthhriFont(NSData data, int mode, int type, int moduleWidth, int maxWidth, int hriFont) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::appendCompositeSymbolData([\'mode\':$mode, \'type\':$type, \'moduleWidth\':$moduleWidth, \'maxWidth\':$maxWidth, \'hriFont\':$hriFont])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendCompositeSymbolDataModetypemoduleWidthmaxWidthhriFont', {"data": data.refId, "mode": mode, "type": type, "moduleWidth": moduleWidth, "maxWidth": maxWidth, "hriFont": hriFont, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitCompositeSymbolDataSize() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitCompositeSymbolDataSize([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitCompositeSymbolDataSize', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> writeNVUserMemoryData(int address, NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::writeNVUserMemory([\'address\':$address])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::writeNVUserMemoryData', {"address": address, "data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> readNVUserMemoryLength(int address, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::readNVUserMemory([\'address\':$address, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::readNVUserMemoryLength', {"address": address, "length": length, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> deleteRecordWithModeKeykey2(int mode, int key, int key2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::deleteRecordWithMode([\'mode\':$mode, \'key\':$key, \'key2\':$key2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteRecordWithModeKeykey2', {"mode": mode, "key": key, "key2": key2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> storeRecordWithModeKeykey2data(int mode, int key, int key2, NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::storeRecordWithMode([\'mode\':$mode, \'key\':$key, \'key2\':$key2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::storeRecordWithModeKeykey2data', {"mode": mode, "key": key, "key2": key2, "data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitDataInRecordWithModeKeykey2(int mode, int key, int key2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitDataInRecordWithMode([\'mode\':$mode, \'key\':$key, \'key2\':$key2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitDataInRecordWithModeKeykey2', {"mode": mode, "key": key, "key2": key2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitNVMemoryUsedCapacityWithMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitNVMemoryUsedCapacityWithMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitNVMemoryUsedCapacityWithMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitNVMemoryRemainingCapacityWithMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitNVMemoryRemainingCapacityWithMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitNVMemoryRemainingCapacityWithMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> transmitKeyCodeListWithMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::transmitKeyCodeListWithMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitKeyCodeListWithMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> deleteNVMemoryAllWithMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::deleteNVMemoryAllWithMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteNVMemoryAllWithMode', {"mode": mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> changeUserSettingMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::changeUserSettingMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::changeUserSettingMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> endUserSettingMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::endUserSettingMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::endUserSettingMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escChangeMemorySwitchData(NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escChangeMemorySwitchData([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escChangeMemorySwitchData', {"data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escTransmitMemorySwitchSettingA(int a) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escTransmitMemorySwitchSettingA([\'a\':$a])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitMemorySwitchSettingA', {"a": a, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSetCustomizedSettingValuesData(NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSetCustomizedSettingValuesData([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetCustomizedSettingValuesData', {"data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escTransmitCustomizedSettingValuesA(int a) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escTransmitCustomizedSettingValuesA([\'a\':$a])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitCustomizedSettingValuesA', {"a": a, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escCopyUserDefinedPageWithFontNumberD1D2(int font_number, int d1, int d2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escCopyUserDefinedPageWithFontNumber([\'font_number\':$font_number, \'d1\':$d1, \'d2\':$d2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escCopyUserDefinedPageWithFontNumberD1D2', {"font_number": font_number, "d1": d1, "d2": d2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escDefineColumnFormatDataForCharacterCodePageYC1C2Data(int y, int c1, int c2, NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escDefineColumnFormatDataForCharacterCodePageY([\'y\':$y, \'c1\':$c1, \'c2\':$c2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escDefineColumnFormatDataForCharacterCodePageYC1C2Data', {"y": y, "c1": c1, "c2": c2, "data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escDefineRasterFormatDataForCharacterrCodePageXC1C2Data(int x, int c1, int c2, NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escDefineRasterFormatDataForCharacterrCodePageX([\'x\':$x, \'c1\':$c1, \'c2\':$c2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escDefineRasterFormatDataForCharacterrCodePageXC1C2Data', {"x": x, "c1": c1, "c2": c2, "data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escDeleteDataForChracterCodePageC1C2(int c1, int c2) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escDeleteDataForChracterCodePageC1([\'c1\':$c1, \'c2\':$c2])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escDeleteDataForChracterCodePageC1C2', {"c1": c1, "c2": c2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSetConfigurationItemForSerialInterfaceAData(int a, NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSetConfigurationItemForSerialInterfaceA([\'a\':$a])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetConfigurationItemForSerialInterfaceAData', {"a": a, "data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escTransmitConfigurationItemForSerialInterfacePLPHA(int pl, int ph, int a) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escTransmitConfigurationItemForSerialInterfacePL([\'pl\':$pl, \'ph\':$ph, \'a\':$a])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitConfigurationItemForSerialInterfacePLPHA', {"pl": pl, "ph": ph, "a": a, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSetConfigurationItemForBluetoothInterfaceAData(int a, NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSetConfigurationItemForBluetoothInterfaceA([\'a\':$a])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetConfigurationItemForBluetoothInterfaceAData', {"a": a, "data": data.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escTransmitConfigurationItemForBluetoothInterfaceA(int a) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escTransmitConfigurationItemForBluetoothInterfaceA([\'a\':$a])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitConfigurationItemForBluetoothInterfaceA', {"a": a, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escDeletePaperLayout() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escDeletePaperLayout([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escDeletePaperLayout', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSetPaperLayoutPSASBSCSDSESFSGSH(int p, int sa, int sb, int sc, int sd, int se, int sf, int sg, int sh) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSetPaperLayoutP([\'p\':$p, \'sa\':$sa, \'sb\':$sb, \'sc\':$sc, \'sd\':$sd, \'se\':$se, \'sf\':$sf, \'sg\':$sg, \'sh\':$sh])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetPaperLayoutPSASBSCSDSESFSGSH', {"p": p, "sa": sa, "sb": sb, "sc": sc, "sd": sd, "se": se, "sf": sf, "sg": sg, "sh": sh, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escTransmitPaperLayoutInformation(int n) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escTransmitPaperLayoutInformation([\'n\':$n])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitPaperLayoutInformation', {"n": n, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSaveSettingValuesFromWorkAreaIntoStorageAreaFNM(int fn, int m) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSaveSettingValuesFromWorkAreaIntoStorageAreaFN([\'fn\':$fn, \'m\':$m])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSaveSettingValuesFromWorkAreaIntoStorageAreaFNM', {"fn": fn, "m": m, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escLoadSettingValuesStoredInStorageAreaToWorkAreaFNM(int fn, int m) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escLoadSettingValuesStoredInStorageAreaToWorkAreaFN([\'fn\':$fn, \'m\':$m])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escLoadSettingValuesStoredInStorageAreaToWorkAreaFNM', {"fn": fn, "m": m, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFNM(int fn, int m) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFN([\'fn\':$fn, \'m\':$m])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFNM', {"fn": fn, "m": m, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSelectCounterPrintModeWithDigitsJustification(int digits, int justification) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSelectCounterPrintModeWithDigits([\'digits\':$digits, \'justification\':$justification])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectCounterPrintModeWithDigitsJustification', {"digits": digits, "justification": justification, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSelectCounterModeA_MinimumValueMaximumValueCountingModeRepetition(int minimum_value, int maximum_value, int counting_mode, int repetition) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSelectCounterModeA_MinimumValue([\'minimum_value\':$minimum_value, \'maximum_value\':$maximum_value, \'counting_mode\':$counting_mode, \'repetition\':$repetition])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectCounterModeA_MinimumValueMaximumValueCountingModeRepetition', {"minimum_value": minimum_value, "maximum_value": maximum_value, "counting_mode": counting_mode, "repetition": repetition, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSetCounter(int counter) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSetCounter([\'counter\':$counter])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetCounter', {"counter": counter, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escSelectCounterModeB_SASBSNSRSC(int sa, int sb, int sn, int sr, int sc) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escSelectCounterModeB_SA([\'sa\':$sa, \'sb\':$sb, \'sn\':$sn, \'sr\':$sr, \'sc\':$sc])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectCounterModeB_SASBSNSRSC', {"sa": sa, "sb": sb, "sn": sn, "sr": sr, "sc": sc, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escPrintCounter() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escPrintCounter([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escPrintCounter', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escPaperLayoutSettingPSMSASBSCSDSESF(int p, int sm, int sa, int sb, int sc, int sd, int se, int sf) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escPaperLayoutSettingP([\'p\':$p, \'sm\':$sm, \'sa\':$sa, \'sb\':$sb, \'sc\':$sc, \'sd\':$sd, \'se\':$se, \'sf\':$sf])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escPaperLayoutSettingPSMSASBSCSDSESF', {"p": p, "sm": sm, "sa": sa, "sb": sb, "sc": sc, "sd": sd, "se": se, "sf": sf, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escPaperLayoutInformationTransmissionN(int n) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escPaperLayoutInformationTransmissionN([\'n\':$n])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escPaperLayoutInformationTransmissionN', {"n": n, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escTransmitPositioningInformationM(int m) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escTransmitPositioningInformationM([\'m\':$m])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitPositioningInformationM', {"m": m, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escFeedPaperToLabelPeelingPositionM(int m) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escFeedPaperToLabelPeelingPositionM([\'m\':$m])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escFeedPaperToLabelPeelingPositionM', {"m": m, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escFeedPaperToCuttingPositionM(int m) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escFeedPaperToCuttingPositionM([\'m\':$m])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escFeedPaperToCuttingPositionM', {"m": m, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escFeedPaperToPrintStartingPositionM(int m) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escFeedPaperToPrintStartingPositionM([\'m\':$m])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escFeedPaperToPrintStartingPositionM', {"m": m, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> escPaperLayoutErrorSpecialMarginSettingPSN(int p, int sn) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandESC@$refId::escPaperLayoutErrorSpecialMarginSettingP([\'p\':$p, \'sn\':$sn])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escPaperLayoutErrorSpecialMarginSettingPSN', {"p": p, "sn": sn, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension PTCommandESC_Batch on List<PTCommandESC> {
  //region getters
  Future<List<NSMutableArray>> get_cmdQueue_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTCommandESC::get_cmdQueue_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => (result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'hanyin_printer_fluttify').toList()).toList();
    kNativeObjectPool.addAll(typedResult.expand((e) => e));
    return typedResult;
  }
  
  //endregion

  //region methods
  Future<void> initCommandQueue_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::initCommandQueue_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendCommandData_batch(List<NSData> cmdData) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendCommandData_batch', [for (int i = 0; i < this.length; i++) {"cmdData": cmdData[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<NSData>> getCommandData_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::getCommandData_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => NSData()..refId = result..tag = 'hanyin_printer_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<void> appendText_batch(List<String> text) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendText_batch', [for (int i = 0; i < this.length; i++) {"text": text[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> getPrinterStatus_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::getPrinterStatus_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printSelfTest_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printSelfTest_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAndLineFeed_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndLineFeed_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAndReturnStandardMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndReturnStandardMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAndCarriageReturn_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndCarriageReturn_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printDataInPageMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printDataInPageMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> turnOnPrintStatusCallBack_batch(List<bool> flag) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::turnOnPrintStatusCallBack_batch', [for (int i = 0; i < this.length; i++) {"flag": flag[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAndFeed_batch(List<int> offset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndFeed_batch', [for (int i = 0; i < this.length; i++) {"offset": offset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAndReverseFeed_batch(List<int> offset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndReverseFeed_batch', [for (int i = 0; i < this.length; i++) {"offset": offset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAndFeedLines_batch(List<int> lines) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndFeedLines_batch', [for (int i = 0; i < this.length; i++) {"lines": lines[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAndReverseFeedLines_batch(List<int> lines) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printAndReverseFeedLines_batch', [for (int i = 0; i < this.length; i++) {"lines": lines[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setLineSpacingDefault_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setLineSpacingDefault_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setLineSpacing_batch(List<int> spacing) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setLineSpacing_batch', [for (int i = 0; i < this.length; i++) {"spacing": spacing[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cancelPrint_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::cancelPrint_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setRightCharacterSpacing_batch(List<int> spacing) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setRightCharacterSpacing_batch', [for (int i = 0; i < this.length; i++) {"spacing": spacing[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setTextMode_batch(List<ESCText> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setTextMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setTextStyleMiniBolddoubleWidthdoubleHeightunderline_batch(List<bool> mini, List<bool> bold, List<bool> doubleWidth, List<bool> doubleHeight, List<bool> underline) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setTextStyleMiniBolddoubleWidthdoubleHeightunderline_batch', [for (int i = 0; i < this.length; i++) {"mini": mini[i], "bold": bold[i], "doubleWidth": doubleWidth[i], "doubleHeight": doubleHeight[i], "underline": underline[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendTextMode_batch(List<String> text, List<ESCText> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendTextMode_batch', [for (int i = 0; i < this.length; i++) {"text": text[i], "mode": mode[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setUserDefinedCharacterSet_batch(List<int> set) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setUserDefinedCharacterSet_batch', [for (int i = 0; i < this.length; i++) {"set": set[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> defineCharactersWithCodeStartCodeEndhorizontaldata_batch(List<int> codeStart, List<int> codeEnd, List<int> horizontal, List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineCharactersWithCodeStartCodeEndhorizontaldata_batch', [for (int i = 0; i < this.length; i++) {"codeStart": codeStart[i], "codeEnd": codeEnd[i], "horizontal": horizontal[i], "data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setUnderline_batch(List<int> underline) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setUnderline_batch', [for (int i = 0; i < this.length; i++) {"underline": underline[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cancelUserDefinedCharacters_batch(List<int> n) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::cancelUserDefinedCharacters_batch', [for (int i = 0; i < this.length; i++) {"n": n[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBold_batch(List<int> bold) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setBold_batch', [for (int i = 0; i < this.length; i++) {"bold": bold[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setDoubleStrike_batch(List<int> doubleStrike) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setDoubleStrike_batch', [for (int i = 0; i < this.length; i++) {"doubleStrike": doubleStrike[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCharacterFont_batch(List<int> font) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterFont_batch', [for (int i = 0; i < this.length; i++) {"font": font[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setInternationalCharacterSet_batch(List<int> set) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setInternationalCharacterSet_batch', [for (int i = 0; i < this.length; i++) {"set": set[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setVerticalMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setVerticalMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrintColor_batch(List<int> color) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPrintColor_batch', [for (int i = 0; i < this.length; i++) {"color": color[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCharacterCodeTable_batch(List<int> table) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterCodeTable_batch', [for (int i = 0; i < this.length; i++) {"table": table[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrinterCodepage_batch(List<int> codepage) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPrinterCodepage_batch', [for (int i = 0; i < this.length; i++) {"codepage": codepage[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCharacterTransformMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterTransformMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> enterPrinterSaveMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::enterPrinterSaveMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> exitPrinterSaveMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::exitPrinterSaveMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> getVietnamTransformMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::getVietnamTransformMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setVietnamTransformMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setVietnamTransformMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setThaiTransformStatus_batch(List<int> status) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setThaiTransformStatus_batch', [for (int i = 0; i < this.length; i++) {"status": status[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrinterLanguageMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPrinterLanguageMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setUpToDownMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setUpToDownMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCharacterColor_batch(List<int> color) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterColor_batch', [for (int i = 0; i < this.length; i++) {"color": color[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBackgroundColor_batch(List<int> color) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setBackgroundColor_batch', [for (int i = 0; i < this.length; i++) {"color": color[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setShadowModeColor_batch(List<int> mode, List<int> color) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setShadowModeColor_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "color": color[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCharacterSize_batch(List<int> size) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterSize_batch', [for (int i = 0; i < this.length; i++) {"size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCharacterWidthHeight_batch(List<int> width, List<int> height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterWidthHeight_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "height": height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCharacterMultipleSize_batch(List<int> size) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCharacterMultipleSize_batch', [for (int i = 0; i < this.length; i++) {"size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setReverse_batch(List<int> reverse) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setReverse_batch', [for (int i = 0; i < this.length; i++) {"reverse": reverse[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setSmooth_batch(List<int> smooth) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setSmooth_batch', [for (int i = 0; i < this.length; i++) {"smooth": smooth[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPanelButtonMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPanelButtonMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> enableOutPaperSensor_batch(List<bool> enable) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::enableOutPaperSensor_batch', [for (int i = 0; i < this.length; i++) {"enable": enable[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> enableStopPrintSensor_batch(List<bool> enable) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::enableStopPrintSensor_batch', [for (int i = 0; i < this.length; i++) {"enable": enable[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setHorizontalTab_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setHorizontalTab_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setAbsolutePosition_batch(List<int> position) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setAbsolutePosition_batch', [for (int i = 0; i < this.length; i++) {"position": position[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setHorizontalTabPositionsData_batch(List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setHorizontalTabPositionsData_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> pageSetPrintDirection_batch(List<int> direction) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::pageSetPrintDirection_batch', [for (int i = 0; i < this.length; i++) {"direction": direction[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> pageSetPrintAreaWithXPosYPoswidthheight_batch(List<int> xPos, List<int> yPos, List<int> width, List<int> height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::pageSetPrintAreaWithXPosYPoswidthheight_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "width": width[i], "height": height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setRelativePosition_batch(List<int> position) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setRelativePosition_batch', [for (int i = 0; i < this.length; i++) {"position": position[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setJustification_batch(List<int> justification) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setJustification_batch', [for (int i = 0; i < this.length; i++) {"justification": justification[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> pageSetAbsoluteYPos_batch(List<int> yPos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::pageSetAbsoluteYPos_batch', [for (int i = 0; i < this.length; i++) {"yPos": yPos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setLeftMargin_batch(List<int> left) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setLeftMargin_batch', [for (int i = 0; i < this.length; i++) {"left": left[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setLinePrintPositionMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setLinePrintPositionMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrintAreaWidth_batch(List<int> width) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPrintAreaWidth_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> pageSetRelativeYPos_batch(List<int> yPos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::pageSetRelativeYPos_batch', [for (int i = 0; i < this.length; i++) {"yPos": yPos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setImageModeImageWidthdata_batch(List<int> mode, List<int> width, List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setImageModeImageWidthdata_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "width": width[i], "data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setNVBitImageMode_batch(List<int> imageID, List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setNVBitImageMode_batch', [for (int i = 0; i < this.length; i++) {"imageID": imageID[i], "mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setNVGraphicsMemorySize_batch(List<String> size) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setNVGraphicsMemorySize_batch', [for (int i = 0; i < this.length; i++) {"size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setGraphicDotDensityX_batch(List<int> fn, List<int> x) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setGraphicDotDensityX_batch', [for (int i = 0; i < this.length; i++) {"fn": fn[i], "x": x[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printBufferGraphic_batch(List<int> fn) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printBufferGraphic_batch', [for (int i = 0; i < this.length; i++) {"fn": fn[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitGraphicRemainingMemory_batch(List<int> fn) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitGraphicRemainingMemory_batch', [for (int i = 0; i < this.length; i++) {"fn": fn[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitDownloadGraphicRemainingMemory_batch(List<int> fn) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitDownloadGraphicRemainingMemory_batch', [for (int i = 0; i < this.length; i++) {"fn": fn[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitNVGrapihcKeyCodeList_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitNVGrapihcKeyCodeList_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> deleteNVGraphicAll_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteNVGraphicAll_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> deleteNVGraphicWithKeycode1Keycode2_batch(List<int> keycode1, List<int> keycode2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteNVGraphicWithKeycode1Keycode2_batch', [for (int i = 0; i < this.length; i++) {"keycode1": keycode1[i], "keycode2": keycode2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> defineRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch(List<NSData> data, List<int> keycode, List<int> keycode2, List<int> imageWidth, List<int> imageHeight) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "keycode": keycode[i], "keycode2": keycode2[i], "imageWidth": imageWidth[i], "imageHeight": imageHeight[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> defineColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch(List<NSData> data, List<int> keycode, List<int> keycode2, List<int> imageWidth, List<int> imageHeight) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "keycode": keycode[i], "keycode2": keycode2[i], "imageWidth": imageWidth[i], "imageHeight": imageHeight[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printNVGraphicWithKeycodeKeycode2xScaleyScale_batch(List<int> keycode, List<int> keycode2, List<int> xScale, List<int> yScale) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printNVGraphicWithKeycodeKeycode2xScaleyScale_batch', [for (int i = 0; i < this.length; i++) {"keycode": keycode[i], "keycode2": keycode2[i], "xScale": xScale[i], "yScale": yScale[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitGraphicKeycodeList_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitGraphicKeycodeList_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> deleteDownloadedNVGraphicAll_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteDownloadedNVGraphicAll_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> deleteDownloadedNVGraphicKeycodeKeycode2_batch(List<int> keycode, List<int> keycode2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteDownloadedNVGraphicKeycodeKeycode2_batch', [for (int i = 0; i < this.length; i++) {"keycode": keycode[i], "keycode2": keycode2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> defineDownloadedRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch(List<NSData> data, List<int> keycode, List<int> keycode2, List<int> imageWidth, List<int> imageHeight) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineDownloadedRasterNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "keycode": keycode[i], "keycode2": keycode2[i], "imageWidth": imageWidth[i], "imageHeight": imageHeight[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> defineDownloadedColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch(List<NSData> data, List<int> keycode, List<int> keycode2, List<int> imageWidth, List<int> imageHeight) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineDownloadedColumnNVGraphicDataKeycodekeycode2imageWidthimageHeight_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "keycode": keycode[i], "keycode2": keycode2[i], "imageWidth": imageWidth[i], "imageHeight": imageHeight[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printDownloadedNVGraphicWithKeycodeKeycode2xScaleyScale_batch(List<int> keycode, List<int> keycode2, List<int> xScale, List<int> yScale) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printDownloadedNVGraphicWithKeycodeKeycode2xScaleyScale_batch', [for (int i = 0; i < this.length; i++) {"keycode": keycode[i], "keycode2": keycode2[i], "xScale": xScale[i], "yScale": yScale[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> storeRasterGraphicDataXScaleyScaleimageWidthimageHeight_batch(List<NSData> data, List<int> xScale, List<int> yScale, List<int> imageWidth, List<int> imageHeight) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::storeRasterGraphicDataXScaleyScaleimageWidthimageHeight_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "xScale": xScale[i], "yScale": yScale[i], "imageWidth": imageWidth[i], "imageHeight": imageHeight[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> storeColumnGraphicDataXScaleyScaleimageWidthimageHeight_batch(List<NSData> data, List<int> xScale, List<int> yScale, List<int> imageWidth, List<int> imageHeight) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::storeColumnGraphicDataXScaleyScaleimageWidthimageHeight_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "xScale": xScale[i], "yScale": yScale[i], "imageWidth": imageWidth[i], "imageHeight": imageHeight[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> defineNVGraphicDataNumber_batch(List<NSData> data, List<int> number) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineNVGraphicDataNumber_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "number": number[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> defineDownloadedImageWidthBytesheightBytes_batch(List<NSData> imageData, List<int> widthBytes, List<int> heightBytes) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineDownloadedImageWidthBytesheightBytes_batch', [for (int i = 0; i < this.length; i++) {"imageData": imageData[i].refId, "widthBytes": widthBytes[i], "heightBytes": heightBytes[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printDownloadedImageWithScale_batch(List<int> scale) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::printDownloadedImageWithScale_batch', [for (int i = 0; i < this.length; i++) {"scale": scale[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitRealTimeStatus_batch(List<int> status) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitRealTimeStatus_batch', [for (int i = 0; i < this.length; i++) {"status": status[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitPeripheralDeviceStatus_batch(List<int> status) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitPeripheralDeviceStatus_batch', [for (int i = 0; i < this.length; i++) {"status": status[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitPaperSonsorStatus_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitPaperSonsorStatus_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setASBStatusWithDrawerOfflineerrorrollPaperpanelSwitch_batch(List<bool> drawer, List<bool> offline, List<bool> error, List<bool> rollPaper, List<bool> panelSwitch) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setASBStatusWithDrawerOfflineerrorrollPaperpanelSwitch_batch', [for (int i = 0; i < this.length; i++) {"drawer": drawer[i], "offline": offline[i], "error": error[i], "rollPaper": rollPaper[i], "panelSwitch": panelSwitch[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setInkASBWithOfflineDetection_batch(List<bool> offline, List<bool> detection) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setInkASBWithOfflineDetection_batch', [for (int i = 0; i < this.length; i++) {"offline": offline[i], "detection": detection[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitStatus_batch(List<int> status) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitStatus_batch', [for (int i = 0; i < this.length; i++) {"status": status[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setHRIFont_batch(List<int> font) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setHRIFont_batch', [for (int i = 0; i < this.length; i++) {"font": font[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendBarcodeDatajustificationwidthheighthri_batch(List<ESCBarcode> type, List<String> data, List<int> justification, List<int> width, List<int> height, List<int> hri) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendBarcodeDatajustificationwidthheighthri_batch', [for (int i = 0; i < this.length; i++) {"type": type[i].index, "data": data[i], "justification": justification[i], "width": width[i], "height": height[i], "hri": hri[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> defineMacro_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineMacro_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> executeMacroWithTimesWaitTimesmode_batch(List<int> times, List<int> waitTimes, List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::executeMacroWithTimesWaitTimesmode_batch', [for (int i = 0; i < this.length; i++) {"times": times[i], "waitTimes": waitTimes[i], "mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> returnHome_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::returnHome_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setUnidirectionalPrintMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setUnidirectionalPrintMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPartialCut1_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPartialCut1_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPartialCut3_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPartialCut3_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPartialCut_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPartialCut_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setFullCut_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setFullCut_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPartialCutWithDistance_batch(List<int> distance) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPartialCutWithDistance_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setFullCutWithDistance_batch(List<int> distance) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setFullCutWithDistance_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCutModeDistance_batch(List<int> mode, List<int> distance) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setCutModeDistance_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "distance": distance[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> kickCashdrawer_batch(List<int> number) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::kickCashdrawer_batch', [for (int i = 0; i < this.length; i++) {"number": number[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> getPrinterCashdrawerStatus_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::getPrinterCashdrawerStatus_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> sendRealTimeRequest_batch(List<int> request) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::sendRealTimeRequest_batch', [for (int i = 0; i < this.length; i++) {"request": request[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> generatePulseWithModeTime_batch(List<int> mode, List<int> time) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::generatePulseWithModeTime_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "time": time[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> executePowerOffSequence_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::executePowerOffSequence_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitSpecifiedStatus_batch(List<int> status) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitSpecifiedStatus_batch', [for (int i = 0; i < this.length; i++) {"status": status[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> clearBuffer_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::clearBuffer_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escBeepIntegratedBeeperWithTimesT1T2_batch(List<int> times, List<int> t1, List<int> t2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escBeepIntegratedBeeperWithTimesT1T2_batch', [for (int i = 0; i < this.length; i++) {"times": times[i], "t1": t1[i], "t2": t2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSetIntegratedBeeperWhenOfflineFactorsOccurATimesT1T2_batch(List<int> a, List<int> times, List<int> t1, List<int> t2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetIntegratedBeeperWhenOfflineFactorsOccurATimesT1T2_batch', [for (int i = 0; i < this.length; i++) {"a": a[i], "times": times[i], "t1": t1[i], "t2": t2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimesT1T2_batch(List<int> times, List<int> t1, List<int> t2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetIntegratedBeeperExceptWhenOfflineFactorsOccurWithTimesT1T2_batch', [for (int i = 0; i < this.length; i++) {"times": times[i], "t1": t1[i], "t2": t2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSelectPeripheralDevice_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectPeripheralDevice_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> initializePrinter_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::initializePrinter_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPageMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPageMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setStandardMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setStandardMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escGeneratePulsePinModeONTimeOFFTime_batch(List<int> pin_mode, List<int> on_time, List<int> off_time) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escGeneratePulsePinModeONTimeOFFTime_batch', [for (int i = 0; i < this.length; i++) {"pin_mode": pin_mode[i], "on_time": on_time[i], "off_time": off_time[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escExecuteTestPrintTypeMode_batch(List<int> type, List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escExecuteTestPrintTypeMode_batch', [for (int i = 0; i < this.length; i++) {"type": type[i], "mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSetRealTimeCommandLengthTypemode_batch(List<int> cmdLength, List<int> type, List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetRealTimeCommandLengthTypemode_batch', [for (int i = 0; i < this.length; i++) {"cmdLength": cmdLength[i], "type": type[i], "mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escRequestTransmissionOfResponseOrStatus_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escRequestTransmissionOfResponseOrStatus_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSelectPrintControlMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectPrintControlMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setDensity_batch(List<int> density) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setDensity_batch', [for (int i = 0; i < this.length; i++) {"density": density[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setSpeed_batch(List<int> speed) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setSpeed_batch', [for (int i = 0; i < this.length; i++) {"speed": speed[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSelectNumbersOfPartsForThermalHeadEnergizing_batch(List<int> number) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectNumbersOfPartsForThermalHeadEnergizing_batch', [for (int i = 0; i < this.length; i++) {"number": number[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPageAreaWithWidthHeightxOffset_batch(List<int> width, List<int> height, List<int> xOffset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setPageAreaWithWidthHeightxOffset_batch', [for (int i = 0; i < this.length; i++) {"width": width[i], "height": height[i], "xOffset": xOffset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendLineWithXPosYPosxEndyEndmode_batch(List<int> xPos, List<int> yPos, List<int> xEnd, List<int> yEnd, List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendLineWithXPosYPosxEndyEndmode_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "xEnd": xEnd[i], "yEnd": yEnd[i], "mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendRectWithXPosYPosxEndyEndmode_batch(List<int> xPos, List<int> yPos, List<int> xEnd, List<int> yEnd, List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendRectWithXPosYPosxEndyEndmode_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "xEnd": xEnd[i], "yEnd": yEnd[i], "mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escTransmitPrinterID_batch(List<int> id_number) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitPrinterID_batch', [for (int i = 0; i < this.length; i++) {"id_number": id_number[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setMotionUnitsWithHorizontalVertical_batch(List<int> horizontal, List<int> vertical) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setMotionUnitsWithHorizontalVertical_batch', [for (int i = 0; i < this.length; i++) {"horizontal": horizontal[i], "vertical": vertical[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escInitializeMaintenanceCounter_batch(List<int> counter) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escInitializeMaintenanceCounter_batch', [for (int i = 0; i < this.length; i++) {"counter": counter[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escTransmitMaintenanceCounter_batch(List<int> counter) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitMaintenanceCounter_batch', [for (int i = 0; i < this.length; i++) {"counter": counter[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSetOnlineRecoveryWaitTime1WaitTime2_batch(List<int> wait_time1, List<int> wait_time2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetOnlineRecoveryWaitTime1WaitTime2_batch', [for (int i = 0; i < this.length; i++) {"wait_time1": wait_time1[i], "wait_time2": wait_time2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setKanjiWithReverseDoubleWidthdoubleHeightunderline_batch(List<bool> reverse, List<bool> doubleWidth, List<bool> doubleHeight, List<bool> underline) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiWithReverseDoubleWidthdoubleHeightunderline_batch', [for (int i = 0; i < this.length; i++) {"reverse": reverse[i], "doubleWidth": doubleWidth[i], "doubleHeight": doubleHeight[i], "underline": underline[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setKanjiMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setKanjiFontMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiFontMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setKanjiUnderline_batch(List<int> underline) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiUnderline_batch', [for (int i = 0; i < this.length; i++) {"underline": underline[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cancelKanjiMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::cancelKanjiMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> defineKanjiFirstsecond_batch(List<NSData> data, List<int> first, List<int> second) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::defineKanjiFirstsecond_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "first": first[i], "second": second[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setKanjiCodeSystem_batch(List<int> system) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiCodeSystem_batch', [for (int i = 0; i < this.length; i++) {"system": system[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setKanjiSpacingWithLeftRight_batch(List<int> left, List<int> right) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiSpacingWithLeftRight_batch', [for (int i = 0; i < this.length; i++) {"left": left[i], "right": right[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setKanjiQuadrupleMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::setKanjiQuadrupleMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cancelKanjiDefineWithFirstSecond_batch(List<int> first, List<int> second) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::cancelKanjiDefineWithFirstSecond_batch', [for (int i = 0; i < this.length; i++) {"first": first[i], "second": second[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendPDF417DataRowcolumnwidthrowHeighteccModeeccLeveloption_batch(List<String> data, List<int> row, List<int> column, List<int> width, List<int> rowHeight, List<int> eccMode, List<int> eccLevel, List<int> option) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendPDF417DataRowcolumnwidthrowHeighteccModeeccLeveloption_batch', [for (int i = 0; i < this.length; i++) {"data": data[i], "row": row[i], "column": column[i], "width": width[i], "rowHeight": rowHeight[i], "eccMode": eccMode[i], "eccLevel": eccLevel[i], "option": option[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitPDF417SymbolDataSize_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitPDF417SymbolDataSize_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendQRCodeDataJustificationleftMargineccLevelmodelsize_batch(List<String> data, List<int> justification, List<int> leftMargin, List<int> eccLevel, List<int> model, List<int> size) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendQRCodeDataJustificationleftMargineccLevelmodelsize_batch', [for (int i = 0; i < this.length; i++) {"data": data[i], "justification": justification[i], "leftMargin": leftMargin[i], "eccLevel": eccLevel[i], "model": model[i], "size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitQRCodeSymbolDataSize_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitQRCodeSymbolDataSize_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendMaxiCodeDataMode_batch(List<String> data, List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendMaxiCodeDataMode_batch', [for (int i = 0; i < this.length; i++) {"data": data[i], "mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitMaxiCodeSymbolDataSize_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitMaxiCodeSymbolDataSize_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendRSS2DataModemoduleWidthmaxWidth_batch(List<NSData> data, List<int> mode, List<int> moduleWidth, List<int> maxWidth) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendRSS2DataModemoduleWidthmaxWidth_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "mode": mode[i], "moduleWidth": moduleWidth[i], "maxWidth": maxWidth[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitRSS2SymbolDataSize_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitRSS2SymbolDataSize_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendCompositeSymbolDataModetypemoduleWidthmaxWidthhriFont_batch(List<NSData> data, List<int> mode, List<int> type, List<int> moduleWidth, List<int> maxWidth, List<int> hriFont) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::appendCompositeSymbolDataModetypemoduleWidthmaxWidthhriFont_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "mode": mode[i], "type": type[i], "moduleWidth": moduleWidth[i], "maxWidth": maxWidth[i], "hriFont": hriFont[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitCompositeSymbolDataSize_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitCompositeSymbolDataSize_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> writeNVUserMemoryData_batch(List<int> address, List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::writeNVUserMemoryData_batch', [for (int i = 0; i < this.length; i++) {"address": address[i], "data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> readNVUserMemoryLength_batch(List<int> address, List<int> length) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::readNVUserMemoryLength_batch', [for (int i = 0; i < this.length; i++) {"address": address[i], "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> deleteRecordWithModeKeykey2_batch(List<int> mode, List<int> key, List<int> key2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteRecordWithModeKeykey2_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "key": key[i], "key2": key2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> storeRecordWithModeKeykey2data_batch(List<int> mode, List<int> key, List<int> key2, List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::storeRecordWithModeKeykey2data_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "key": key[i], "key2": key2[i], "data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitDataInRecordWithModeKeykey2_batch(List<int> mode, List<int> key, List<int> key2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitDataInRecordWithModeKeykey2_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "key": key[i], "key2": key2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitNVMemoryUsedCapacityWithMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitNVMemoryUsedCapacityWithMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitNVMemoryRemainingCapacityWithMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitNVMemoryRemainingCapacityWithMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> transmitKeyCodeListWithMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::transmitKeyCodeListWithMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> deleteNVMemoryAllWithMode_batch(List<int> mode) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::deleteNVMemoryAllWithMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> changeUserSettingMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::changeUserSettingMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> endUserSettingMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::endUserSettingMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escChangeMemorySwitchData_batch(List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escChangeMemorySwitchData_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escTransmitMemorySwitchSettingA_batch(List<int> a) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitMemorySwitchSettingA_batch', [for (int i = 0; i < this.length; i++) {"a": a[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSetCustomizedSettingValuesData_batch(List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetCustomizedSettingValuesData_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escTransmitCustomizedSettingValuesA_batch(List<int> a) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitCustomizedSettingValuesA_batch', [for (int i = 0; i < this.length; i++) {"a": a[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escCopyUserDefinedPageWithFontNumberD1D2_batch(List<int> font_number, List<int> d1, List<int> d2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escCopyUserDefinedPageWithFontNumberD1D2_batch', [for (int i = 0; i < this.length; i++) {"font_number": font_number[i], "d1": d1[i], "d2": d2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escDefineColumnFormatDataForCharacterCodePageYC1C2Data_batch(List<int> y, List<int> c1, List<int> c2, List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escDefineColumnFormatDataForCharacterCodePageYC1C2Data_batch', [for (int i = 0; i < this.length; i++) {"y": y[i], "c1": c1[i], "c2": c2[i], "data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escDefineRasterFormatDataForCharacterrCodePageXC1C2Data_batch(List<int> x, List<int> c1, List<int> c2, List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escDefineRasterFormatDataForCharacterrCodePageXC1C2Data_batch', [for (int i = 0; i < this.length; i++) {"x": x[i], "c1": c1[i], "c2": c2[i], "data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escDeleteDataForChracterCodePageC1C2_batch(List<int> c1, List<int> c2) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escDeleteDataForChracterCodePageC1C2_batch', [for (int i = 0; i < this.length; i++) {"c1": c1[i], "c2": c2[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSetConfigurationItemForSerialInterfaceAData_batch(List<int> a, List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetConfigurationItemForSerialInterfaceAData_batch', [for (int i = 0; i < this.length; i++) {"a": a[i], "data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escTransmitConfigurationItemForSerialInterfacePLPHA_batch(List<int> pl, List<int> ph, List<int> a) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitConfigurationItemForSerialInterfacePLPHA_batch', [for (int i = 0; i < this.length; i++) {"pl": pl[i], "ph": ph[i], "a": a[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSetConfigurationItemForBluetoothInterfaceAData_batch(List<int> a, List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetConfigurationItemForBluetoothInterfaceAData_batch', [for (int i = 0; i < this.length; i++) {"a": a[i], "data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escTransmitConfigurationItemForBluetoothInterfaceA_batch(List<int> a) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitConfigurationItemForBluetoothInterfaceA_batch', [for (int i = 0; i < this.length; i++) {"a": a[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escDeletePaperLayout_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escDeletePaperLayout_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSetPaperLayoutPSASBSCSDSESFSGSH_batch(List<int> p, List<int> sa, List<int> sb, List<int> sc, List<int> sd, List<int> se, List<int> sf, List<int> sg, List<int> sh) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetPaperLayoutPSASBSCSDSESFSGSH_batch', [for (int i = 0; i < this.length; i++) {"p": p[i], "sa": sa[i], "sb": sb[i], "sc": sc[i], "sd": sd[i], "se": se[i], "sf": sf[i], "sg": sg[i], "sh": sh[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escTransmitPaperLayoutInformation_batch(List<int> n) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitPaperLayoutInformation_batch', [for (int i = 0; i < this.length; i++) {"n": n[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSaveSettingValuesFromWorkAreaIntoStorageAreaFNM_batch(List<int> fn, List<int> m) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSaveSettingValuesFromWorkAreaIntoStorageAreaFNM_batch', [for (int i = 0; i < this.length; i++) {"fn": fn[i], "m": m[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escLoadSettingValuesStoredInStorageAreaToWorkAreaFNM_batch(List<int> fn, List<int> m) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escLoadSettingValuesStoredInStorageAreaToWorkAreaFNM_batch', [for (int i = 0; i < this.length; i++) {"fn": fn[i], "m": m[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFNM_batch(List<int> fn, List<int> m) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectSettingValuesLoadedToWorkAreaAfterInitializationProcessFNM_batch', [for (int i = 0; i < this.length; i++) {"fn": fn[i], "m": m[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSelectCounterPrintModeWithDigitsJustification_batch(List<int> digits, List<int> justification) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectCounterPrintModeWithDigitsJustification_batch', [for (int i = 0; i < this.length; i++) {"digits": digits[i], "justification": justification[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSelectCounterModeA_MinimumValueMaximumValueCountingModeRepetition_batch(List<int> minimum_value, List<int> maximum_value, List<int> counting_mode, List<int> repetition) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectCounterModeA_MinimumValueMaximumValueCountingModeRepetition_batch', [for (int i = 0; i < this.length; i++) {"minimum_value": minimum_value[i], "maximum_value": maximum_value[i], "counting_mode": counting_mode[i], "repetition": repetition[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSetCounter_batch(List<int> counter) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSetCounter_batch', [for (int i = 0; i < this.length; i++) {"counter": counter[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escSelectCounterModeB_SASBSNSRSC_batch(List<int> sa, List<int> sb, List<int> sn, List<int> sr, List<int> sc) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escSelectCounterModeB_SASBSNSRSC_batch', [for (int i = 0; i < this.length; i++) {"sa": sa[i], "sb": sb[i], "sn": sn[i], "sr": sr[i], "sc": sc[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escPrintCounter_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escPrintCounter_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escPaperLayoutSettingPSMSASBSCSDSESF_batch(List<int> p, List<int> sm, List<int> sa, List<int> sb, List<int> sc, List<int> sd, List<int> se, List<int> sf) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escPaperLayoutSettingPSMSASBSCSDSESF_batch', [for (int i = 0; i < this.length; i++) {"p": p[i], "sm": sm[i], "sa": sa[i], "sb": sb[i], "sc": sc[i], "sd": sd[i], "se": se[i], "sf": sf[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escPaperLayoutInformationTransmissionN_batch(List<int> n) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escPaperLayoutInformationTransmissionN_batch', [for (int i = 0; i < this.length; i++) {"n": n[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escTransmitPositioningInformationM_batch(List<int> m) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escTransmitPositioningInformationM_batch', [for (int i = 0; i < this.length; i++) {"m": m[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escFeedPaperToLabelPeelingPositionM_batch(List<int> m) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escFeedPaperToLabelPeelingPositionM_batch', [for (int i = 0; i < this.length; i++) {"m": m[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escFeedPaperToCuttingPositionM_batch(List<int> m) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escFeedPaperToCuttingPositionM_batch', [for (int i = 0; i < this.length; i++) {"m": m[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escFeedPaperToPrintStartingPositionM_batch(List<int> m) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escFeedPaperToPrintStartingPositionM_batch', [for (int i = 0; i < this.length; i++) {"m": m[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> escPaperLayoutErrorSpecialMarginSettingPSN_batch(List<int> p, List<int> sn) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandESC::escPaperLayoutErrorSpecialMarginSettingPSN_batch', [for (int i = 0; i < this.length; i++) {"p": p[i], "sn": sn[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}