// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class PTCommandTSPL extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<PTCommandTSPL> create__() async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createPTCommandTSPL');
    final object = PTCommandTSPL()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<PTCommandTSPL>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchPTCommandTSPL', {'length': length});
  
    final List<PTCommandTSPL> typedResult = resultBatch.map((result) => PTCommandTSPL()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  Future<void> selfTest() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::selfTest([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::selfTest', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendCommand(String cmd) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::appendCommand([\'cmd\':$cmd])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::appendCommand', {"cmd": cmd, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrintAreaSizeWithWidthHeight(int label_width, int label_height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setPrintAreaSizeWithWidth([\'label_width\':$label_width, \'label_height\':$label_height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrintAreaSizeWithWidthHeight', {"label_width": label_width, "label_height": label_height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setGapWithDistanceOffset(int distance, int offset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setGapWithDistance([\'distance\':$distance, \'offset\':$offset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setGapWithDistanceOffset', {"distance": distance, "offset": offset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBlineWithHeightOffset(int height, int offset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setBlineWithHeight([\'height\':$height, \'offset\':$offset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setBlineWithHeightOffset', {"height": height, "offset": offset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setOffsetWithDistance(int distance) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setOffsetWithDistance([\'distance\':$distance])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setOffsetWithDistance', {"distance": distance, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> feedToNextLabel() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::feedToNextLabel([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::feedToNextLabel', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setFeedLength(int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setFeedLength([\'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setFeedLength', {"length": length, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrintSpeed(PTTSCPrintSpeed speed) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setPrintSpeed([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrintSpeed', {"speed": speed.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrintDensity(PTTSCPrintDensity density) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setPrintDensity([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrintDensity', {"density": density.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrintDirectionMirror(PTTSCPrintDirection direction, PTTSCPrintStyle mirror) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setPrintDirection([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrintDirectionMirror', {"direction": direction.index, "mirror": mirror.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setReferenceXPosYPos(int x_pos, int y_pos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setReferenceXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setReferenceXPosYPos', {"x_pos": x_pos, "y_pos": y_pos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCodePage(PTTSCCharacterStyle codepage) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setCodePage([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCodePage', {"codepage": codepage.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCLS() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setCLS([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCLS', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBackFeed(int distance) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setBackFeed([\'distance\':$distance])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setBackFeed', {"distance": distance, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBackUP(int distance) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setBackUP([\'distance\':$distance])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setBackUP', {"distance": distance, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setHome() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setHome([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setHome', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printWithSetsCopies(int sets, int copies) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::printWithSets([\'sets\':$sets, \'copies\':$copies])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printWithSetsCopies', {"sets": sets, "copies": copies, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setSoundWithLevelInterval(int level, int interval) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setSoundWithLevel([\'level\':$level, \'interval\':$interval])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setSoundWithLevelInterval', {"level": level, "interval": interval, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCut() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setCut([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCut', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setLimitFeed(int max_len) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setLimitFeed([\'max_len\':$max_len])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setLimitFeed', {"max_len": max_len, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setFontBold(bool bold) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setFontBold([\'bold\':$bold])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setFontBold', {"bold": bold, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrinterStateAutomaticBackWithStatus(bool status) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setPrinterStateAutomaticBackWithStatus([\'status\':$status])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrinterStateAutomaticBackWithStatus', {"status": status, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> getPrinterStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::getPrinterStatus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::getPrinterStatus', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> drawBarWithXPosYPoswidthheight(int x_pos, int y_pos, int width, int height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::drawBarWithXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::drawBarWithXPosYPoswidthheight', {"x_pos": x_pos, "y_pos": y_pos, "width": width, "height": height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printBarcodeWithXPosYPostypeheightreadablerotationratiocontext(int x_pos, int y_pos, PTTSCBarcodeStyle type, int height, PTTSCBarcodeReadbleStyle readable, PTTSCStyleRotation rotation, PTTSCBarcodeRatio ratio, String context) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::printBarcodeWithXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'height\':$height, \'context\':$context])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printBarcodeWithXPosYPostypeheightreadablerotationratiocontext', {"x_pos": x_pos, "y_pos": y_pos, "type": type.index, "height": height, "readable": readable.index, "rotation": rotation.index, "ratio": ratio.index, "context": context, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printQRcodeWithXPosYPoseccLevelcellWidthmoderotationmodelmaskcontext(int x_pos, int y_pos, PTTSCQRcodeEcclevel ecc_level, PTTSCQRcodeWidth width, PTTSCQRCodeMode mode, PTTSCStyleRotation rotation, PTTSCQRCodeModel model, PTTSCQRcodeMask mask, String context) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::printQRcodeWithXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'context\':$context])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printQRcodeWithXPosYPoseccLevelcellWidthmoderotationmodelmaskcontext', {"x_pos": x_pos, "y_pos": y_pos, "ecc_level": ecc_level.index, "width": width.index, "mode": mode.index, "rotation": rotation.index, "model": model.index, "mask": mask.index, "context": context, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendTextWithXposYPosfontrotationxMultiplicationyMultiplicationtext(int x_pos, int y_pos, PTTSCTextFontStyle font, PTTSCStyleRotation rotation, int x_multiplication, int y_multiplication, String text) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::appendTextWithXpos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'x_multiplication\':$x_multiplication, \'y_multiplication\':$y_multiplication, \'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::appendTextWithXposYPosfontrotationxMultiplicationyMultiplicationtext', {"x_pos": x_pos, "y_pos": y_pos, "font": font.index, "rotation": rotation.index, "x_multiplication": x_multiplication, "y_multiplication": y_multiplication, "text": text, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext(int x_pos, int y_pos, PTTSCTextFontStyle font, PTTSCStyleRotation rotation, int x_multiplication, int y_multiplication, int safeHeight, int width, int lineSpacing, String text) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::printAutoTextWithXpos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'x_multiplication\':$x_multiplication, \'y_multiplication\':$y_multiplication, \'safeHeight\':$safeHeight, \'width\':$width, \'lineSpacing\':$lineSpacing, \'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext', {"x_pos": x_pos, "y_pos": y_pos, "font": font.index, "rotation": rotation.index, "x_multiplication": x_multiplication, "y_multiplication": y_multiplication, "safeHeight": safeHeight, "width": width, "lineSpacing": lineSpacing, "text": text, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> appendTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationtext(int x_pos, int y_pos, PTTSCTextVectorFontStyle font, PTTSCStyleRotation rotation, int x_multiplication, int y_multiplication, String text) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::appendTextForVectorWithXpos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'x_multiplication\':$x_multiplication, \'y_multiplication\':$y_multiplication, \'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::appendTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationtext', {"x_pos": x_pos, "y_pos": y_pos, "font": font.index, "rotation": rotation.index, "x_multiplication": x_multiplication, "y_multiplication": y_multiplication, "text": text, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext(int x_pos, int y_pos, PTTSCTextVectorFontStyle font, PTTSCStyleRotation rotation, int x_multiplication, int y_multiplication, int safeHeight, int width, int lineSpacing, String text) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::printAutoTextForVectorWithXpos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'x_multiplication\':$x_multiplication, \'y_multiplication\':$y_multiplication, \'safeHeight\':$safeHeight, \'width\':$width, \'lineSpacing\':$lineSpacing, \'text\':$text])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext', {"x_pos": x_pos, "y_pos": y_pos, "font": font.index, "rotation": rotation.index, "x_multiplication": x_multiplication, "y_multiplication": y_multiplication, "safeHeight": safeHeight, "width": width, "lineSpacing": lineSpacing, "text": text, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setReverseWithXStartYStartxWidthyHeight(int x_start, int y_start, int x_width, int y_height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setReverseWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'x_width\':$x_width, \'y_height\':$y_height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setReverseWithXStartYStartxWidthyHeight', {"x_start": x_start, "y_start": y_start, "x_width": x_width, "y_height": y_height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setBoxWithXStartYStartxEndyEndthickness(int x_start, int y_start, int x_end, int y_end, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setBoxWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'x_end\':$x_end, \'y_end\':$y_end, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setBoxWithXStartYStartxEndyEndthickness', {"x_start": x_start, "y_start": y_start, "x_end": x_end, "y_end": y_end, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setEllipseWithXStartYStartwidthheightthickness(int x_start, int y_start, int width, int height, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setEllipseWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'width\':$width, \'height\':$height, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setEllipseWithXStartYStartwidthheightthickness', {"x_start": x_start, "y_start": y_start, "width": width, "height": height, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCircleWithXStartYStartdiameterthickness(int x_start, int y_start, int diameter, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setCircleWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'diameter\':$diameter, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCircleWithXStartYStartdiameterthickness', {"x_start": x_start, "y_start": y_start, "diameter": diameter, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setEraseWithXStartYStartxWidthyHeight(int x_start, int y_start, int x_width, int y_height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setEraseWithXStart([\'x_start\':$x_start, \'y_start\':$y_start, \'x_width\':$x_width, \'y_height\':$y_height])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setEraseWithXStartYStartxWidthyHeight', {"x_start": x_start, "y_start": y_start, "x_width": x_width, "y_height": y_height, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> drawDmatrixBarcodeWithXPosYPoswidthheightxmrowcolexpression(int x_pos, int y_pos, int width, int height, PTTSCDMATRIXSize xm, int row, int col, String expresssion) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::drawDmatrixBarcodeWithXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'width\':$width, \'height\':$height, \'row\':$row, \'col\':$col, \'expresssion\':$expresssion])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::drawDmatrixBarcodeWithXPosYPoswidthheightxmrowcolexpression', {"x_pos": x_pos, "y_pos": y_pos, "width": width, "height": height, "xm": xm.index, "row": row, "col": col, "expresssion": expresssion, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printPDF417WithXPosYPoswidthheightrotateoptionexpression(int x_pos, int y_pos, int width, int height, PTTSCStyleRotation rotate, String option, String expression) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::printPDF417WithXPos([\'x_pos\':$x_pos, \'y_pos\':$y_pos, \'width\':$width, \'height\':$height, \'option\':$option, \'expression\':$expression])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printPDF417WithXPosYPoswidthheightrotateoptionexpression', {"x_pos": x_pos, "y_pos": y_pos, "width": width, "height": height, "rotate": rotate.index, "option": option, "expression": expression, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData(int xPos, int yPos, PTTSCStyleRotation rotate, int size, int ecp, int flg, int menu, int multi, int rev, String aztecData) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::printAztecWithXPos([\'xPos\':$xPos, \'yPos\':$yPos, \'size\':$size, \'ecp\':$ecp, \'flg\':$flg, \'menu\':$menu, \'multi\':$multi, \'rev\':$rev, \'aztecData\':$aztecData])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData', {"xPos": xPos, "yPos": yPos, "rotate": rotate.index, "size": size, "ecp": ecp, "flg": flg, "menu": menu, "multi": multi, "rev": rev, "aztecData": aztecData, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printBMPWithFilenameXPosyPos(String filename, int x_pos, int y_pos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::printBMPWithFilename([\'filename\':$filename, \'x_pos\':$x_pos, \'y_pos\':$y_pos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printBMPWithFilenameXPosyPos', {"filename": filename, "x_pos": x_pos, "y_pos": y_pos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> printPCXWithFilenameXPosyPos(String filename, int x_pos, int y_pos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::printPCXWithFilename([\'filename\':$filename, \'x_pos\':$x_pos, \'y_pos\':$y_pos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printPCXWithFilenameXPosyPos', {"filename": filename, "x_pos": x_pos, "y_pos": y_pos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCounterWithCounterNumberStep(int counterNumber, int step) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setCounterWithCounterNumber([\'counterNumber\':$counterNumber, \'step\':$step])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCounterWithCounterNumberStep', {"counterNumber": counterNumber, "step": step, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCutterStatus(bool status) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setCutterStatus([\'status\':$status])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCutterStatus', {"status": status, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setCutterPieces(int pieces) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandTSPL@$refId::setCutterPieces([\'pieces\':$pieces])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCutterPieces', {"pieces": pieces, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension PTCommandTSPL_Batch on List<PTCommandTSPL> {
  //region getters
  
  //endregion

  //region methods
  Future<void> selfTest_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::selfTest_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendCommand_batch(List<String> cmd) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::appendCommand_batch', [for (int i = 0; i < this.length; i++) {"cmd": cmd[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrintAreaSizeWithWidthHeight_batch(List<int> label_width, List<int> label_height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrintAreaSizeWithWidthHeight_batch', [for (int i = 0; i < this.length; i++) {"label_width": label_width[i], "label_height": label_height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setGapWithDistanceOffset_batch(List<int> distance, List<int> offset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setGapWithDistanceOffset_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "offset": offset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBlineWithHeightOffset_batch(List<int> height, List<int> offset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setBlineWithHeightOffset_batch', [for (int i = 0; i < this.length; i++) {"height": height[i], "offset": offset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setOffsetWithDistance_batch(List<int> distance) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setOffsetWithDistance_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> feedToNextLabel_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::feedToNextLabel_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setFeedLength_batch(List<int> length) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setFeedLength_batch', [for (int i = 0; i < this.length; i++) {"length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrintSpeed_batch(List<PTTSCPrintSpeed> speed) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrintSpeed_batch', [for (int i = 0; i < this.length; i++) {"speed": speed[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrintDensity_batch(List<PTTSCPrintDensity> density) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrintDensity_batch', [for (int i = 0; i < this.length; i++) {"density": density[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrintDirectionMirror_batch(List<PTTSCPrintDirection> direction, List<PTTSCPrintStyle> mirror) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrintDirectionMirror_batch', [for (int i = 0; i < this.length; i++) {"direction": direction[i].index, "mirror": mirror[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setReferenceXPosYPos_batch(List<int> x_pos, List<int> y_pos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setReferenceXPosYPos_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCodePage_batch(List<PTTSCCharacterStyle> codepage) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCodePage_batch', [for (int i = 0; i < this.length; i++) {"codepage": codepage[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCLS_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCLS_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBackFeed_batch(List<int> distance) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setBackFeed_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBackUP_batch(List<int> distance) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setBackUP_batch', [for (int i = 0; i < this.length; i++) {"distance": distance[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setHome_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setHome_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printWithSetsCopies_batch(List<int> sets, List<int> copies) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printWithSetsCopies_batch', [for (int i = 0; i < this.length; i++) {"sets": sets[i], "copies": copies[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setSoundWithLevelInterval_batch(List<int> level, List<int> interval) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setSoundWithLevelInterval_batch', [for (int i = 0; i < this.length; i++) {"level": level[i], "interval": interval[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCut_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCut_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setLimitFeed_batch(List<int> max_len) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setLimitFeed_batch', [for (int i = 0; i < this.length; i++) {"max_len": max_len[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setFontBold_batch(List<bool> bold) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setFontBold_batch', [for (int i = 0; i < this.length; i++) {"bold": bold[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrinterStateAutomaticBackWithStatus_batch(List<bool> status) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setPrinterStateAutomaticBackWithStatus_batch', [for (int i = 0; i < this.length; i++) {"status": status[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> getPrinterStatus_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::getPrinterStatus_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> drawBarWithXPosYPoswidthheight_batch(List<int> x_pos, List<int> y_pos, List<int> width, List<int> height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::drawBarWithXPosYPoswidthheight_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "width": width[i], "height": height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printBarcodeWithXPosYPostypeheightreadablerotationratiocontext_batch(List<int> x_pos, List<int> y_pos, List<PTTSCBarcodeStyle> type, List<int> height, List<PTTSCBarcodeReadbleStyle> readable, List<PTTSCStyleRotation> rotation, List<PTTSCBarcodeRatio> ratio, List<String> context) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printBarcodeWithXPosYPostypeheightreadablerotationratiocontext_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "type": type[i].index, "height": height[i], "readable": readable[i].index, "rotation": rotation[i].index, "ratio": ratio[i].index, "context": context[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printQRcodeWithXPosYPoseccLevelcellWidthmoderotationmodelmaskcontext_batch(List<int> x_pos, List<int> y_pos, List<PTTSCQRcodeEcclevel> ecc_level, List<PTTSCQRcodeWidth> width, List<PTTSCQRCodeMode> mode, List<PTTSCStyleRotation> rotation, List<PTTSCQRCodeModel> model, List<PTTSCQRcodeMask> mask, List<String> context) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printQRcodeWithXPosYPoseccLevelcellWidthmoderotationmodelmaskcontext_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "ecc_level": ecc_level[i].index, "width": width[i].index, "mode": mode[i].index, "rotation": rotation[i].index, "model": model[i].index, "mask": mask[i].index, "context": context[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendTextWithXposYPosfontrotationxMultiplicationyMultiplicationtext_batch(List<int> x_pos, List<int> y_pos, List<PTTSCTextFontStyle> font, List<PTTSCStyleRotation> rotation, List<int> x_multiplication, List<int> y_multiplication, List<String> text) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::appendTextWithXposYPosfontrotationxMultiplicationyMultiplicationtext_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "font": font[i].index, "rotation": rotation[i].index, "x_multiplication": x_multiplication[i], "y_multiplication": y_multiplication[i], "text": text[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch(List<int> x_pos, List<int> y_pos, List<PTTSCTextFontStyle> font, List<PTTSCStyleRotation> rotation, List<int> x_multiplication, List<int> y_multiplication, List<int> safeHeight, List<int> width, List<int> lineSpacing, List<String> text) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printAutoTextWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "font": font[i].index, "rotation": rotation[i].index, "x_multiplication": x_multiplication[i], "y_multiplication": y_multiplication[i], "safeHeight": safeHeight[i], "width": width[i], "lineSpacing": lineSpacing[i], "text": text[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> appendTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationtext_batch(List<int> x_pos, List<int> y_pos, List<PTTSCTextVectorFontStyle> font, List<PTTSCStyleRotation> rotation, List<int> x_multiplication, List<int> y_multiplication, List<String> text) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::appendTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationtext_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "font": font[i].index, "rotation": rotation[i].index, "x_multiplication": x_multiplication[i], "y_multiplication": y_multiplication[i], "text": text[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch(List<int> x_pos, List<int> y_pos, List<PTTSCTextVectorFontStyle> font, List<PTTSCStyleRotation> rotation, List<int> x_multiplication, List<int> y_multiplication, List<int> safeHeight, List<int> width, List<int> lineSpacing, List<String> text) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printAutoTextForVectorWithXposYPosfontrotationxMultiplicationyMultiplicationsafeHeightwidthlineSpacingtext_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "font": font[i].index, "rotation": rotation[i].index, "x_multiplication": x_multiplication[i], "y_multiplication": y_multiplication[i], "safeHeight": safeHeight[i], "width": width[i], "lineSpacing": lineSpacing[i], "text": text[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setReverseWithXStartYStartxWidthyHeight_batch(List<int> x_start, List<int> y_start, List<int> x_width, List<int> y_height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setReverseWithXStartYStartxWidthyHeight_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "x_width": x_width[i], "y_height": y_height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setBoxWithXStartYStartxEndyEndthickness_batch(List<int> x_start, List<int> y_start, List<int> x_end, List<int> y_end, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setBoxWithXStartYStartxEndyEndthickness_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "x_end": x_end[i], "y_end": y_end[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setEllipseWithXStartYStartwidthheightthickness_batch(List<int> x_start, List<int> y_start, List<int> width, List<int> height, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setEllipseWithXStartYStartwidthheightthickness_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "width": width[i], "height": height[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCircleWithXStartYStartdiameterthickness_batch(List<int> x_start, List<int> y_start, List<int> diameter, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCircleWithXStartYStartdiameterthickness_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "diameter": diameter[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setEraseWithXStartYStartxWidthyHeight_batch(List<int> x_start, List<int> y_start, List<int> x_width, List<int> y_height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setEraseWithXStartYStartxWidthyHeight_batch', [for (int i = 0; i < this.length; i++) {"x_start": x_start[i], "y_start": y_start[i], "x_width": x_width[i], "y_height": y_height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> drawDmatrixBarcodeWithXPosYPoswidthheightxmrowcolexpression_batch(List<int> x_pos, List<int> y_pos, List<int> width, List<int> height, List<PTTSCDMATRIXSize> xm, List<int> row, List<int> col, List<String> expresssion) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::drawDmatrixBarcodeWithXPosYPoswidthheightxmrowcolexpression_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "width": width[i], "height": height[i], "xm": xm[i].index, "row": row[i], "col": col[i], "expresssion": expresssion[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printPDF417WithXPosYPoswidthheightrotateoptionexpression_batch(List<int> x_pos, List<int> y_pos, List<int> width, List<int> height, List<PTTSCStyleRotation> rotate, List<String> option, List<String> expression) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printPDF417WithXPosYPoswidthheightrotateoptionexpression_batch', [for (int i = 0; i < this.length; i++) {"x_pos": x_pos[i], "y_pos": y_pos[i], "width": width[i], "height": height[i], "rotate": rotate[i].index, "option": option[i], "expression": expression[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData_batch(List<int> xPos, List<int> yPos, List<PTTSCStyleRotation> rotate, List<int> size, List<int> ecp, List<int> flg, List<int> menu, List<int> multi, List<int> rev, List<String> aztecData) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printAztecWithXPosYPosrotatesizeecpflgmenumultirevaztecData_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "rotate": rotate[i].index, "size": size[i], "ecp": ecp[i], "flg": flg[i], "menu": menu[i], "multi": multi[i], "rev": rev[i], "aztecData": aztecData[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printBMPWithFilenameXPosyPos_batch(List<String> filename, List<int> x_pos, List<int> y_pos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printBMPWithFilenameXPosyPos_batch', [for (int i = 0; i < this.length; i++) {"filename": filename[i], "x_pos": x_pos[i], "y_pos": y_pos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> printPCXWithFilenameXPosyPos_batch(List<String> filename, List<int> x_pos, List<int> y_pos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::printPCXWithFilenameXPosyPos_batch', [for (int i = 0; i < this.length; i++) {"filename": filename[i], "x_pos": x_pos[i], "y_pos": y_pos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCounterWithCounterNumberStep_batch(List<int> counterNumber, List<int> step) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCounterWithCounterNumberStep_batch', [for (int i = 0; i < this.length; i++) {"counterNumber": counterNumber[i], "step": step[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCutterStatus_batch(List<bool> status) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCutterStatus_batch', [for (int i = 0; i < this.length; i++) {"status": status[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setCutterPieces_batch(List<int> pieces) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandTSPL::setCutterPieces_batch', [for (int i = 0; i < this.length; i++) {"pieces": pieces[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}