// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class PTEncode extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<PTEncode> create__() async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createPTEncode');
    final object = PTEncode()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<PTEncode>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchPTEncode', {'length': length});
  
    final List<PTEncode> typedResult = resultBatch.map((result) => PTEncode()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  static Future<NSData> encodeDataWithString(String string) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTEncode::encodeDataWithString([\'string\':$string])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTEncode::encodeDataWithString', {"string": string});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(NSData()..refId = result..tag = 'hanyin_printer_fluttify');
      return NSData()..refId = result..tag = 'hanyin_printer_fluttify';
    }
  }
  
  static Future<String> decodeStringWithData(NSData data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTEncode::decodeStringWithData([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTEncode::decodeStringWithData', {"data": data.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension PTEncode_Batch on List<PTEncode> {
  //region getters
  
  //endregion

  //region methods
  Future<List<NSData>> encodeDataWithString_batch(List<String> string) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTEncode::encodeDataWithString_batch', [for (int i = 0; i < this.length; i++) {"string": string[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => NSData()..refId = result..tag = 'hanyin_printer_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<List<String>> decodeStringWithData_batch(List<NSData> data) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTEncode::decodeStringWithData_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}