// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class PTPrinter extends NSObject with NSCoding {
  //region constants
  
  //endregion

  //region creators
  static Future<PTPrinter> create__() async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createPTPrinter');
    final object = PTPrinter()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<PTPrinter>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchPTPrinter', {'length': length});
  
    final List<PTPrinter> typedResult = resultBatch.map((result) => PTPrinter()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_name() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_name", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_mac() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_mac", {'refId': refId});
  
    return result;
  }
  
  Future<PTPrinterModule> get_module() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_module", {'refId': refId});
  
    return PTPrinterModule.values[result];
  }
  
  Future<String> get_uuid() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_uuid", {'refId': refId});
  
    return result;
  }
  
  Future<num> get_rssi() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_rssi", {'refId': refId});
  
    return result;
  }
  
  Future<num> get_strength() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_strength", {'refId': refId});
  
    return result;
  }
  
  Future<num> get_distance() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_distance", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_ip() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_ip", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_port() async {
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_port", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_name(String name) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTPrinter::set_name', {'refId': refId, "name": name});
  
  
  }
  
  Future<void> set_mac(String mac) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTPrinter::set_mac', {'refId': refId, "mac": mac});
  
  
  }
  
  Future<void> set_module(PTPrinterModule module) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTPrinter::set_module', {'refId': refId, "module": module.index});
  
  
  }
  
  Future<void> set_uuid(String uuid) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTPrinter::set_uuid', {'refId': refId, "uuid": uuid});
  
  
  }
  
  Future<void> set_rssi(num rssi) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTPrinter::set_rssi', {'refId': refId, "rssi": rssi});
  
  
  }
  
  Future<void> set_strength(num strength) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTPrinter::set_strength', {'refId': refId, "strength": strength});
  
  
  }
  
  Future<void> set_distance(num distance) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTPrinter::set_distance', {'refId': refId, "distance": distance});
  
  
  }
  
  Future<void> set_ip(String ip) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTPrinter::set_ip', {'refId': refId, "ip": ip});
  
  
  }
  
  Future<void> set_port(String port) async {
    await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTPrinter::set_port', {'refId': refId, "port": port});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension PTPrinter_Batch on List<PTPrinter> {
  //region getters
  Future<List<String>> get_name_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_name_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_mac_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_mac_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<PTPrinterModule>> get_module_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_module_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => PTPrinterModule.values[result]).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_uuid_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_uuid_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<num>> get_rssi_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_rssi_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<num>> get_strength_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_strength_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<num>> get_distance_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_distance_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_ip_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_ip_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_port_batch() async {
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod("PTPrinter::get_port_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}