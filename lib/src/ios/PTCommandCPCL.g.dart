// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:hanyin_printer_fluttify/src/ios/ios.export.g.dart';
import 'package:hanyin_printer_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class PTCommandCPCL extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<PTCommandCPCL> create__() async {
    final int refId = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::createPTCommandCPCL');
    final object = PTCommandCPCL()..refId = refId..tag = 'hanyin_printer_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<PTCommandCPCL>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('ObjectFactory::create_batchPTCommandCPCL', {'length': length});
  
    final List<PTCommandCPCL> typedResult = resultBatch.map((result) => PTCommandCPCL()..refId = result..tag = 'hanyin_printer_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  Future<void> printSelfInspectionPage() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::printSelfInspectionPage([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::printSelfInspectionPage', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclGetPaperStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclGetPaperStatus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclGetPaperStatus', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> getFirmwareVersion() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::getFirmwareVersion([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::getFirmwareVersion', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclTurnOnPrintStatusCallBack(bool flag) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclTurnOnPrintStatusCallBack([\'flag\':$flag])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclTurnOnPrintStatusCallBack', {"flag": flag, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclUnderlineON() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclUnderlineON([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclUnderlineON', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclUnderlineOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclUnderlineOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclUnderlineOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclGetPrinterSN() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclGetPrinterSN([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclGetPrinterSN', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclPaperTypeWithType(PTCPCLPaperType type) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclPaperTypeWithType([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPaperTypeWithType', {"type": type.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setPrinterPaperTypeFor4Inch(PTCPCLNewPaperType type) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::setPrinterPaperTypeFor4Inch([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::setPrinterPaperTypeFor4Inch', {"type": type.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclLabelWithOffsetHResvResheightquantity(int offset, PTCPCLLabelResolution hRes, PTCPCLLabelResolution vRes, int height, int quantity) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclLabelWithOffset([\'offset\':$offset, \'height\':$height, \'quantity\':$quantity])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLabelWithOffsetHResvResheightquantity', {"offset": offset, "hRes": hRes.index, "vRes": vRes.index, "height": height, "quantity": quantity, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclPageWidth(int pageWidth) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclPageWidth([\'pageWidth\':$pageWidth])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPageWidth', {"pageWidth": pageWidth, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclBarcodeTextWithFontFontSizeoffset(PTCPCLTextFontName font, int fontSize, int offset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclBarcodeTextWithFont([\'fontSize\':$fontSize, \'offset\':$offset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeTextWithFontFontSizeoffset', {"font": font.index, "fontSize": fontSize, "offset": offset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclBarcodeTextWithTrueTypeFontXScaleyScaleoffset(PTCPCLTextFontName font, int xScale, int yScale, int offset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclBarcodeTextWithTrueTypeFont([\'xScale\':$xScale, \'yScale\':$yScale, \'offset\':$offset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeTextWithTrueTypeFontXScaleyScaleoffset', {"font": font.index, "xScale": xScale, "yScale": yScale, "offset": offset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclBarcodeTextOff() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclBarcodeTextOff([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeTextOff', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclBarcodeQRcodeWithXPosYPosmodelunitWidth(int xPos, int yPos, PTCPCLQRCodeModel model, PTCPCLQRCodeUnitWidth unitWidth) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclBarcodeQRcodeWithXPos([\'xPos\':$xPos, \'yPos\':$yPos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeQRcodeWithXPosYPosmodelunitWidth', {"xPos": xPos, "yPos": yPos, "model": model.index, "unitWidth": unitWidth.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclBarcodeVerticalQRcodeWithXPosYPosmodelunitWidth(int xPos, int yPos, PTCPCLQRCodeModel model, PTCPCLQRCodeUnitWidth unitWidth) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclBarcodeVerticalQRcodeWithXPos([\'xPos\':$xPos, \'yPos\':$yPos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeVerticalQRcodeWithXPosYPosmodelunitWidth', {"xPos": xPos, "yPos": yPos, "model": model.index, "unitWidth": unitWidth.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclBarcodeQRcodeEnd() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclBarcodeQRcodeEnd([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeQRcodeEnd', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclPDF417CodeWithDirectionXPosyPosxDotyDotcolumnsrowseccbinaryModel(PTCPCLPDF417Direction directon, int xPos, int yPos, int xDot, int yDot, int columns, int rows, PTCPCLPDF417ErrLevel ecc, PTCPCLPDF417Binary binaryModel) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclPDF417CodeWithDirection([\'xPos\':$xPos, \'yPos\':$yPos, \'xDot\':$xDot, \'yDot\':$yDot, \'columns\':$columns, \'rows\':$rows])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPDF417CodeWithDirectionXPosyPosxDotyDotcolumnsrowseccbinaryModel', {"directon": directon.index, "xPos": xPos, "yPos": yPos, "xDot": xDot, "yDot": yDot, "columns": columns, "rows": rows, "ecc": ecc.index, "binaryModel": binaryModel.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclPDF417codeEnd() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclPDF417codeEnd([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPDF417codeEnd', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclBoxWithXPosYPosxEndyEndthickness(int xPos, int yPos, int xEnd, int yEnd, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclBoxWithXPos([\'xPos\':$xPos, \'yPos\':$yPos, \'xEnd\':$xEnd, \'yEnd\':$yEnd, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBoxWithXPosYPosxEndyEndthickness', {"xPos": xPos, "yPos": yPos, "xEnd": xEnd, "yEnd": yEnd, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclLineWithXPosYPosxEndyEndthickness(int xPos, int yPos, int xEnd, int yEnd, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclLineWithXPos([\'xPos\':$xPos, \'yPos\':$yPos, \'xEnd\':$xEnd, \'yEnd\':$yEnd, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLineWithXPosYPosxEndyEndthickness', {"xPos": xPos, "yPos": yPos, "xEnd": xEnd, "yEnd": yEnd, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclInverseLineWithXPosYPosxEndyEndthickness(int xPos, int yPos, int xEnd, int yEnd, int thickness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclInverseLineWithXPos([\'xPos\':$xPos, \'yPos\':$yPos, \'xEnd\':$xEnd, \'yEnd\':$yEnd, \'thickness\':$thickness])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclInverseLineWithXPosYPosxEndyEndthickness', {"xPos": xPos, "yPos": yPos, "xEnd": xEnd, "yEnd": yEnd, "thickness": thickness, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclConcatStartWithXPosYPos(int xPos, int yPos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclConcatStartWithXPos([\'xPos\':$xPos, \'yPos\':$yPos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclConcatStartWithXPosYPos', {"xPos": xPos, "yPos": yPos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclConcatVerticalStartWithXPosYPos(int xPos, int yPos) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclConcatVerticalStartWithXPos([\'xPos\':$xPos, \'yPos\':$yPos])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclConcatVerticalStartWithXPosYPos', {"xPos": xPos, "yPos": yPos, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclConcatEnd() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclConcatEnd([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclConcatEnd', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclPrint() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclPrint([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPrint', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclPoPrint() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclPoPrint([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPoPrint', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclCenterWithRange(int range) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclCenterWithRange([\'range\':$range])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclCenterWithRange', {"range": range, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclCenter() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclCenter([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclCenter', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclLeft__int(int range) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclLeft([\'range\':$range])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLeft__int', {"range": range, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclLeft() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclLeft([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLeft', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclRight__int(int right) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclRight([\'right\':$right])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclRight__int', {"right": right, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclRight() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclRight([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclRight', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclMoveWithRightUp(int right, int up) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclMoveWithRight([\'right\':$right, \'up\':$up])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclMoveWithRightUp', {"right": right, "up": up, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclTempMoveWithRightUp(int right, int up) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclTempMoveWithRight([\'right\':$right, \'up\':$up])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclTempMoveWithRightUp', {"right": right, "up": up, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclMultiLineStartWithLineHeight(int lineHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclMultiLineStartWithLineHeight([\'lineHeight\':$lineHeight])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclMultiLineStartWithLineHeight', {"lineHeight": lineHeight, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclMultiLineEnd() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclMultiLineEnd([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclMultiLineEnd', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclRotate(int degrees) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclRotate([\'degrees\':$degrees])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclRotate', {"degrees": degrees, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclSetBold(PTCPCLTextBold boldness) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclSetBold([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetBold', {"boldness": boldness.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclSetSpacing(int spacing) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclSetSpacing([\'spacing\':$spacing])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetSpacing', {"spacing": spacing, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclSetMagWithWidthHeight(PTCPCLFontScale width, PTCPCLFontScale height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclSetMagWithWidth([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetMagWithWidthHeight', {"width": width.index, "height": height.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclSetBackgroundBlacknessValue(int value) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclSetBackgroundBlacknessValue([\'value\':$value])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetBackgroundBlacknessValue', {"value": value, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclUtilitySession() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclUtilitySession([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclUtilitySession', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclLineMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclLineMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLineMode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclReWindOFF() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclReWindOFF([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclReWindOFF', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclLineMargin(int offset) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclLineMargin([\'offset\':$offset])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLineMargin', {"offset": offset, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclLineFeed() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclLineFeed([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLineFeed', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclFeed(int amount) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclFeed([\'amount\':$amount])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclFeed', {"amount": amount, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclPostFeed(int amount) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclPostFeed([\'amount\':$amount])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPostFeed', {"amount": amount, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclPreFeed(int amount) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclPreFeed([\'amount\':$amount])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPreFeed', {"amount": amount, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclReverse(int amount) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclReverse([\'amount\':$amount])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclReverse', {"amount": amount, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclSetFeedSkip(int length, int skip) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclSetFeed([\'length\':$length, \'skip\':$skip])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetFeedSkip', {"length": length, "skip": skip, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclSpeed(int value) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclSpeed([\'value\':$value])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSpeed', {"value": value, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclForm() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclForm([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclForm', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclTone(int value) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclTone([\'value\':$value])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclTone', {"value": value, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclTurn(int degrees) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclTurn([\'degrees\':$degrees])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclTurn', {"degrees": degrees, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclOnFeed_Feed() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclOnFeed_Feed([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclOnFeed_Feed', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclOnFeed_Reprint() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclOnFeed_Reprint([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclOnFeed_Reprint', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclOnFeed_Ignore() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclOnFeed_Ignore([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclOnFeed_Ignore', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclSetArabicTransformFunction(int function) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclSetArabicTransformFunction([\'function\':$function])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetArabicTransformFunction', {"function": function, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclGetArabicTransformStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclGetArabicTransformStatus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclGetArabicTransformStatus', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclSetThaiTransformStatus(int status) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclSetThaiTransformStatus([\'status\':$status])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetThaiTransformStatus', {"status": status, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclSetVietnameseTransformFunction(int function) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclSetVietnameseTransformFunction([\'function\':$function])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetVietnameseTransformFunction', {"function": function, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cpclGetVietnameseTransformStatus() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: PTCommandCPCL@$refId::cpclGetVietnameseTransformStatus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclGetVietnameseTransformStatus', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension PTCommandCPCL_Batch on List<PTCommandCPCL> {
  //region getters
  
  //endregion

  //region methods
  Future<void> printSelfInspectionPage_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::printSelfInspectionPage_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclGetPaperStatus_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclGetPaperStatus_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> getFirmwareVersion_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::getFirmwareVersion_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclTurnOnPrintStatusCallBack_batch(List<bool> flag) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclTurnOnPrintStatusCallBack_batch', [for (int i = 0; i < this.length; i++) {"flag": flag[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclUnderlineON_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclUnderlineON_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclUnderlineOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclUnderlineOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclGetPrinterSN_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclGetPrinterSN_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclPaperTypeWithType_batch(List<PTCPCLPaperType> type) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPaperTypeWithType_batch', [for (int i = 0; i < this.length; i++) {"type": type[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setPrinterPaperTypeFor4Inch_batch(List<PTCPCLNewPaperType> type) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::setPrinterPaperTypeFor4Inch_batch', [for (int i = 0; i < this.length; i++) {"type": type[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclLabelWithOffsetHResvResheightquantity_batch(List<int> offset, List<PTCPCLLabelResolution> hRes, List<PTCPCLLabelResolution> vRes, List<int> height, List<int> quantity) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLabelWithOffsetHResvResheightquantity_batch', [for (int i = 0; i < this.length; i++) {"offset": offset[i], "hRes": hRes[i].index, "vRes": vRes[i].index, "height": height[i], "quantity": quantity[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclPageWidth_batch(List<int> pageWidth) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPageWidth_batch', [for (int i = 0; i < this.length; i++) {"pageWidth": pageWidth[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclBarcodeTextWithFontFontSizeoffset_batch(List<PTCPCLTextFontName> font, List<int> fontSize, List<int> offset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeTextWithFontFontSizeoffset_batch', [for (int i = 0; i < this.length; i++) {"font": font[i].index, "fontSize": fontSize[i], "offset": offset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclBarcodeTextWithTrueTypeFontXScaleyScaleoffset_batch(List<PTCPCLTextFontName> font, List<int> xScale, List<int> yScale, List<int> offset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeTextWithTrueTypeFontXScaleyScaleoffset_batch', [for (int i = 0; i < this.length; i++) {"font": font[i].index, "xScale": xScale[i], "yScale": yScale[i], "offset": offset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclBarcodeTextOff_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeTextOff_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclBarcodeQRcodeWithXPosYPosmodelunitWidth_batch(List<int> xPos, List<int> yPos, List<PTCPCLQRCodeModel> model, List<PTCPCLQRCodeUnitWidth> unitWidth) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeQRcodeWithXPosYPosmodelunitWidth_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "model": model[i].index, "unitWidth": unitWidth[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclBarcodeVerticalQRcodeWithXPosYPosmodelunitWidth_batch(List<int> xPos, List<int> yPos, List<PTCPCLQRCodeModel> model, List<PTCPCLQRCodeUnitWidth> unitWidth) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeVerticalQRcodeWithXPosYPosmodelunitWidth_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "model": model[i].index, "unitWidth": unitWidth[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclBarcodeQRcodeEnd_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBarcodeQRcodeEnd_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclPDF417CodeWithDirectionXPosyPosxDotyDotcolumnsrowseccbinaryModel_batch(List<PTCPCLPDF417Direction> directon, List<int> xPos, List<int> yPos, List<int> xDot, List<int> yDot, List<int> columns, List<int> rows, List<PTCPCLPDF417ErrLevel> ecc, List<PTCPCLPDF417Binary> binaryModel) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPDF417CodeWithDirectionXPosyPosxDotyDotcolumnsrowseccbinaryModel_batch', [for (int i = 0; i < this.length; i++) {"directon": directon[i].index, "xPos": xPos[i], "yPos": yPos[i], "xDot": xDot[i], "yDot": yDot[i], "columns": columns[i], "rows": rows[i], "ecc": ecc[i].index, "binaryModel": binaryModel[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclPDF417codeEnd_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPDF417codeEnd_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclBoxWithXPosYPosxEndyEndthickness_batch(List<int> xPos, List<int> yPos, List<int> xEnd, List<int> yEnd, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclBoxWithXPosYPosxEndyEndthickness_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "xEnd": xEnd[i], "yEnd": yEnd[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclLineWithXPosYPosxEndyEndthickness_batch(List<int> xPos, List<int> yPos, List<int> xEnd, List<int> yEnd, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLineWithXPosYPosxEndyEndthickness_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "xEnd": xEnd[i], "yEnd": yEnd[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclInverseLineWithXPosYPosxEndyEndthickness_batch(List<int> xPos, List<int> yPos, List<int> xEnd, List<int> yEnd, List<int> thickness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclInverseLineWithXPosYPosxEndyEndthickness_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "xEnd": xEnd[i], "yEnd": yEnd[i], "thickness": thickness[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclConcatStartWithXPosYPos_batch(List<int> xPos, List<int> yPos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclConcatStartWithXPosYPos_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclConcatVerticalStartWithXPosYPos_batch(List<int> xPos, List<int> yPos) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclConcatVerticalStartWithXPosYPos_batch', [for (int i = 0; i < this.length; i++) {"xPos": xPos[i], "yPos": yPos[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclConcatEnd_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclConcatEnd_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclPrint_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPrint_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclPoPrint_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPoPrint_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclCenterWithRange_batch(List<int> range) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclCenterWithRange_batch', [for (int i = 0; i < this.length; i++) {"range": range[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclCenter_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclCenter_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclLeft__int_batch(List<int> range) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLeft__int_batch', [for (int i = 0; i < this.length; i++) {"range": range[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclLeft_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLeft_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclRight__int_batch(List<int> right) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclRight__int_batch', [for (int i = 0; i < this.length; i++) {"right": right[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclRight_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclRight_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclMoveWithRightUp_batch(List<int> right, List<int> up) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclMoveWithRightUp_batch', [for (int i = 0; i < this.length; i++) {"right": right[i], "up": up[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclTempMoveWithRightUp_batch(List<int> right, List<int> up) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclTempMoveWithRightUp_batch', [for (int i = 0; i < this.length; i++) {"right": right[i], "up": up[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclMultiLineStartWithLineHeight_batch(List<int> lineHeight) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclMultiLineStartWithLineHeight_batch', [for (int i = 0; i < this.length; i++) {"lineHeight": lineHeight[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclMultiLineEnd_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclMultiLineEnd_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclRotate_batch(List<int> degrees) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclRotate_batch', [for (int i = 0; i < this.length; i++) {"degrees": degrees[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclSetBold_batch(List<PTCPCLTextBold> boldness) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetBold_batch', [for (int i = 0; i < this.length; i++) {"boldness": boldness[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclSetSpacing_batch(List<int> spacing) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetSpacing_batch', [for (int i = 0; i < this.length; i++) {"spacing": spacing[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclSetMagWithWidthHeight_batch(List<PTCPCLFontScale> width, List<PTCPCLFontScale> height) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetMagWithWidthHeight_batch', [for (int i = 0; i < this.length; i++) {"width": width[i].index, "height": height[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclSetBackgroundBlacknessValue_batch(List<int> value) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetBackgroundBlacknessValue_batch', [for (int i = 0; i < this.length; i++) {"value": value[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclUtilitySession_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclUtilitySession_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclLineMode_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLineMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclReWindOFF_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclReWindOFF_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclLineMargin_batch(List<int> offset) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLineMargin_batch', [for (int i = 0; i < this.length; i++) {"offset": offset[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclLineFeed_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclLineFeed_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclFeed_batch(List<int> amount) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclFeed_batch', [for (int i = 0; i < this.length; i++) {"amount": amount[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclPostFeed_batch(List<int> amount) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPostFeed_batch', [for (int i = 0; i < this.length; i++) {"amount": amount[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclPreFeed_batch(List<int> amount) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclPreFeed_batch', [for (int i = 0; i < this.length; i++) {"amount": amount[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclReverse_batch(List<int> amount) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclReverse_batch', [for (int i = 0; i < this.length; i++) {"amount": amount[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclSetFeedSkip_batch(List<int> length, List<int> skip) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetFeedSkip_batch', [for (int i = 0; i < this.length; i++) {"length": length[i], "skip": skip[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclSpeed_batch(List<int> value) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSpeed_batch', [for (int i = 0; i < this.length; i++) {"value": value[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclForm_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclForm_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclTone_batch(List<int> value) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclTone_batch', [for (int i = 0; i < this.length; i++) {"value": value[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclTurn_batch(List<int> degrees) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclTurn_batch', [for (int i = 0; i < this.length; i++) {"degrees": degrees[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclOnFeed_Feed_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclOnFeed_Feed_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclOnFeed_Reprint_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclOnFeed_Reprint_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclOnFeed_Ignore_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclOnFeed_Ignore_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclSetArabicTransformFunction_batch(List<int> function) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetArabicTransformFunction_batch', [for (int i = 0; i < this.length; i++) {"function": function[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclGetArabicTransformStatus_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclGetArabicTransformStatus_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclSetThaiTransformStatus_batch(List<int> status) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetThaiTransformStatus_batch', [for (int i = 0; i < this.length; i++) {"status": status[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclSetVietnameseTransformFunction_batch(List<int> function) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclSetVietnameseTransformFunction_batch', [for (int i = 0; i < this.length; i++) {"function": function[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> cpclGetVietnameseTransformStatus_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/hanyin_printer_fluttify').invokeMethod('PTCommandCPCL::cpclGetVietnameseTransformStatus_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}