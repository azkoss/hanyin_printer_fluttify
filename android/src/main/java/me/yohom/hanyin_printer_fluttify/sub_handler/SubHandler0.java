//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.hanyin_printer_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.hanyin_printer_fluttify.HanyinPrinterFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler0 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::get_type", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get(refId);
            
                long result = ref.type;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::get_offset", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get(refId);
            
                long result = ref.offset;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::get_vaddr", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get(refId);
            
                long result = ref.vaddr;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::get_memsz", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get(refId);
            
                long result = ref.memsz;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.DynamicStructure::get_tag", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.DynamicStructure ref = (com.getkeepsafe.relinker.elf.Elf.DynamicStructure) getHEAP().get(refId);
            
                long result = ref.tag;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.DynamicStructure::get_val", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.DynamicStructure ref = (com.getkeepsafe.relinker.elf.Elf.DynamicStructure) getHEAP().get(refId);
            
                long result = ref.val;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.SectionHeader::get_info", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.SectionHeader ref = (com.getkeepsafe.relinker.elf.Elf.SectionHeader) getHEAP().get(refId);
            
                long result = ref.info;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_bigEndian", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                boolean result = ref.bigEndian;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_type", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                int result = ref.type;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_phoff", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                long result = ref.phoff;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_shoff", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                long result = ref.shoff;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_phentsize", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                int result = ref.phentsize;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_phnum", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                int result = ref.phnum;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_shentsize", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                int result = ref.shentsize;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_shnum", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                int result = ref.shnum;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_shstrndx", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                int result = ref.shstrndx;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::get_type_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.type;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::get_offset_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.offset;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::get_vaddr_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.vaddr;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::get_memsz_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.memsz;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.DynamicStructure::get_tag_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.DynamicStructure ref = (com.getkeepsafe.relinker.elf.Elf.DynamicStructure) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.tag;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.DynamicStructure::get_val_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.DynamicStructure ref = (com.getkeepsafe.relinker.elf.Elf.DynamicStructure) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.val;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.SectionHeader::get_info_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.SectionHeader ref = (com.getkeepsafe.relinker.elf.Elf.SectionHeader) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.info;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_bigEndian_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get((int) args.get("refId"));
            
                    boolean result = ref.bigEndian;
            
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_type_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.type;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_phoff_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.phoff;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_shoff_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get((int) args.get("refId"));
            
                    long result = ref.shoff;
            
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_phentsize_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.phentsize;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_phnum_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.phnum;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_shentsize_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.shentsize;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_shnum_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.shnum;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.getkeepsafe.relinker.elf.Elf.Header::get_shstrndx_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.shstrndx;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::set_type", (args, methodResult) -> {
                // jsonable arg
                long type = (long) ((Map<String, Object>) args).get("type");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get(refId);
            
                ref.type = type;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::set_offset", (args, methodResult) -> {
                // jsonable arg
                long offset = (long) ((Map<String, Object>) args).get("offset");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get(refId);
            
                ref.offset = offset;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::set_vaddr", (args, methodResult) -> {
                // jsonable arg
                long vaddr = (long) ((Map<String, Object>) args).get("vaddr");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get(refId);
            
                ref.vaddr = vaddr;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.ProgramHeader::set_memsz", (args, methodResult) -> {
                // jsonable arg
                long memsz = (long) ((Map<String, Object>) args).get("memsz");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.ProgramHeader ref = (com.getkeepsafe.relinker.elf.Elf.ProgramHeader) getHEAP().get(refId);
            
                ref.memsz = memsz;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.DynamicStructure::set_tag", (args, methodResult) -> {
                // jsonable arg
                long tag = (long) ((Map<String, Object>) args).get("tag");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.DynamicStructure ref = (com.getkeepsafe.relinker.elf.Elf.DynamicStructure) getHEAP().get(refId);
            
                ref.tag = tag;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.DynamicStructure::set_val", (args, methodResult) -> {
                // jsonable arg
                long val = (long) ((Map<String, Object>) args).get("val");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.DynamicStructure ref = (com.getkeepsafe.relinker.elf.Elf.DynamicStructure) getHEAP().get(refId);
            
                ref.val = val;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.SectionHeader::set_info", (args, methodResult) -> {
                // jsonable arg
                long info = (long) ((Map<String, Object>) args).get("info");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.SectionHeader ref = (com.getkeepsafe.relinker.elf.Elf.SectionHeader) getHEAP().get(refId);
            
                ref.info = info;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.Header::set_bigEndian", (args, methodResult) -> {
                // jsonable arg
                boolean bigEndian = (boolean) ((Map<String, Object>) args).get("bigEndian");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                ref.bigEndian = bigEndian;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.Header::set_type", (args, methodResult) -> {
                // jsonable arg
                int type = (int) ((Map<String, Object>) args).get("type");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                ref.type = type;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.Header::set_phoff", (args, methodResult) -> {
                // jsonable arg
                long phoff = (long) ((Map<String, Object>) args).get("phoff");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                ref.phoff = phoff;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.Header::set_shoff", (args, methodResult) -> {
                // jsonable arg
                long shoff = (long) ((Map<String, Object>) args).get("shoff");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                ref.shoff = shoff;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.Header::set_phentsize", (args, methodResult) -> {
                // jsonable arg
                int phentsize = (int) ((Map<String, Object>) args).get("phentsize");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                ref.phentsize = phentsize;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.Header::set_phnum", (args, methodResult) -> {
                // jsonable arg
                int phnum = (int) ((Map<String, Object>) args).get("phnum");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                ref.phnum = phnum;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.Header::set_shentsize", (args, methodResult) -> {
                // jsonable arg
                int shentsize = (int) ((Map<String, Object>) args).get("shentsize");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                ref.shentsize = shentsize;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.Header::set_shnum", (args, methodResult) -> {
                // jsonable arg
                int shnum = (int) ((Map<String, Object>) args).get("shnum");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                ref.shnum = shnum;
                methodResult.success("success");
            });
            // setter
            put("com.getkeepsafe.relinker.elf.Elf.Header::set_shstrndx", (args, methodResult) -> {
                // jsonable arg
                int shstrndx = (int) ((Map<String, Object>) args).get("shstrndx");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                ref.shstrndx = shstrndx;
                methodResult.success("success");
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::log__com_getkeepsafe_relinker_ReLinker_Logger", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinkerInstance@" + refId + "::log(" + "" + ")");
                }
            
                // invoke native method
                com.getkeepsafe.relinker.ReLinkerInstance result;
                try {
                    result = ref.log(new com.getkeepsafe.relinker.ReLinker.Logger() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.getkeepsafe.relinker.ReLinkerInstance::log__com_getkeepsafe_relinker_ReLinker_Logger::Callback");
            
                    // call dart method
                    @Override
                    public void log(String var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: log(" + var1 + ")");
                        }
            
                        // convert to jsonable data
                        // jsonable arg
                        String argvar1 = var1;
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.Logger::log",
                                new HashMap<String, Object>() {{
                                    put("var1", argvar1);
                                }}
                        );
            
                        // method result
            
                    }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::force", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinkerInstance@" + refId + "::force(" + "" + ")");
                }
            
                // invoke native method
                com.getkeepsafe.relinker.ReLinkerInstance result;
                try {
                    result = ref.force();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::recursively", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinkerInstance@" + refId + "::recursively(" + "" + ")");
                }
            
                // invoke native method
                com.getkeepsafe.relinker.ReLinkerInstance result;
                try {
                    result = ref.recursively();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::loadLibrary__android_content_Context__String", (args, methodResult) -> {
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinkerInstance@" + refId + "::loadLibrary(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.loadLibrary(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::loadLibrary__android_content_Context__String__String", (args, methodResult) -> {
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinkerInstance@" + refId + "::loadLibrary(" + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                try {
                    ref.loadLibrary(var1, var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::loadLibrary__android_content_Context__String__com_getkeepsafe_relinker_ReLinker_LoadListener", (args, methodResult) -> {
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinkerInstance@" + refId + "::loadLibrary(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.loadLibrary(var1, var2, new com.getkeepsafe.relinker.ReLinker.LoadListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.getkeepsafe.relinker.ReLinkerInstance::loadLibrary__android_content_Context__String__com_getkeepsafe_relinker_ReLinker_LoadListener::Callback");
            
                    // call dart method
                    @Override
                    public void success() {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: success(" + "" + ")");
                        }
            
                        // convert to jsonable data
            
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.LoadListener::success",
                                new HashMap<String, Object>() {{
                
                                }}
                        );
            
                        // method result
            
                    }
            
                    @Override
                    public void failure(java.lang.Throwable var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: failure(" + var1 + ")");
                        }
            
                        // convert to jsonable data
                        // ref arg
                        final Integer argvar1;
                        if (var1 != null) {
                            argvar1 = var1.hashCode();
                            getHEAP().put(argvar1, var1);
                        } else {
                            argvar1 = null;
                        }
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.LoadListener::failure",
                                new HashMap<String, Object>() {{
                                    put("var1", argvar1);
                                }}
                        );
            
                        // method result
            
                    }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::loadLibrary__android_content_Context__String__String__com_getkeepsafe_relinker_ReLinker_LoadListener", (args, methodResult) -> {
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinkerInstance@" + refId + "::loadLibrary(" + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                try {
                    ref.loadLibrary(var1, var2, var3, new com.getkeepsafe.relinker.ReLinker.LoadListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.getkeepsafe.relinker.ReLinkerInstance::loadLibrary__android_content_Context__String__String__com_getkeepsafe_relinker_ReLinker_LoadListener::Callback");
            
                    // call dart method
                    @Override
                    public void success() {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: success(" + "" + ")");
                        }
            
                        // convert to jsonable data
            
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.LoadListener::success",
                                new HashMap<String, Object>() {{
                
                                }}
                        );
            
                        // method result
            
                    }
            
                    @Override
                    public void failure(java.lang.Throwable var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: failure(" + var1 + ")");
                        }
            
                        // convert to jsonable data
                        // ref arg
                        final Integer argvar1;
                        if (var1 != null) {
                            argvar1 = var1.hashCode();
                            getHEAP().put(argvar1, var1);
                        } else {
                            argvar1 = null;
                        }
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.LoadListener::failure",
                                new HashMap<String, Object>() {{
                                    put("var1", argvar1);
                                }}
                        );
            
                        // method result
            
                    }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::log__String__Object", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Object var2 = (Object) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinkerInstance@" + refId + "::log(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.log(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::log__String", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinkerInstance@" + refId + "::log(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.log(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.Logger::log", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinker.Logger ref = (com.getkeepsafe.relinker.ReLinker.Logger) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker.Logger@" + refId + "::log(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.log(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LoadListener::success", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinker.LoadListener ref = (com.getkeepsafe.relinker.ReLinker.LoadListener) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker.LoadListener@" + refId + "::success(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.success();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::loadLibrary__android_content_Context__String", (args, methodResult) -> {
                // args
                // ref arg
                android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker::loadLibrary(" + var0 + var1 + ")");
                }
            
                // invoke native method
                try {
                    com.getkeepsafe.relinker.ReLinker.loadLibrary(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::loadLibrary__android_content_Context__String__String", (args, methodResult) -> {
                // args
                // ref arg
                android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker::loadLibrary(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    com.getkeepsafe.relinker.ReLinker.loadLibrary(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::loadLibrary__android_content_Context__String__com_getkeepsafe_relinker_ReLinker_LoadListener", (args, methodResult) -> {
                // args
                // ref arg
                android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker::loadLibrary(" + var0 + var1 + ")");
                }
            
                // invoke native method
                try {
                    com.getkeepsafe.relinker.ReLinker.loadLibrary(var0, var1, new com.getkeepsafe.relinker.ReLinker.LoadListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.getkeepsafe.relinker.ReLinker::loadLibrary__android_content_Context__String__com_getkeepsafe_relinker_ReLinker_LoadListener::Callback");
            
                    // call dart method
                    @Override
                    public void success() {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: success(" + "" + ")");
                        }
            
                        // convert to jsonable data
            
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.LoadListener::success",
                                new HashMap<String, Object>() {{
                
                                }}
                        );
            
                        // method result
            
                    }
            
                    @Override
                    public void failure(java.lang.Throwable var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: failure(" + var1 + ")");
                        }
            
                        // convert to jsonable data
                        // ref arg
                        final Integer argvar1;
                        if (var1 != null) {
                            argvar1 = var1.hashCode();
                            getHEAP().put(argvar1, var1);
                        } else {
                            argvar1 = null;
                        }
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.LoadListener::failure",
                                new HashMap<String, Object>() {{
                                    put("var1", argvar1);
                                }}
                        );
            
                        // method result
            
                    }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::loadLibrary__android_content_Context__String__String__com_getkeepsafe_relinker_ReLinker_LoadListener", (args, methodResult) -> {
                // args
                // ref arg
                android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker::loadLibrary(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    com.getkeepsafe.relinker.ReLinker.loadLibrary(var0, var1, var2, new com.getkeepsafe.relinker.ReLinker.LoadListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.getkeepsafe.relinker.ReLinker::loadLibrary__android_content_Context__String__String__com_getkeepsafe_relinker_ReLinker_LoadListener::Callback");
            
                    // call dart method
                    @Override
                    public void success() {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: success(" + "" + ")");
                        }
            
                        // convert to jsonable data
            
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.LoadListener::success",
                                new HashMap<String, Object>() {{
                
                                }}
                        );
            
                        // method result
            
                    }
            
                    @Override
                    public void failure(java.lang.Throwable var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: failure(" + var1 + ")");
                        }
            
                        // convert to jsonable data
                        // ref arg
                        final Integer argvar1;
                        if (var1 != null) {
                            argvar1 = var1.hashCode();
                            getHEAP().put(argvar1, var1);
                        } else {
                            argvar1 = null;
                        }
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.LoadListener::failure",
                                new HashMap<String, Object>() {{
                                    put("var1", argvar1);
                                }}
                        );
            
                        // method result
            
                    }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::force", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker::force(" + "" + ")");
                }
            
                // invoke native method
                com.getkeepsafe.relinker.ReLinkerInstance result;
                try {
                    result = com.getkeepsafe.relinker.ReLinker.force();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::log", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker::log(" + "" + ")");
                }
            
                // invoke native method
                com.getkeepsafe.relinker.ReLinkerInstance result;
                try {
                    result = com.getkeepsafe.relinker.ReLinker.log(new com.getkeepsafe.relinker.ReLinker.Logger() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.getkeepsafe.relinker.ReLinker::log::Callback");
            
                    // call dart method
                    @Override
                    public void log(String var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: log(" + var1 + ")");
                        }
            
                        // convert to jsonable data
                        // jsonable arg
                        String argvar1 = var1;
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.getkeepsafe.relinker.ReLinker.Logger::log",
                                new HashMap<String, Object>() {{
                                    put("var1", argvar1);
                                }}
                        );
            
                        // method result
            
                    }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::recursively", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker::recursively(" + "" + ")");
                }
            
                // invoke native method
                com.getkeepsafe.relinker.ReLinkerInstance result;
                try {
                    result = com.getkeepsafe.relinker.ReLinker.recursively();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.elf.Elf.Header::getSectionHeader", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.elf.Elf.Header@" + refId + "::getSectionHeader(" + var1 + ")");
                }
            
                // invoke native method
                com.getkeepsafe.relinker.elf.Elf.SectionHeader result;
                try {
                    result = ref.getSectionHeader(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.elf.Elf.Header::getProgramHeader", (args, methodResult) -> {
                // args
                // jsonable arg
                long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.elf.Elf.Header@" + refId + "::getProgramHeader(" + var1 + ")");
                }
            
                // invoke native method
                com.getkeepsafe.relinker.elf.Elf.ProgramHeader result;
                try {
                    result = ref.getProgramHeader(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.elf.Elf.Header::getDynamicStructure", (args, methodResult) -> {
                // args
                // jsonable arg
                long var1 = (long) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.elf.Elf.Header@" + refId + "::getDynamicStructure(" + var1 + var3 + ")");
                }
            
                // invoke native method
                com.getkeepsafe.relinker.elf.Elf.DynamicStructure result;
                try {
                    result = ref.getDynamicStructure(var1, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::loadLibrary", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker.LibraryLoader@" + refId + "::loadLibrary(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.loadLibrary(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::loadPath", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker.LibraryLoader@" + refId + "::loadPath(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.loadPath(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::mapLibraryName", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker.LibraryLoader@" + refId + "::mapLibraryName(" + var1 + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.mapLibraryName(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::unmapLibraryName", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker.LibraryLoader@" + refId + "::unmapLibraryName(" + var1 + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.unmapLibraryName(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::supportedAbis", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.getkeepsafe.relinker.ReLinker.LibraryLoader@" + refId + "::supportedAbis(" + "" + ")");
                }
            
                // invoke native method
                String[] result;
                try {
                    result = ref.supportedAbis();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<String> jsonableResult = new ArrayList<String>(java.util.Arrays.asList(result));
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::force_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                    // invoke native method
                    com.getkeepsafe.relinker.ReLinkerInstance result;
                    try {
                        result = ref.force();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::recursively_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                    // invoke native method
                    com.getkeepsafe.relinker.ReLinkerInstance result;
                    try {
                        result = ref.recursively();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::loadLibrary__android_content_Context__String_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.loadLibrary(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::loadLibrary__android_content_Context__String__String_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.loadLibrary(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::log__String__Object_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Object var2 = (Object) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.log(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinkerInstance::log__String_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinkerInstance ref = (com.getkeepsafe.relinker.ReLinkerInstance) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.log(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.Logger::log_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinker.Logger ref = (com.getkeepsafe.relinker.ReLinker.Logger) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.log(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LoadListener::success_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinker.LoadListener ref = (com.getkeepsafe.relinker.ReLinker.LoadListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.success();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::loadLibrary__android_content_Context__String_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.getkeepsafe.relinker.ReLinker.loadLibrary(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::loadLibrary__android_content_Context__String__String_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.getkeepsafe.relinker.ReLinker.loadLibrary(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::force_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.getkeepsafe.relinker.ReLinkerInstance result;
                    try {
                        result = com.getkeepsafe.relinker.ReLinker.force();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker::recursively_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.getkeepsafe.relinker.ReLinkerInstance result;
                    try {
                        result = com.getkeepsafe.relinker.ReLinker.recursively();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.elf.Elf.Header::getSectionHeader_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                    // invoke native method
                    com.getkeepsafe.relinker.elf.Elf.SectionHeader result;
                    try {
                        result = ref.getSectionHeader(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.elf.Elf.Header::getProgramHeader_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                    // invoke native method
                    com.getkeepsafe.relinker.elf.Elf.ProgramHeader result;
                    try {
                        result = ref.getProgramHeader(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.elf.Elf.Header::getDynamicStructure_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.elf.Elf.Header ref = (com.getkeepsafe.relinker.elf.Elf.Header) getHEAP().get(refId);
            
                    // invoke native method
                    com.getkeepsafe.relinker.elf.Elf.DynamicStructure result;
                    try {
                        result = ref.getDynamicStructure(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::loadLibrary_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.loadLibrary(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::loadPath_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.loadPath(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::mapLibraryName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.mapLibraryName(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::unmapLibraryName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.unmapLibraryName(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.getkeepsafe.relinker.ReLinker.LibraryLoader::supportedAbis_batch", (argsBatch, methodResult) -> {
                List<List<String>> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.getkeepsafe.relinker.ReLinker.LibraryLoader ref = (com.getkeepsafe.relinker.ReLinker.LibraryLoader) getHEAP().get(refId);
            
                    // invoke native method
                    String[] result;
                    try {
                        result = ref.supportedAbis();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    List<String> jsonableResult = new ArrayList<String>(java.util.Arrays.asList(result));
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::createcom_getkeepsafe_relinker_ApkLibraryInstaller__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_getkeepsafe_relinker_ApkLibraryInstaller__");
            
                // args
            
            
                // create target object
                com.getkeepsafe.relinker.ApkLibraryInstaller obj = new com.getkeepsafe.relinker.ApkLibraryInstaller();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_getkeepsafe_relinker_MissingLibraryException__String", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_getkeepsafe_relinker_MissingLibraryException__String");
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.getkeepsafe.relinker.MissingLibraryException obj = new com.getkeepsafe.relinker.MissingLibraryException(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_getkeepsafe_relinker_BuildConfig__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_getkeepsafe_relinker_BuildConfig__");
            
                // args
            
            
                // create target object
                com.getkeepsafe.relinker.BuildConfig obj = new com.getkeepsafe.relinker.BuildConfig();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::create_batchcom_getkeepsafe_relinker_ApkLibraryInstaller__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.getkeepsafe.relinker.ApkLibraryInstaller obj = new com.getkeepsafe.relinker.ApkLibraryInstaller();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_getkeepsafe_relinker_MissingLibraryException__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.getkeepsafe.relinker.MissingLibraryException obj = new com.getkeepsafe.relinker.MissingLibraryException(var1);
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_getkeepsafe_relinker_BuildConfig__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.getkeepsafe.relinker.BuildConfig obj = new com.getkeepsafe.relinker.BuildConfig();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
