//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.hanyin_printer_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.hanyin_printer_fluttify.HanyinPrinterFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler5 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_bit_image_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_bit_image_mode_wrap(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_print_NV_bit_image_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_print_NV_bit_image_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_the_NV_graphics_memory_capacity_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_the_NV_graphics_memory_capacity_gmode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_the_reference_dot_density_for_graphics_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_the_reference_dot_density_for_graphics_gmode_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_print_the_graphics_data_in_the_print_buffer_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_print_the_graphics_data_in_the_print_buffer_gmode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_the_remaining_capacity_of_the_NV_graphics_memory_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_the_remaining_capacity_of_the_NV_graphics_memory_gmode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_the_remaining_capacity_of_the_download_graphics_memory_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_the_remaining_capacity_of_the_download_graphics_memory_gmode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_the_key_code_list_for_defined_NV_graphics_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_the_key_code_list_for_defined_NV_graphics_gmode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_delete_all_NV_graphics_data_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_delete_all_NV_graphics_data_gmode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_delete_the_specified_NV_graphics_data_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_delete_the_specified_NV_graphics_data_gmode_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_define_the_NV_graphics_data_cmd_header_raster_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_define_the_NV_graphics_data_cmd_header_raster_gmode_wrap(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_define_the_NV_graphics_data_raster_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int[] var10 = (int[]) ((Map<String, Object>) args).get("var10");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_define_the_NV_graphics_data_raster_gmode_wrap(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_define_the_NV_graphics_data_column_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int[] var10 = (int[]) ((Map<String, Object>) args).get("var10");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_define_the_NV_graphics_data_column_gmode_wrap(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_print_the_specified_NV_graphics_data_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte var4 = (byte) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte var5 = (byte) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_print_the_specified_NV_graphics_data_gmode_wrap(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_the_key_code_list_for_defined_download_graphics_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_the_key_code_list_for_defined_download_graphics_gmode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_delete_all_memory_graphics_data_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_delete_all_memory_graphics_data_gmode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_delete_the_specified_download_memory_graphics_data_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_delete_the_specified_download_memory_graphics_data_gmode_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_define_the_downloaded_graphics_data_raster_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int[] var10 = (int[]) ((Map<String, Object>) args).get("var10");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_define_the_downloaded_graphics_data_raster_gmode_wrap(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_define_the_downloaded_graphics_data_column_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int[] var10 = (int[]) ((Map<String, Object>) args).get("var10");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_define_the_downloaded_graphics_data_column_gmode_wrap(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_print_the_specified_downloaded_graphics_data_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte var4 = (byte) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte var5 = (byte) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_print_the_specified_downloaded_graphics_data_gmode_wrap(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_store_the_graphics_data_in_the_print_buffer_raster_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int[] var10 = (int[]) ((Map<String, Object>) args).get("var10");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_store_the_graphics_data_in_the_print_buffer_raster_gmode_wrap(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_store_the_graphics_data_in_the_print_buffer_column_gmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int[] var10 = (int[]) ((Map<String, Object>) args).get("var10");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_store_the_graphics_data_in_the_print_buffer_column_gmode_wrap(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_define_nv_bit_image_fmode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte[] var5 = (byte[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_define_nv_bit_image_fmode_wrap(var1, var2, var3, var4, var5, var6, var7);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_define_downloaded_bit_image_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_define_downloaded_bit_image_wrap(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_print_downloaded_bit_image_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_print_downloaded_bit_image_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_print_raster_img_cmd_header_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte[] var5 = (byte[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_print_raster_img_cmd_header_wrap(var1, var2, var3, var4, var5, var6, var7);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_print_raster_bit_image_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte[] var5 = (byte[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_print_raster_bit_image_wrap(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_real_time_status_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_real_time_status_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_peripheral_device_status_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_peripheral_device_status_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_paper_sensor_status_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_paper_sensor_status_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_enable_disable_ASB_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_enable_disable_ASB_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_status_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_status_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_print_position_HRI_characters_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_print_position_HRI_characters_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_font_HRI_characters_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_font_HRI_characters_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_bar_code_height_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_bar_code_height_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_print_bar_code_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte[] var5 = (byte[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_print_bar_code_wrap(var1, var2, var3, var4, var5, var6, var7);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_bar_code_width_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_bar_code_width_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_start_macro_definition_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_start_macro_definition_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_execute_macro_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte var4 = (byte) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte[] var5 = (byte[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_execute_macro_wrap(var1, var2, var3, var4, var5, var6, var7);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_return_home_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_return_home_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_unidirectional_print_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_unidirectional_print_mode_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_partial_cut_one_point_left_uncut_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_partial_cut_one_point_left_uncut_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_partial_cut_three_point_left_uncut_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_partial_cut_three_point_left_uncut_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_cut_mode_and_cut_paper_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_cut_mode_and_cut_paper_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_cut_mode_and_feed_paper_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_cut_mode_and_feed_paper_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_send_real_time_request_to_printer_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_send_real_time_request_to_printer_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_generate_pulse_in_real_time_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_generate_pulse_in_real_time_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_execute_power_off_sequence_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_execute_power_off_sequence_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_specified_status_in_real_time_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_specified_status_in_real_time_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_clear_buffer_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_clear_buffer_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_beep_integrated_beeper_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte var4 = (byte) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte[] var5 = (byte[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_beep_integrated_beeper_wrap(var1, var2, var3, var4, var5, var6, var7);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_peripheral_device_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_peripheral_device_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_execute_test_print_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_execute_test_print_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_enable_real_time_command_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte var4 = (byte) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte[] var5 = (byte[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_enable_real_time_command_wrap(var1, var2, var3, var4, var5, var6, var7);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_initialize_printer_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_initialize_printer_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_page_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_page_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_standard_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_standard_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_generate_pulse_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte var4 = (byte) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte[] var5 = (byte[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_generate_pulse_wrap(var1, var2, var3, var4, var5, var6, var7);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_the_print_control_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_the_print_control_mode_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_the_print_density_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_the_print_density_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_the_print_speed_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_the_print_speed_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_the_number_of_parts_for_the_thermal_head_energizing_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_the_number_of_parts_for_the_thermal_head_energizing_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_draw_line_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_draw_line_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_draw_rectangle_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_draw_rectangle_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_transmit_printer_id_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_transmit_printer_id_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_bt_name_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_bt_name_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_horizontal_and_vertical_motion_units_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_horizontal_and_vertical_motion_units_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_write_to_nv_user_memory_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_write_to_nv_user_memory_wrap(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_read_from_nv_user_memory_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_read_from_nv_user_memory_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_select_kanji_character_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_select_kanji_character_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_cancel_kanji_character_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_cancel_kanji_character_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_pdf417_set_the_number_of_columns_in_the_data_region_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_pdf417_set_the_number_of_columns_in_the_data_region_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_pdf417_set_the_number_of_rows_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_pdf417_set_the_number_of_rows_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_pdf417_set_the_width_of_the_module_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_pdf417_set_the_width_of_the_module_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_pdf417_set_the_row_height_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_pdf417_set_the_row_height_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_pdf417_set_the_error_correction_level_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte var3 = (byte) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_pdf417_set_the_error_correction_level_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_pdf417_select_the_options_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_pdf417_select_the_options_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_pdf417_store_the_data_in_the_symbol_storage_area_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_pdf417_store_the_data_in_the_symbol_storage_area_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_pdf417_print_the_symbol_data_in_the_symbol_storage_area_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_pdf417_print_the_symbol_data_in_the_symbol_storage_area_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_pdf417_transmit_the_size_information_of_the_symbol_data_in_the_symbol_storage_area_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_pdf417_transmit_the_size_information_of_the_symbol_data_in_the_symbol_storage_area_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_qr_select_the_model_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_qr_select_the_model_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_qr_set_the_size_of_module_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_qr_set_the_size_of_module_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_qr_select_the_error_correction_level_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_qr_select_the_error_correction_level_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_qr_store_the_data_in_the_symbol_storage_area_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte[] var4 = (byte[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_qr_store_the_data_in_the_symbol_storage_area_wrap(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_qr_print_the_symbol_data_mpt_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    byte var4 = (byte) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    byte var5 = (byte) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_qr_print_the_symbol_data_mpt_wrap(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_qr_print_the_symbol_data_in_the_symbol_storage_area_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_qr_print_the_symbol_data_in_the_symbol_storage_area_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_qr_transmit_the_size_information_of_the_symbol_data_in_the_symbol_storage_area_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_qr_transmit_the_size_information_of_the_symbol_data_in_the_symbol_storage_area_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_feed_paper_to_the_label_peeling_position_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_feed_paper_to_the_label_peeling_position_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_feed_paper_to_the_cutting_position_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_feed_paper_to_the_cutting_position_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_feed_paper_to_the_print_starting_position_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_feed_paper_to_the_print_starting_position_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_goto_next_label_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_goto_next_label_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_1track_card_reader_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_1track_card_reader_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_2track_card_reader_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_2track_card_reader_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_1_2track_card_reader_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_1_2track_card_reader_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_123track_card_reader_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_123track_card_reader_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_set_3track_card_reader_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_set_3track_card_reader_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_cancel_track_card_reader_mode_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_cancel_track_card_reader_mode_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_selecting_mode_of_reading_smart_card_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_selecting_mode_of_reading_smart_card_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_selecting_mode_of_operate_smart_card_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte var2 = (byte) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_selecting_mode_of_operate_smart_card_wrap(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("HPRTAndroidSDKA300.hprt_printer_helper_cmd::hprt_cmd_get_random_data_from_smart_card_wrap_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    HPRTAndroidSDKA300.hprt_printer_helper_cmd ref = (HPRTAndroidSDKA300.hprt_printer_helper_cmd) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.hprt_cmd_get_random_data_from_smart_card_wrap(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
